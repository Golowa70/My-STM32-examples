
Uart_to W25Q_writer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000680c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073dc  080073dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080073dc  080073dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073dc  080073dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073dc  080073dc  000173dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080073e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019a0  20000070  08007454  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a10  08007454  00021a10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007d28d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c95  00000000  00000000  0009d326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b58  00000000  00000000  000a0fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000029e8  00000000  00000000  000a3b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019531  00000000  00000000  000a6500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019885  00000000  00000000  000bfa31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099aff  00000000  00000000  000d92b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172db5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c28c  00000000  00000000  00172e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006904 	.word	0x08006904

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006904 	.word	0x08006904

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__gedf2>:
 800072c:	f04f 3cff 	mov.w	ip, #4294967295
 8000730:	e006      	b.n	8000740 <__cmpdf2+0x4>
 8000732:	bf00      	nop

08000734 <__ledf2>:
 8000734:	f04f 0c01 	mov.w	ip, #1
 8000738:	e002      	b.n	8000740 <__cmpdf2+0x4>
 800073a:	bf00      	nop

0800073c <__cmpdf2>:
 800073c:	f04f 0c01 	mov.w	ip, #1
 8000740:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000744:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000748:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800074c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000756:	d01b      	beq.n	8000790 <__cmpdf2+0x54>
 8000758:	b001      	add	sp, #4
 800075a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800075e:	bf0c      	ite	eq
 8000760:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000764:	ea91 0f03 	teqne	r1, r3
 8000768:	bf02      	ittt	eq
 800076a:	ea90 0f02 	teqeq	r0, r2
 800076e:	2000      	moveq	r0, #0
 8000770:	4770      	bxeq	lr
 8000772:	f110 0f00 	cmn.w	r0, #0
 8000776:	ea91 0f03 	teq	r1, r3
 800077a:	bf58      	it	pl
 800077c:	4299      	cmppl	r1, r3
 800077e:	bf08      	it	eq
 8000780:	4290      	cmpeq	r0, r2
 8000782:	bf2c      	ite	cs
 8000784:	17d8      	asrcs	r0, r3, #31
 8000786:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800078a:	f040 0001 	orr.w	r0, r0, #1
 800078e:	4770      	bx	lr
 8000790:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d102      	bne.n	80007a0 <__cmpdf2+0x64>
 800079a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800079e:	d107      	bne.n	80007b0 <__cmpdf2+0x74>
 80007a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a8:	d1d6      	bne.n	8000758 <__cmpdf2+0x1c>
 80007aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007ae:	d0d3      	beq.n	8000758 <__cmpdf2+0x1c>
 80007b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdrcmple>:
 80007b8:	4684      	mov	ip, r0
 80007ba:	4610      	mov	r0, r2
 80007bc:	4662      	mov	r2, ip
 80007be:	468c      	mov	ip, r1
 80007c0:	4619      	mov	r1, r3
 80007c2:	4663      	mov	r3, ip
 80007c4:	e000      	b.n	80007c8 <__aeabi_cdcmpeq>
 80007c6:	bf00      	nop

080007c8 <__aeabi_cdcmpeq>:
 80007c8:	b501      	push	{r0, lr}
 80007ca:	f7ff ffb7 	bl	800073c <__cmpdf2>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	bf48      	it	mi
 80007d2:	f110 0f00 	cmnmi.w	r0, #0
 80007d6:	bd01      	pop	{r0, pc}

080007d8 <__aeabi_dcmpeq>:
 80007d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007dc:	f7ff fff4 	bl	80007c8 <__aeabi_cdcmpeq>
 80007e0:	bf0c      	ite	eq
 80007e2:	2001      	moveq	r0, #1
 80007e4:	2000      	movne	r0, #0
 80007e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ea:	bf00      	nop

080007ec <__aeabi_dcmplt>:
 80007ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f0:	f7ff ffea 	bl	80007c8 <__aeabi_cdcmpeq>
 80007f4:	bf34      	ite	cc
 80007f6:	2001      	movcc	r0, #1
 80007f8:	2000      	movcs	r0, #0
 80007fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007fe:	bf00      	nop

08000800 <__aeabi_dcmple>:
 8000800:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000804:	f7ff ffe0 	bl	80007c8 <__aeabi_cdcmpeq>
 8000808:	bf94      	ite	ls
 800080a:	2001      	movls	r0, #1
 800080c:	2000      	movhi	r0, #0
 800080e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000812:	bf00      	nop

08000814 <__aeabi_dcmpge>:
 8000814:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000818:	f7ff ffce 	bl	80007b8 <__aeabi_cdrcmple>
 800081c:	bf94      	ite	ls
 800081e:	2001      	movls	r0, #1
 8000820:	2000      	movhi	r0, #0
 8000822:	f85d fb08 	ldr.w	pc, [sp], #8
 8000826:	bf00      	nop

08000828 <__aeabi_dcmpgt>:
 8000828:	f84d ed08 	str.w	lr, [sp, #-8]!
 800082c:	f7ff ffc4 	bl	80007b8 <__aeabi_cdrcmple>
 8000830:	bf34      	ite	cc
 8000832:	2001      	movcc	r0, #1
 8000834:	2000      	movcs	r0, #0
 8000836:	f85d fb08 	ldr.w	pc, [sp], #8
 800083a:	bf00      	nop

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000842:	f003 f8ef 	bl	8003a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000846:	f000 f8a3 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 f947 	bl	8000adc <MX_GPIO_Init>
  MX_SPI1_Init();
 800084e:	f000 f8e5 	bl	8000a1c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000852:	f000 f919 	bl	8000a88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  W25qxx_Init();
 8000856:	f002 fe4f 	bl	80034f8 <W25qxx_Init>
  //W25qxx_EraseChip();
  //W25qxx_EraseBlock(0); // 65536 байт
  //W25qxx_EraseSector(0); // 4096 байт
 // W25qxx_WriteSector(water_20level_bits, 0, 0, 1024);
  HAL_Delay(100);
 800085a:	2064      	movs	r0, #100	; 0x64
 800085c:	f003 f944 	bl	8003ae8 <HAL_Delay>
  //W25qxx_ReadBytes(rxdataBuff, 0, 1024);

  HAL_UART_Receive_IT(&huart1, (uint8_t*)rxSourceBuff, SOURCE_BUFFER_SIZE);
 8000860:	f241 0201 	movw	r2, #4097	; 0x1001
 8000864:	4941      	ldr	r1, [pc, #260]	; (800096c <main+0x130>)
 8000866:	4842      	ldr	r0, [pc, #264]	; (8000970 <main+0x134>)
 8000868:	f004 ff2d 	bl	80056c6 <HAL_UART_Receive_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800086c:	4b40      	ldr	r3, [pc, #256]	; (8000970 <main+0x134>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	68da      	ldr	r2, [r3, #12]
 8000872:	4b3f      	ldr	r3, [pc, #252]	; (8000970 <main+0x134>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f042 0210 	orr.w	r2, r2, #16
 800087a:	60da      	str	r2, [r3, #12]


	u8g2_Setup_st7565_nhd_c12864_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8g2_gpio_and_delay_stm32);
 800087c:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <main+0x138>)
 800087e:	4a3e      	ldr	r2, [pc, #248]	; (8000978 <main+0x13c>)
 8000880:	493e      	ldr	r1, [pc, #248]	; (800097c <main+0x140>)
 8000882:	483f      	ldr	r0, [pc, #252]	; (8000980 <main+0x144>)
 8000884:	f001 f878 	bl	8001978 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this
 8000888:	483d      	ldr	r0, [pc, #244]	; (8000980 <main+0x144>)
 800088a:	f002 fc74 	bl	8003176 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 800088e:	2100      	movs	r1, #0
 8000890:	483b      	ldr	r0, [pc, #236]	; (8000980 <main+0x144>)
 8000892:	f002 fc7f 	bl	8003194 <u8x8_SetPowerSave>
	u8g2_SetContrast(&u8g2, 250);
 8000896:	21fa      	movs	r1, #250	; 0xfa
 8000898:	4839      	ldr	r0, [pc, #228]	; (8000980 <main+0x144>)
 800089a:	f002 fc8c 	bl	80031b6 <u8x8_SetContrast>
	u8g2_ClearDisplay(&u8g2);
 800089e:	4838      	ldr	r0, [pc, #224]	; (8000980 <main+0x144>)
 80008a0:	f001 f844 	bl	800192c <u8g2_ClearDisplay>

	u8g2_SetFont(&u8g2, u8g2_font_courB18_tr);
 80008a4:	4937      	ldr	r1, [pc, #220]	; (8000984 <main+0x148>)
 80008a6:	4836      	ldr	r0, [pc, #216]	; (8000980 <main+0x144>)
 80008a8:	f001 fe10 	bl	80024cc <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, 20, 30, "Hello!");
 80008ac:	4b36      	ldr	r3, [pc, #216]	; (8000988 <main+0x14c>)
 80008ae:	221e      	movs	r2, #30
 80008b0:	2114      	movs	r1, #20
 80008b2:	4833      	ldr	r0, [pc, #204]	; (8000980 <main+0x144>)
 80008b4:	f001 fd6c 	bl	8002390 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 80008b8:	4831      	ldr	r0, [pc, #196]	; (8000980 <main+0x144>)
 80008ba:	f000 ffcf 	bl	800185c <u8g2_SendBuffer>
	HAL_Delay(1000);
 80008be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c2:	f003 f911 	bl	8003ae8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		UartToFlashWriter();
 80008c6:	f000 f9e3 	bl	8000c90 <UartToFlashWriter>

		u8g2_ClearBuffer(&u8g2);
 80008ca:	482d      	ldr	r0, [pc, #180]	; (8000980 <main+0x144>)
 80008cc:	f000 ff53 	bl	8001776 <u8g2_ClearBuffer>
		W25qxx_ReadBytes(rxdataBuff, 0, 1024);
 80008d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008d4:	2100      	movs	r1, #0
 80008d6:	482d      	ldr	r0, [pc, #180]	; (800098c <main+0x150>)
 80008d8:	f003 f824 	bl	8003924 <W25qxx_ReadBytes>
		u8g2_DrawXBMP(&u8g2, 0, 0, 64, 55, rxdataBuff);
 80008dc:	4b2b      	ldr	r3, [pc, #172]	; (800098c <main+0x150>)
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	2337      	movs	r3, #55	; 0x37
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	4825      	ldr	r0, [pc, #148]	; (8000980 <main+0x144>)
 80008ec:	f000 ff00 	bl	80016f0 <u8g2_DrawXBMP>
		u8g2_SendBuffer(&u8g2);
 80008f0:	4823      	ldr	r0, [pc, #140]	; (8000980 <main+0x144>)
 80008f2:	f000 ffb3 	bl	800185c <u8g2_SendBuffer>
		HAL_Delay(3000);
 80008f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008fa:	f003 f8f5 	bl	8003ae8 <HAL_Delay>
		u8g2_ClearBuffer(&u8g2);
 80008fe:	4820      	ldr	r0, [pc, #128]	; (8000980 <main+0x144>)
 8000900:	f000 ff39 	bl	8001776 <u8g2_ClearBuffer>
		W25qxx_ReadBytes(rxdataBuff, (FLASH_SECTOR_SIZE*1), 1024);
 8000904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090c:	481f      	ldr	r0, [pc, #124]	; (800098c <main+0x150>)
 800090e:	f003 f809 	bl	8003924 <W25qxx_ReadBytes>
		u8g2_DrawXBMP(&u8g2, 0, 0, 64, 55, rxdataBuff);
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <main+0x150>)
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	2337      	movs	r3, #55	; 0x37
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2340      	movs	r3, #64	; 0x40
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	4817      	ldr	r0, [pc, #92]	; (8000980 <main+0x144>)
 8000922:	f000 fee5 	bl	80016f0 <u8g2_DrawXBMP>
		u8g2_SendBuffer(&u8g2);
 8000926:	4816      	ldr	r0, [pc, #88]	; (8000980 <main+0x144>)
 8000928:	f000 ff98 	bl	800185c <u8g2_SendBuffer>
		HAL_Delay(3000);
 800092c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000930:	f003 f8da 	bl	8003ae8 <HAL_Delay>
		u8g2_ClearBuffer(&u8g2);
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <main+0x144>)
 8000936:	f000 ff1e 	bl	8001776 <u8g2_ClearBuffer>
		W25qxx_ReadBytes(rxdataBuff, (FLASH_SECTOR_SIZE*2), 1024);
 800093a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800093e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000942:	4812      	ldr	r0, [pc, #72]	; (800098c <main+0x150>)
 8000944:	f002 ffee 	bl	8003924 <W25qxx_ReadBytes>
		u8g2_DrawXBMP(&u8g2, 0, 0, 64, 55, rxdataBuff);
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <main+0x150>)
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	2337      	movs	r3, #55	; 0x37
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2340      	movs	r3, #64	; 0x40
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <main+0x144>)
 8000958:	f000 feca 	bl	80016f0 <u8g2_DrawXBMP>
		u8g2_SendBuffer(&u8g2);
 800095c:	4808      	ldr	r0, [pc, #32]	; (8000980 <main+0x144>)
 800095e:	f000 ff7d 	bl	800185c <u8g2_SendBuffer>
		HAL_Delay(3000);
 8000962:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000966:	f003 f8bf 	bl	8003ae8 <HAL_Delay>
		UartToFlashWriter();
 800096a:	e7ac      	b.n	80008c6 <main+0x8a>
 800096c:	200005d0 	.word	0x200005d0
 8000970:	2000058c 	.word	0x2000058c
 8000974:	080011bd 	.word	0x080011bd
 8000978:	080012d1 	.word	0x080012d1
 800097c:	080072e0 	.word	0x080072e0
 8000980:	200004f8 	.word	0x200004f8
 8000984:	08006a1c 	.word	0x08006a1c
 8000988:	0800691c 	.word	0x0800691c
 800098c:	200015d4 	.word	0x200015d4

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b090      	sub	sp, #64	; 0x40
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	2228      	movs	r2, #40	; 0x28
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f005 fb6e 	bl	8006080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c0:	2301      	movs	r3, #1
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 fc0f 	bl	80041fc <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009e4:	f000 fcc8 	bl	8001378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e8:	230f      	movs	r3, #15
 80009ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ec:	2302      	movs	r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2102      	movs	r1, #2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 fe7a 	bl	80046fc <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a0e:	f000 fcb3 	bl	8001378 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3740      	adds	r7, #64	; 0x40
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a22:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a50:	2220      	movs	r2, #32
 8000a52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a68:	220a      	movs	r2, #10
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a6e:	f003 ffdf 	bl	8004a30 <HAL_SPI_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a78:	f000 fc7e 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200004a0 	.word	0x200004a0
 8000a84:	40013000 	.word	0x40013000

08000a88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART1_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f004 fd22 	bl	8005508 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f000 fc55 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000058c 	.word	0x2000058c
 8000ad8:	40013800 	.word	0x40013800

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af0:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a36      	ldr	r2, [pc, #216]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b08:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a30      	ldr	r2, [pc, #192]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b0e:	f043 0320 	orr.w	r3, r3, #32
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0320 	and.w	r3, r3, #32
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a2a      	ldr	r2, [pc, #168]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a24      	ldr	r2, [pc, #144]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port, W25Q_CS_Pin, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b56:	481f      	ldr	r0, [pc, #124]	; (8000bd4 <MX_GPIO_Init+0xf8>)
 8000b58:	f003 fb38 	bl	80041cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2118      	movs	r1, #24
 8000b60:	481d      	ldr	r0, [pc, #116]	; (8000bd8 <MX_GPIO_Init+0xfc>)
 8000b62:	f003 fb33 	bl	80041cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2101      	movs	r1, #1
 8000b6a:	481c      	ldr	r0, [pc, #112]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000b6c:	f003 fb2e 	bl	80041cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : W25Q_CS_Pin */
  GPIO_InitStruct.Pin = W25Q_CS_Pin;
 8000b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(W25Q_CS_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	4619      	mov	r1, r3
 8000b88:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <MX_GPIO_Init+0xf8>)
 8000b8a:	f003 f99b 	bl	8003ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin;
 8000b8e:	2318      	movs	r3, #24
 8000b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <MX_GPIO_Init+0xfc>)
 8000ba6:	f003 f98d 	bl	8003ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000baa:	2301      	movs	r3, #1
 8000bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000bc2:	f003 f97f 	bl	8003ec4 <HAL_GPIO_Init>

}
 8000bc6:	bf00      	nop
 8000bc8:	3720      	adds	r7, #32
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40011000 	.word	0x40011000
 8000bd8:	40010800 	.word	0x40010800
 8000bdc:	40010c00 	.word	0x40010c00

08000be0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

//колбэк прерывания по завершению приёма данных максимального размера буфера
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
         if(huart == &huart1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <HAL_UART_RxCpltCallback+0x20>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d102      	bne.n	8000bf6 <HAL_UART_RxCpltCallback+0x16>


          {
        	 flag_uart_data_overflow = true;
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <HAL_UART_RxCpltCallback+0x24>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
			  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
			  HAL_UART_Receive_IT(&huart1, (uint8_t*)rxSourceBuff, SOURCE_BUFFER_SIZE);
			*/
          }

}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	2000058c 	.word	0x2000058c
 8000c04:	2000008d 	.word	0x2000008d

08000c08 <HAL_UART_IDLE_Callback>:

// функция колбэк срабатывания флага свободности UART
//определяет конец приёма при неизвестном размере входных данных
//проверка флага UART_FLAG_IDLE и колбэк добавлены в обработчик прерывания
void HAL_UART_IDLE_Callback(UART_HandleTypeDef *huart)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

	if(huart == &huart1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <HAL_UART_IDLE_Callback+0x78>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d12f      	bne.n	8000c78 <HAL_UART_IDLE_Callback+0x70>
	{
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_UART_IDLE_Callback+0x78>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_UART_IDLE_Callback+0x78>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 0210 	bic.w	r2, r2, #16
 8000c26:	60da      	str	r2, [r3, #12]
		rx_received_len = SOURCE_BUFFER_SIZE - huart->RxXferCount;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000c32:	3301      	adds	r3, #1
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <HAL_UART_IDLE_Callback+0x7c>)
 8000c38:	801a      	strh	r2, [r3, #0]

		flag_uart_data_avalible = true;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <HAL_UART_IDLE_Callback+0x80>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive(&huart1);
 8000c40:	480f      	ldr	r0, [pc, #60]	; (8000c80 <HAL_UART_IDLE_Callback+0x78>)
 8000c42:	f004 fd70 	bl	8005726 <HAL_UART_AbortReceive>
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_UART_IDLE_Callback+0x78>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_UART_IDLE_Callback+0x78>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_UART_IDLE_Callback+0x78>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <HAL_UART_IDLE_Callback+0x78>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0210 	orr.w	r2, r2, #16
 8000c6a:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)rxSourceBuff, SOURCE_BUFFER_SIZE);
 8000c6c:	f241 0201 	movw	r2, #4097	; 0x1001
 8000c70:	4906      	ldr	r1, [pc, #24]	; (8000c8c <HAL_UART_IDLE_Callback+0x84>)
 8000c72:	4803      	ldr	r0, [pc, #12]	; (8000c80 <HAL_UART_IDLE_Callback+0x78>)
 8000c74:	f004 fd27 	bl	80056c6 <HAL_UART_Receive_IT>
	}
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000058c 	.word	0x2000058c
 8000c84:	2000049c 	.word	0x2000049c
 8000c88:	2000008c 	.word	0x2000008c
 8000c8c:	200005d0 	.word	0x200005d0

08000c90 <UartToFlashWriter>:
//**************************************************************************

//функция приёма данных по UART и записи их во флэш W25Q
void UartToFlashWriter(void){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b092      	sub	sp, #72	; 0x48
 8000c94:	af00      	add	r7, sp, #0

	if (flag_uart_data_avalible) {
 8000c96:	4bc0      	ldr	r3, [pc, #768]	; (8000f98 <UartToFlashWriter+0x308>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 81ec 	beq.w	800107a <UartToFlashWriter+0x3ea>

		flag_uart_data_avalible = false;
 8000ca2:	4bbd      	ldr	r3, [pc, #756]	; (8000f98 <UartToFlashWriter+0x308>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
			data_overflow,
			error,
			end
		};

		enum state step = check_sector_index_prefix;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		uint16_t i = 0; //incoming char counter
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		uint8_t data_byte = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		bool flag_flash_address_ok = false;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		bool flag_end = false;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		char buff[64] = { 0, };
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	223c      	movs	r2, #60	; 0x3c
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f005 f9d5 	bl	8006080 <memset>

		if (flag_uart_data_overflow) {
 8000cd6:	4bb1      	ldr	r3, [pc, #708]	; (8000f9c <UartToFlashWriter+0x30c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <UartToFlashWriter+0x5e>
			step = source_overflow;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			flag_uart_data_overflow = false;
 8000ce6:	4bad      	ldr	r3, [pc, #692]	; (8000f9c <UartToFlashWriter+0x30c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e1ba      	b.n	8001064 <UartToFlashWriter+0x3d4>
		} else {
			step = check_sector_index_prefix;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}

		while (!flag_end) {
 8000cf4:	e1b6      	b.n	8001064 <UartToFlashWriter+0x3d4>

			switch (step) {
 8000cf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000cfa:	2b0a      	cmp	r3, #10
 8000cfc:	f200 81ae 	bhi.w	800105c <UartToFlashWriter+0x3cc>
 8000d00:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <UartToFlashWriter+0x78>)
 8000d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d06:	bf00      	nop
 8000d08:	08000d35 	.word	0x08000d35
 8000d0c:	08000d8b 	.word	0x08000d8b
 8000d10:	08000dd7 	.word	0x08000dd7
 8000d14:	08000e0b 	.word	0x08000e0b
 8000d18:	08000e57 	.word	0x08000e57
 8000d1c:	08000e95 	.word	0x08000e95
 8000d20:	08000efb 	.word	0x08000efb
 8000d24:	08000fc9 	.word	0x08000fc9
 8000d28:	08000ff5 	.word	0x08000ff5
 8000d2c:	08001021 	.word	0x08001021
 8000d30:	08001049 	.word	0x08001049

			case check_sector_index_prefix:
				if (rxSourceBuff[i] == '$' && rxSourceBuff[i + 1] == '0'
 8000d34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000d38:	4a99      	ldr	r2, [pc, #612]	; (8000fa0 <UartToFlashWriter+0x310>)
 8000d3a:	5cd3      	ldrb	r3, [r2, r3]
 8000d3c:	2b24      	cmp	r3, #36	; 0x24
 8000d3e:	d120      	bne.n	8000d82 <UartToFlashWriter+0xf2>
 8000d40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000d44:	3301      	adds	r3, #1
 8000d46:	4a96      	ldr	r2, [pc, #600]	; (8000fa0 <UartToFlashWriter+0x310>)
 8000d48:	5cd3      	ldrb	r3, [r2, r3]
 8000d4a:	2b30      	cmp	r3, #48	; 0x30
 8000d4c:	d119      	bne.n	8000d82 <UartToFlashWriter+0xf2>
						&& rxSourceBuff[i + 2] == 'x'
 8000d4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000d52:	3302      	adds	r3, #2
 8000d54:	4a92      	ldr	r2, [pc, #584]	; (8000fa0 <UartToFlashWriter+0x310>)
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	2b78      	cmp	r3, #120	; 0x78
 8000d5a:	d112      	bne.n	8000d82 <UartToFlashWriter+0xf2>
						&& rxSourceBuff[i + 5] == '$') {
 8000d5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000d60:	3305      	adds	r3, #5
 8000d62:	4a8f      	ldr	r2, [pc, #572]	; (8000fa0 <UartToFlashWriter+0x310>)
 8000d64:	5cd3      	ldrb	r3, [r2, r3]
 8000d66:	2b24      	cmp	r3, #36	; 0x24
 8000d68:	d10b      	bne.n	8000d82 <UartToFlashWriter+0xf2>
					step = read_sector_index;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					i += 3;
 8000d70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000d74:	3303      	adds	r3, #3
 8000d76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
					flag_flash_address_ok = true;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000d80:	e002      	b.n	8000d88 <UartToFlashWriter+0xf8>
				} else {
					step = next;
 8000d82:	2305      	movs	r3, #5
 8000d84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
				break;
 8000d88:	e16c      	b.n	8001064 <UartToFlashWriter+0x3d4>

			case read_sector_index:
				flash_sector_address = hex_char_to_bin(rxSourceBuff[i]) * 16;
 8000d8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000d8e:	4a84      	ldr	r2, [pc, #528]	; (8000fa0 <UartToFlashWriter+0x310>)
 8000d90:	5cd3      	ldrb	r3, [r2, r3]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f980 	bl	8001098 <hex_char_to_bin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b80      	ldr	r3, [pc, #512]	; (8000fa4 <UartToFlashWriter+0x314>)
 8000da2:	801a      	strh	r2, [r3, #0]
				flash_sector_address += hex_char_to_bin(rxSourceBuff[i + 1]);
 8000da4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a7d      	ldr	r2, [pc, #500]	; (8000fa0 <UartToFlashWriter+0x310>)
 8000dac:	5cd3      	ldrb	r3, [r2, r3]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f972 	bl	8001098 <hex_char_to_bin>
 8000db4:	4603      	mov	r3, r0
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b7a      	ldr	r3, [pc, #488]	; (8000fa4 <UartToFlashWriter+0x314>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	4b78      	ldr	r3, [pc, #480]	; (8000fa4 <UartToFlashWriter+0x314>)
 8000dc2:	801a      	strh	r2, [r3, #0]

				if ((flash_sector_address >= FLASH_SECTOR_RANGE_MIN)
						|| (flash_sector_address <= FLASH_SECTOR_RANGE_MAX)) {
					i += 3;
 8000dc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000dc8:	3303      	adds	r3, #3
 8000dca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
					step = check_byte_prefix;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							flash_sector_address);
					HAL_UART_Transmit(&huart1, (uint8_t*) buff,
							strlen((char*) buff), 100);
					step = error;
				}
				break;
 8000dd4:	e146      	b.n	8001064 <UartToFlashWriter+0x3d4>

			case check_byte_prefix:
				if (rxSourceBuff[i] == '0' && rxSourceBuff[i + 1] == 'x') {
 8000dd6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000dda:	4a71      	ldr	r2, [pc, #452]	; (8000fa0 <UartToFlashWriter+0x310>)
 8000ddc:	5cd3      	ldrb	r3, [r2, r3]
 8000dde:	2b30      	cmp	r3, #48	; 0x30
 8000de0:	d10f      	bne.n	8000e02 <UartToFlashWriter+0x172>
 8000de2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a6d      	ldr	r2, [pc, #436]	; (8000fa0 <UartToFlashWriter+0x310>)
 8000dea:	5cd3      	ldrb	r3, [r2, r3]
 8000dec:	2b78      	cmp	r3, #120	; 0x78
 8000dee:	d108      	bne.n	8000e02 <UartToFlashWriter+0x172>
					step = read_byte;
 8000df0:	2303      	movs	r3, #3
 8000df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					i += 2;
 8000df6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000e00:	e002      	b.n	8000e08 <UartToFlashWriter+0x178>
				} else {
					step = next;
 8000e02:	2305      	movs	r3, #5
 8000e04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
				break;
 8000e08:	e12c      	b.n	8001064 <UartToFlashWriter+0x3d4>

			case read_byte:
				data_byte = hex_char_to_bin(rxSourceBuff[i]) * 16;
 8000e0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000e0e:	4a64      	ldr	r2, [pc, #400]	; (8000fa0 <UartToFlashWriter+0x310>)
 8000e10:	5cd3      	ldrb	r3, [r2, r3]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f940 	bl	8001098 <hex_char_to_bin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				data_byte += hex_char_to_bin(rxSourceBuff[i + 1]);
 8000e24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a5d      	ldr	r2, [pc, #372]	; (8000fa0 <UartToFlashWriter+0x310>)
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f932 	bl	8001098 <hex_char_to_bin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				step = write_byte;
 8000e44:	2304      	movs	r3, #4
 8000e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				i += 2;
 8000e4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000e4e:	3302      	adds	r3, #2
 8000e50:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				break;
 8000e54:	e106      	b.n	8001064 <UartToFlashWriter+0x3d4>

			case write_byte:
				if (rx_data_len <= (DATA_BUFFER_SIZE)) {
 8000e56:	4b54      	ldr	r3, [pc, #336]	; (8000fa8 <UartToFlashWriter+0x318>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e5e:	d815      	bhi.n	8000e8c <UartToFlashWriter+0x1fc>
					rxdataBuff[rx_data_len++] = data_byte;
 8000e60:	4b51      	ldr	r3, [pc, #324]	; (8000fa8 <UartToFlashWriter+0x318>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	b291      	uxth	r1, r2
 8000e68:	4a4f      	ldr	r2, [pc, #316]	; (8000fa8 <UartToFlashWriter+0x318>)
 8000e6a:	8011      	strh	r1, [r2, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f897 1041 	ldrb.w	r1, [r7, #65]	; 0x41
 8000e72:	4b4e      	ldr	r3, [pc, #312]	; (8000fac <UartToFlashWriter+0x31c>)
 8000e74:	5499      	strb	r1, [r3, r2]
					HAL_UART_Transmit(&huart1, (uint8_t*) &data_byte, 1, 100);
 8000e76:	f107 0141 	add.w	r1, r7, #65	; 0x41
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	484c      	ldr	r0, [pc, #304]	; (8000fb0 <UartToFlashWriter+0x320>)
 8000e80:	f004 fb8f 	bl	80055a2 <HAL_UART_Transmit>
					step = next;
 8000e84:	2305      	movs	r3, #5
 8000e86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000e8a:	e0eb      	b.n	8001064 <UartToFlashWriter+0x3d4>
				} else {
					step = data_overflow;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
				break;
 8000e92:	e0e7      	b.n	8001064 <UartToFlashWriter+0x3d4>

			case next:
				i++;
 8000e94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000e98:	3301      	adds	r3, #1
 8000e9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				if (i > rx_received_len) {
 8000e9e:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <UartToFlashWriter+0x324>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d91b      	bls.n	8000ee2 <UartToFlashWriter+0x252>
					if (flag_flash_address_ok == true) {
 8000eaa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <UartToFlashWriter+0x22a>
						step = save_data;
 8000eb2:	2306      	movs	r3, #6
 8000eb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000eb8:	e0d4      	b.n	8001064 <UartToFlashWriter+0x3d4>
					} else {
						sprintf(buff, "\r\n Incorrect format.");
 8000eba:	463b      	mov	r3, r7
 8000ebc:	493e      	ldr	r1, [pc, #248]	; (8000fb8 <UartToFlashWriter+0x328>)
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f005 f8e6 	bl	8006090 <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*) buff,
								strlen((char*) buff), 100);
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff f942 	bl	8000150 <strlen>
 8000ecc:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, (uint8_t*) buff,
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4639      	mov	r1, r7
 8000ed2:	2364      	movs	r3, #100	; 0x64
 8000ed4:	4836      	ldr	r0, [pc, #216]	; (8000fb0 <UartToFlashWriter+0x320>)
 8000ed6:	f004 fb64 	bl	80055a2 <HAL_UART_Transmit>
						step = error;
 8000eda:	2309      	movs	r3, #9
 8000edc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000ee0:	e0c0      	b.n	8001064 <UartToFlashWriter+0x3d4>
					}
				} else {
					if (flag_flash_address_ok == true)
 8000ee2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <UartToFlashWriter+0x262>
						step = check_byte_prefix;
 8000eea:	2302      	movs	r3, #2
 8000eec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000ef0:	e0b8      	b.n	8001064 <UartToFlashWriter+0x3d4>
					else
						step = check_sector_index_prefix;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
				break;
 8000ef8:	e0b4      	b.n	8001064 <UartToFlashWriter+0x3d4>

			case save_data:
				W25qxx_EraseSector(flash_sector_address);
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <UartToFlashWriter+0x314>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fbc2 	bl	8003688 <W25qxx_EraseSector>
				W25qxx_WriteSector(rxdataBuff, flash_sector_address, 0, rx_data_len);
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <UartToFlashWriter+0x314>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <UartToFlashWriter+0x318>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4826      	ldr	r0, [pc, #152]	; (8000fac <UartToFlashWriter+0x31c>)
 8000f12:	f002 fca5 	bl	8003860 <W25qxx_WriteSector>
				memset(rxdataBuff, 0, DATA_BUFFER_SIZE);
 8000f16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4823      	ldr	r0, [pc, #140]	; (8000fac <UartToFlashWriter+0x31c>)
 8000f1e:	f005 f8af 	bl	8006080 <memset>

				sprintf(buff, "\r\n Successful!");
 8000f22:	463b      	mov	r3, r7
 8000f24:	4925      	ldr	r1, [pc, #148]	; (8000fbc <UartToFlashWriter+0x32c>)
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 f8b2 	bl	8006090 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buff,
						strlen((char*) buff), 100);
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff f90e 	bl	8000150 <strlen>
 8000f34:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) buff,
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4639      	mov	r1, r7
 8000f3a:	2364      	movs	r3, #100	; 0x64
 8000f3c:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <UartToFlashWriter+0x320>)
 8000f3e:	f004 fb30 	bl	80055a2 <HAL_UART_Transmit>
				sprintf(buff, "\r\n Written %d byte to sector %d ", rx_data_len,
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <UartToFlashWriter+0x318>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <UartToFlashWriter+0x314>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	491c      	ldr	r1, [pc, #112]	; (8000fc0 <UartToFlashWriter+0x330>)
 8000f50:	f005 f89e 	bl	8006090 <siprintf>
						flash_sector_address);
				HAL_UART_Transmit(&huart1, (uint8_t*) buff,
						strlen((char*) buff), 100);
 8000f54:	463b      	mov	r3, r7
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff f8fa 	bl	8000150 <strlen>
 8000f5c:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) buff,
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4639      	mov	r1, r7
 8000f62:	2364      	movs	r3, #100	; 0x64
 8000f64:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <UartToFlashWriter+0x320>)
 8000f66:	f004 fb1c 	bl	80055a2 <HAL_UART_Transmit>
				sprintf(buff, "\r\n Source data size %d byte", rx_received_len);
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <UartToFlashWriter+0x324>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	463b      	mov	r3, r7
 8000f72:	4914      	ldr	r1, [pc, #80]	; (8000fc4 <UartToFlashWriter+0x334>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f005 f88b 	bl	8006090 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buff,
						strlen((char*) buff), 100);
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff f8e7 	bl	8000150 <strlen>
 8000f82:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) buff,
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	4639      	mov	r1, r7
 8000f88:	2364      	movs	r3, #100	; 0x64
 8000f8a:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <UartToFlashWriter+0x320>)
 8000f8c:	f004 fb09 	bl	80055a2 <HAL_UART_Transmit>
				step = end;
 8000f90:	230a      	movs	r3, #10
 8000f92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8000f96:	e065      	b.n	8001064 <UartToFlashWriter+0x3d4>
 8000f98:	2000008c 	.word	0x2000008c
 8000f9c:	2000008d 	.word	0x2000008d
 8000fa0:	200005d0 	.word	0x200005d0
 8000fa4:	2000049e 	.word	0x2000049e
 8000fa8:	200015d2 	.word	0x200015d2
 8000fac:	200015d4 	.word	0x200015d4
 8000fb0:	2000058c 	.word	0x2000058c
 8000fb4:	2000049c 	.word	0x2000049c
 8000fb8:	08006924 	.word	0x08006924
 8000fbc:	0800693c 	.word	0x0800693c
 8000fc0:	0800694c 	.word	0x0800694c
 8000fc4:	08006970 	.word	0x08006970

			case source_overflow:
				sprintf(buff,
 8000fc8:	463b      	mov	r3, r7
 8000fca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fce:	492d      	ldr	r1, [pc, #180]	; (8001084 <UartToFlashWriter+0x3f4>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f005 f85d 	bl	8006090 <siprintf>
						"\r\n Source buffer overflow.\r\n Max size %d byte",
						SOURCE_BUFFER_SIZE - 1);
				HAL_UART_Transmit(&huart1, (uint8_t*) buff,
						strlen((char*) buff), 100);
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff f8b9 	bl	8000150 <strlen>
 8000fde:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) buff,
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4639      	mov	r1, r7
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	4828      	ldr	r0, [pc, #160]	; (8001088 <UartToFlashWriter+0x3f8>)
 8000fe8:	f004 fadb 	bl	80055a2 <HAL_UART_Transmit>
				step = error;
 8000fec:	2309      	movs	r3, #9
 8000fee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8000ff2:	e037      	b.n	8001064 <UartToFlashWriter+0x3d4>

			case data_overflow:
				sprintf(buff, "\r\n Data buffer overflow.\r\n Max size %d byte",
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ffa:	4924      	ldr	r1, [pc, #144]	; (800108c <UartToFlashWriter+0x3fc>)
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f005 f847 	bl	8006090 <siprintf>
						DATA_BUFFER_SIZE);
				HAL_UART_Transmit(&huart1, (uint8_t*) buff,
						strlen((char*) buff), 100);
 8001002:	463b      	mov	r3, r7
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f8a3 	bl	8000150 <strlen>
 800100a:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) buff,
 800100c:	b29a      	uxth	r2, r3
 800100e:	4639      	mov	r1, r7
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	481d      	ldr	r0, [pc, #116]	; (8001088 <UartToFlashWriter+0x3f8>)
 8001014:	f004 fac5 	bl	80055a2 <HAL_UART_Transmit>
				step = error;
 8001018:	2309      	movs	r3, #9
 800101a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800101e:	e021      	b.n	8001064 <UartToFlashWriter+0x3d4>

			case error:
				sprintf(buff, "\r\n Fault.");
 8001020:	463b      	mov	r3, r7
 8001022:	491b      	ldr	r1, [pc, #108]	; (8001090 <UartToFlashWriter+0x400>)
 8001024:	4618      	mov	r0, r3
 8001026:	f005 f833 	bl	8006090 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buff,
						strlen((char*) buff), 100);
 800102a:	463b      	mov	r3, r7
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff f88f 	bl	8000150 <strlen>
 8001032:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) buff,
 8001034:	b29a      	uxth	r2, r3
 8001036:	4639      	mov	r1, r7
 8001038:	2364      	movs	r3, #100	; 0x64
 800103a:	4813      	ldr	r0, [pc, #76]	; (8001088 <UartToFlashWriter+0x3f8>)
 800103c:	f004 fab1 	bl	80055a2 <HAL_UART_Transmit>
				step = end;
 8001040:	230a      	movs	r3, #10
 8001042:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8001046:	e00d      	b.n	8001064 <UartToFlashWriter+0x3d4>

			case end:
				flag_end = true;
 8001048:	2301      	movs	r3, #1
 800104a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				step = check_sector_index_prefix;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				rx_data_len = 0;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <UartToFlashWriter+0x404>)
 8001056:	2200      	movs	r2, #0
 8001058:	801a      	strh	r2, [r3, #0]
				break;
 800105a:	e003      	b.n	8001064 <UartToFlashWriter+0x3d4>

			default:
				step = error;
 800105c:	2309      	movs	r3, #9
 800105e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8001062:	bf00      	nop
		while (!flag_end) {
 8001064:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001068:	f083 0301 	eor.w	r3, r3, #1
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	f47f ae41 	bne.w	8000cf6 <UartToFlashWriter+0x66>
			}
		}

		flag_end = false;
 8001074:	2300      	movs	r3, #0
 8001076:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

	}

}
 800107a:	bf00      	nop
 800107c:	3748      	adds	r7, #72	; 0x48
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	0800698c 	.word	0x0800698c
 8001088:	2000058c 	.word	0x2000058c
 800108c:	080069bc 	.word	0x080069bc
 8001090:	080069e8 	.word	0x080069e8
 8001094:	200015d2 	.word	0x200015d2

08001098 <hex_char_to_bin>:

//**************************************************************************

// функция преобразования символа в число
int hex_char_to_bin(char ch)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
        if(ch >= '0' && ch <= '9')
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b2f      	cmp	r3, #47	; 0x2f
 80010a6:	d905      	bls.n	80010b4 <hex_char_to_bin+0x1c>
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b39      	cmp	r3, #57	; 0x39
 80010ac:	d802      	bhi.n	80010b4 <hex_char_to_bin+0x1c>
        {
                return (ch - '0');
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	3b30      	subs	r3, #48	; 0x30
 80010b2:	e013      	b.n	80010dc <hex_char_to_bin+0x44>
        }
        else if(ch >= 'a' && ch <= 'f')
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b60      	cmp	r3, #96	; 0x60
 80010b8:	d905      	bls.n	80010c6 <hex_char_to_bin+0x2e>
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b66      	cmp	r3, #102	; 0x66
 80010be:	d802      	bhi.n	80010c6 <hex_char_to_bin+0x2e>
        {
                return (10 + ch - 'a');
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	3b57      	subs	r3, #87	; 0x57
 80010c4:	e00a      	b.n	80010dc <hex_char_to_bin+0x44>
        }
        else if(ch >= 'A' && ch <= 'F')
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b40      	cmp	r3, #64	; 0x40
 80010ca:	d905      	bls.n	80010d8 <hex_char_to_bin+0x40>
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b46      	cmp	r3, #70	; 0x46
 80010d0:	d802      	bhi.n	80010d8 <hex_char_to_bin+0x40>
        {
                return (10 + ch - 'A');
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	3b37      	subs	r3, #55	; 0x37
 80010d6:	e001      	b.n	80010dc <hex_char_to_bin+0x44>
        }
        return -1;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295

}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
	...

080010e8 <u8g_port_delay_ns>:
//********************************************************************************

//функции задержек для работы библиотеки дисплея
void u8g_port_delay_ns(uint8_t ns) {
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	// Core @72 MHZ: 14ns per instruction.
	// __NOP(); is direct "nop;" instruction to cpu.
	// Divide ns / 28 (extra instruction for jump back to beginning of the loop) for loop cycles.
	for (uint8_t i = 0; i < (ns / 28); i++) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	e003      	b.n	8001100 <u8g_port_delay_ns+0x18>
		__NOP();
 80010f8:	bf00      	nop
	for (uint8_t i = 0; i < (ns / 28); i++) {
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	3301      	adds	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	4a06      	ldr	r2, [pc, #24]	; (8001120 <u8g_port_delay_ns+0x38>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	429a      	cmp	r2, r3
 8001110:	d3f2      	bcc.n	80010f8 <u8g_port_delay_ns+0x10>
	}
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	24924925 	.word	0x24924925
 8001124:	00000000 	.word	0x00000000

08001128 <u8g_port_delay_100ns>:

void u8g_port_delay_100ns(uint8_t ns) {
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	// Same as in u8g_hw_port_delay_ns function.
	// 100 / 28 = 3.57;
	for (uint16_t i = 0; i < (ns * 3.57); i++) {
 8001132:	2300      	movs	r3, #0
 8001134:	81fb      	strh	r3, [r7, #14]
 8001136:	e003      	b.n	8001140 <u8g_port_delay_100ns+0x18>
		__NOP();
 8001138:	bf00      	nop
	for (uint16_t i = 0; i < (ns * 3.57); i++) {
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	81fb      	strh	r3, [r7, #14]
 8001140:	89fb      	ldrh	r3, [r7, #14]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa88 	bl	8000658 <__aeabi_i2d>
 8001148:	4604      	mov	r4, r0
 800114a:	460d      	mov	r5, r1
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fa82 	bl	8000658 <__aeabi_i2d>
 8001154:	a30a      	add	r3, pc, #40	; (adr r3, 8001180 <u8g_port_delay_100ns+0x58>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff f801 	bl	8000160 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4620      	mov	r0, r4
 8001164:	4629      	mov	r1, r5
 8001166:	f7ff fb41 	bl	80007ec <__aeabi_dcmplt>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1e3      	bne.n	8001138 <u8g_port_delay_100ns+0x10>
	}
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bdb0      	pop	{r4, r5, r7, pc}
 800117a:	bf00      	nop
 800117c:	f3af 8000 	nop.w
 8001180:	28f5c28f 	.word	0x28f5c28f
 8001184:	400c8f5c 	.word	0x400c8f5c

08001188 <u8g_port_delay_10us>:

void u8g_port_delay_10us(uint8_t us) {
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	// Same as in u8g_hw_port_delay_ns function.
	// 3.57 * 100 ? 357;
	for (uint16_t i = 0; i < (us * 357); i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	81fb      	strh	r3, [r7, #14]
 8001196:	e003      	b.n	80011a0 <u8g_port_delay_10us+0x18>
		__NOP();
 8001198:	bf00      	nop
	for (uint16_t i = 0; i < (us * 357); i++) {
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	3301      	adds	r3, #1
 800119e:	81fb      	strh	r3, [r7, #14]
 80011a0:	89fa      	ldrh	r2, [r7, #14]
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f240 1165 	movw	r1, #357	; 0x165
 80011a8:	fb01 f303 	mul.w	r3, r1, r3
 80011ac:	429a      	cmp	r2, r3
 80011ae:	dbf3      	blt.n	8001198 <u8g_port_delay_10us+0x10>
	}
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <u8g2_gpio_and_delay_stm32>:
//************************************************************************

// функция обработки задержек и управления gpio для работы библиотеки дисплея
uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8,
		U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
		U8X8_UNUSED void *arg_ptr) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	72fb      	strb	r3, [r7, #11]
 80011ca:	4613      	mov	r3, r2
 80011cc:	72bb      	strb	r3, [r7, #10]

	switch (msg) {
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	3b28      	subs	r3, #40	; 0x28
 80011d2:	2b23      	cmp	r3, #35	; 0x23
 80011d4:	d873      	bhi.n	80012be <u8g2_gpio_and_delay_stm32+0x102>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <u8g2_gpio_and_delay_stm32+0x20>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	0800126d 	.word	0x0800126d
 80011e0:	08001297 	.word	0x08001297
 80011e4:	0800128d 	.word	0x0800128d
 80011e8:	08001283 	.word	0x08001283
 80011ec:	08001279 	.word	0x08001279
 80011f0:	080012bf 	.word	0x080012bf
 80011f4:	080012bf 	.word	0x080012bf
 80011f8:	080012bf 	.word	0x080012bf
 80011fc:	080012bf 	.word	0x080012bf
 8001200:	080012bf 	.word	0x080012bf
 8001204:	080012bf 	.word	0x080012bf
 8001208:	080012bf 	.word	0x080012bf
 800120c:	080012bf 	.word	0x080012bf
 8001210:	080012bf 	.word	0x080012bf
 8001214:	080012bf 	.word	0x080012bf
 8001218:	080012bf 	.word	0x080012bf
 800121c:	080012bf 	.word	0x080012bf
 8001220:	080012bf 	.word	0x080012bf
 8001224:	080012bf 	.word	0x080012bf
 8001228:	080012bf 	.word	0x080012bf
 800122c:	080012bf 	.word	0x080012bf
 8001230:	080012bf 	.word	0x080012bf
 8001234:	080012bf 	.word	0x080012bf
 8001238:	080012bf 	.word	0x080012bf
 800123c:	080012bf 	.word	0x080012bf
 8001240:	080012bf 	.word	0x080012bf
 8001244:	080012bf 	.word	0x080012bf
 8001248:	080012bf 	.word	0x080012bf
 800124c:	080012bf 	.word	0x080012bf
 8001250:	080012bf 	.word	0x080012bf
 8001254:	080012bf 	.word	0x080012bf
 8001258:	080012bf 	.word	0x080012bf
 800125c:	080012bf 	.word	0x080012bf
 8001260:	080012bf 	.word	0x080012bf
 8001264:	080012bf 	.word	0x080012bf
 8001268:	080012a1 	.word	0x080012a1

		case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2110      	movs	r1, #16
 8001270:	4816      	ldr	r0, [pc, #88]	; (80012cc <u8g2_gpio_and_delay_stm32+0x110>)
 8001272:	f002 ffab 	bl	80041cc <HAL_GPIO_WritePin>
		break;
 8001276:	e024      	b.n	80012c2 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_NANO:
		u8g_port_delay_ns(arg_int);
 8001278:	7abb      	ldrb	r3, [r7, #10]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff34 	bl	80010e8 <u8g_port_delay_ns>
		break;
 8001280:	e01f      	b.n	80012c2 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_100NANO:
		u8g_port_delay_100ns(arg_int);
 8001282:	7abb      	ldrb	r3, [r7, #10]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff4f 	bl	8001128 <u8g_port_delay_100ns>
		break;
 800128a:	e01a      	b.n	80012c2 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_10MICRO:
		u8g_port_delay_10us(arg_int);
 800128c:	7abb      	ldrb	r3, [r7, #10]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff7a 	bl	8001188 <u8g_port_delay_10us>
		break;
 8001294:	e015      	b.n	80012c2 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8001296:	7abb      	ldrb	r3, [r7, #10]
 8001298:	4618      	mov	r0, r3
 800129a:	f002 fc25 	bl	8003ae8 <HAL_Delay>
		break;
 800129e:	e010      	b.n	80012c2 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_GPIO_RESET:
		if (arg_int)
 80012a0:	7abb      	ldrb	r3, [r7, #10]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <u8g2_gpio_and_delay_stm32+0xf6>
		HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2108      	movs	r1, #8
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <u8g2_gpio_and_delay_stm32+0x110>)
 80012ac:	f002 ff8e 	bl	80041cc <HAL_GPIO_WritePin>
		else
		HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
		break;
 80012b0:	e007      	b.n	80012c2 <u8g2_gpio_and_delay_stm32+0x106>
		HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2108      	movs	r1, #8
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <u8g2_gpio_and_delay_stm32+0x110>)
 80012b8:	f002 ff88 	bl	80041cc <HAL_GPIO_WritePin>
		break;
 80012bc:	e001      	b.n	80012c2 <u8g2_gpio_and_delay_stm32+0x106>
		default:
		return 0;//A message was received which is not implemented, return 0 to indicate an error
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <u8g2_gpio_and_delay_stm32+0x108>
	}

	return 1; // command processed successfully.
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40010800 	.word	0x40010800

080012d0 <u8x8_byte_4wire_hw_spi>:
//***************************************************************************************************

// функция для работы библиотеки дисплея по SPI
uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	72fb      	strb	r3, [r7, #11]
 80012de:	4613      	mov	r3, r2
 80012e0:	72bb      	strb	r3, [r7, #10]

	switch (msg) {
 80012e2:	7afb      	ldrb	r3, [r7, #11]
 80012e4:	3b14      	subs	r3, #20
 80012e6:	2b0c      	cmp	r3, #12
 80012e8:	d837      	bhi.n	800135a <u8x8_byte_4wire_hw_spi+0x8a>
 80012ea:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <u8x8_byte_4wire_hw_spi+0x20>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	0800135f 	.word	0x0800135f
 80012f4:	0800135b 	.word	0x0800135b
 80012f8:	0800135b 	.word	0x0800135b
 80012fc:	08001325 	.word	0x08001325
 8001300:	08001343 	.word	0x08001343
 8001304:	0800134f 	.word	0x0800134f
 8001308:	0800135b 	.word	0x0800135b
 800130c:	0800135b 	.word	0x0800135b
 8001310:	0800135b 	.word	0x0800135b
 8001314:	0800135b 	.word	0x0800135b
 8001318:	0800135b 	.word	0x0800135b
 800131c:	0800135b 	.word	0x0800135b
 8001320:	08001335 	.word	0x08001335
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 100);
 8001324:	7abb      	ldrb	r3, [r7, #10]
 8001326:	b29a      	uxth	r2, r3
 8001328:	2364      	movs	r3, #100	; 0x64
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	480f      	ldr	r0, [pc, #60]	; (800136c <u8x8_byte_4wire_hw_spi+0x9c>)
 800132e:	f003 fc03 	bl	8004b38 <HAL_SPI_Transmit>
		break;
 8001332:	e015      	b.n	8001360 <u8x8_byte_4wire_hw_spi+0x90>

	case U8X8_MSG_BYTE_INIT:
		break;

	case U8X8_MSG_BYTE_SET_DC:
		 HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, arg_int);
 8001334:	7abb      	ldrb	r3, [r7, #10]
 8001336:	461a      	mov	r2, r3
 8001338:	2101      	movs	r1, #1
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <u8x8_byte_4wire_hw_spi+0xa0>)
 800133c:	f002 ff46 	bl	80041cc <HAL_GPIO_WritePin>
		break;
 8001340:	e00e      	b.n	8001360 <u8x8_byte_4wire_hw_spi+0x90>

	case U8X8_MSG_BYTE_START_TRANSFER:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2110      	movs	r1, #16
 8001346:	480b      	ldr	r0, [pc, #44]	; (8001374 <u8x8_byte_4wire_hw_spi+0xa4>)
 8001348:	f002 ff40 	bl	80041cc <HAL_GPIO_WritePin>
		break;
 800134c:	e008      	b.n	8001360 <u8x8_byte_4wire_hw_spi+0x90>

	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, SET);
 800134e:	2201      	movs	r2, #1
 8001350:	2110      	movs	r1, #16
 8001352:	4808      	ldr	r0, [pc, #32]	; (8001374 <u8x8_byte_4wire_hw_spi+0xa4>)
 8001354:	f002 ff3a 	bl	80041cc <HAL_GPIO_WritePin>
		break;
 8001358:	e002      	b.n	8001360 <u8x8_byte_4wire_hw_spi+0x90>

	default:
		return 0;
 800135a:	2300      	movs	r3, #0
 800135c:	e001      	b.n	8001362 <u8x8_byte_4wire_hw_spi+0x92>
		break;
 800135e:	bf00      	nop
	}
	return 1;
 8001360:	2301      	movs	r3, #1
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200004a0 	.word	0x200004a0
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40010800 	.word	0x40010800

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	e7fe      	b.n	8001380 <Error_Handler+0x8>
	...

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_MspInit+0x5c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <HAL_MspInit+0x5c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_MspInit+0x5c>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_MspInit+0x5c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_MspInit+0x5c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_MspInit+0x5c>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_MspInit+0x60>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <HAL_MspInit+0x60>)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000

080013e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_SPI_MspInit+0x88>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d12f      	bne.n	8001468 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_SPI_MspInit+0x8c>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_SPI_MspInit+0x8c>)
 800140e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_SPI_MspInit+0x8c>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_SPI_MspInit+0x8c>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a13      	ldr	r2, [pc, #76]	; (8001474 <HAL_SPI_MspInit+0x8c>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_SPI_MspInit+0x8c>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001438:	23a0      	movs	r3, #160	; 0xa0
 800143a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4619      	mov	r1, r3
 800144a:	480b      	ldr	r0, [pc, #44]	; (8001478 <HAL_SPI_MspInit+0x90>)
 800144c:	f002 fd3a 	bl	8003ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001450:	2340      	movs	r3, #64	; 0x40
 8001452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	4619      	mov	r1, r3
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <HAL_SPI_MspInit+0x90>)
 8001464:	f002 fd2e 	bl	8003ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40013000 	.word	0x40013000
 8001474:	40021000 	.word	0x40021000
 8001478:	40010800 	.word	0x40010800

0800147c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a20      	ldr	r2, [pc, #128]	; (8001518 <HAL_UART_MspInit+0x9c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d139      	bne.n	8001510 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <HAL_UART_MspInit+0xa0>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_UART_MspInit+0xa0>)
 80014a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_UART_MspInit+0xa0>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_UART_MspInit+0xa0>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a18      	ldr	r2, [pc, #96]	; (800151c <HAL_UART_MspInit+0xa0>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_UART_MspInit+0xa0>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4619      	mov	r1, r3
 80014e0:	480f      	ldr	r0, [pc, #60]	; (8001520 <HAL_UART_MspInit+0xa4>)
 80014e2:	f002 fcef 	bl	8003ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4619      	mov	r1, r3
 80014fa:	4809      	ldr	r0, [pc, #36]	; (8001520 <HAL_UART_MspInit+0xa4>)
 80014fc:	f002 fce2 	bl	8003ec4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2025      	movs	r0, #37	; 0x25
 8001506:	f002 fbea 	bl	8003cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800150a:	2025      	movs	r0, #37	; 0x25
 800150c:	f002 fc03 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001510:	bf00      	nop
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40013800 	.word	0x40013800
 800151c:	40021000 	.word	0x40021000
 8001520:	40010800 	.word	0x40010800

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156a:	f002 faa1 	bl	8003ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001578:	4807      	ldr	r0, [pc, #28]	; (8001598 <USART1_IRQHandler+0x24>)
 800157a:	f004 f92f 	bl	80057dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  //ловим флаг свободности UART
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET ) {
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <USART1_IRQHandler+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b10      	cmp	r3, #16
 800158a:	d102      	bne.n	8001592 <USART1_IRQHandler+0x1e>
	  HAL_UART_IDLE_Callback(&huart1);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <USART1_IRQHandler+0x24>)
 800158e:	f7ff fb3b 	bl	8000c08 <HAL_UART_IDLE_Callback>
  }

  /* USER CODE END USART1_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000058c 	.word	0x2000058c

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f004 fd2e 	bl	800602c <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20005000 	.word	0x20005000
 80015fc:	00000400 	.word	0x00000400
 8001600:	20000090 	.word	0x20000090
 8001604:	20001a10 	.word	0x20001a10

08001608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <u8g2_DrawHXBMP>:




void u8g2_DrawHXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af02      	add	r7, sp, #8
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	4608      	mov	r0, r1
 800161e:	4611      	mov	r1, r2
 8001620:	461a      	mov	r2, r3
 8001622:	4603      	mov	r3, r0
 8001624:	817b      	strh	r3, [r7, #10]
 8001626:	460b      	mov	r3, r1
 8001628:	813b      	strh	r3, [r7, #8]
 800162a:	4613      	mov	r3, r2
 800162c:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001634:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001636:	7dbb      	ldrb	r3, [r7, #22]
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001644:	897a      	ldrh	r2, [r7, #10]
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	4413      	add	r3, r2
 800164a:	b298      	uxth	r0, r3
 800164c:	893b      	ldrh	r3, [r7, #8]
 800164e:	3301      	adds	r3, #1
 8001650:	b29b      	uxth	r3, r3
 8001652:	893a      	ldrh	r2, [r7, #8]
 8001654:	8979      	ldrh	r1, [r7, #10]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4603      	mov	r3, r0
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f001 f87c 	bl	8002758 <u8g2_IsIntersection>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d040      	beq.n	80016e8 <u8g2_DrawHXBMP+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001666:	2301      	movs	r3, #1
 8001668:	75fb      	strb	r3, [r7, #23]
  while(len > 0)
 800166a:	e035      	b.n	80016d8 <u8g2_DrawHXBMP+0xc4>
  {
    if( u8x8_pgm_read(b) & mask ) {
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	4013      	ands	r3, r2
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00c      	beq.n	8001694 <u8g2_DrawHXBMP+0x80>
      u8g2->draw_color = color;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	7dba      	ldrb	r2, [r7, #22]
 800167e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001682:	893a      	ldrh	r2, [r7, #8]
 8001684:	8979      	ldrh	r1, [r7, #10]
 8001686:	2300      	movs	r3, #0
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2301      	movs	r3, #1
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 ffa5 	bl	80025dc <u8g2_DrawHVLine>
 8001692:	e010      	b.n	80016b6 <u8g2_DrawHXBMP+0xa2>
    } else if( u8g2->bitmap_transparency == 0 ) {
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10b      	bne.n	80016b6 <u8g2_DrawHXBMP+0xa2>
      u8g2->draw_color = ncolor;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	7d7a      	ldrb	r2, [r7, #21]
 80016a2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80016a6:	893a      	ldrh	r2, [r7, #8]
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	2300      	movs	r3, #0
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 ff93 	bl	80025dc <u8g2_DrawHVLine>
    }
   
    x++;
 80016b6:	897b      	ldrh	r3, [r7, #10]
 80016b8:	3301      	adds	r3, #1
 80016ba:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d104      	bne.n	80016d2 <u8g2_DrawHXBMP+0xbe>
    {
      mask = 1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	75fb      	strb	r3, [r7, #23]
      b++;
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	3301      	adds	r3, #1
 80016d0:	623b      	str	r3, [r7, #32]
    }
    len--;
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	80fb      	strh	r3, [r7, #6]
  while(len > 0)
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1c6      	bne.n	800166c <u8g2_DrawHXBMP+0x58>
  }
  u8g2->draw_color = color;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	7dba      	ldrb	r2, [r7, #22]
 80016e2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80016e6:	e000      	b.n	80016ea <u8g2_DrawHXBMP+0xd6>
    return;
 80016e8:	bf00      	nop
}
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <u8g2_DrawXBMP>:


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	817b      	strh	r3, [r7, #10]
 8001702:	460b      	mov	r3, r1
 8001704:	813b      	strh	r3, [r7, #8]
 8001706:	4613      	mov	r3, r2
 8001708:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 800170e:	8afb      	ldrh	r3, [r7, #22]
 8001710:	3307      	adds	r3, #7
 8001712:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001714:	8afb      	ldrh	r3, [r7, #22]
 8001716:	08db      	lsrs	r3, r3, #3
 8001718:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800171a:	897a      	ldrh	r2, [r7, #10]
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4413      	add	r3, r2
 8001720:	b298      	uxth	r0, r3
 8001722:	893a      	ldrh	r2, [r7, #8]
 8001724:	8c3b      	ldrh	r3, [r7, #32]
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	893a      	ldrh	r2, [r7, #8]
 800172c:	8979      	ldrh	r1, [r7, #10]
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	4603      	mov	r3, r0
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f001 f810 	bl	8002758 <u8g2_IsIntersection>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d017      	beq.n	800176e <u8g2_DrawXBMP+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800173e:	e012      	b.n	8001766 <u8g2_DrawXBMP+0x76>
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 8001740:	88f8      	ldrh	r0, [r7, #6]
 8001742:	893a      	ldrh	r2, [r7, #8]
 8001744:	8979      	ldrh	r1, [r7, #10]
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	4603      	mov	r3, r0
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff ff61 	bl	8001614 <u8g2_DrawHXBMP>
    bitmap += blen;
 8001752:	8afb      	ldrh	r3, [r7, #22]
 8001754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001756:	4413      	add	r3, r2
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 800175a:	893b      	ldrh	r3, [r7, #8]
 800175c:	3301      	adds	r3, #1
 800175e:	813b      	strh	r3, [r7, #8]
    h--;
 8001760:	8c3b      	ldrh	r3, [r7, #32]
 8001762:	3b01      	subs	r3, #1
 8001764:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001766:	8c3b      	ldrh	r3, [r7, #32]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1e9      	bne.n	8001740 <u8g2_DrawXBMP+0x50>
 800176c:	e000      	b.n	8001770 <u8g2_DrawXBMP+0x80>
    return;
 800176e:	bf00      	nop
  }
}
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	7c1b      	ldrb	r3, [r3, #16]
 8001784:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800178c:	461a      	mov	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 fc6b 	bl	8006080 <memset>
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af02      	add	r7, sp, #8
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	70fb      	strb	r3, [r7, #3]
 80017be:	4613      	mov	r3, r2
 80017c0:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	7c1b      	ldrb	r3, [r3, #16]
 80017c8:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	89ba      	ldrh	r2, [r7, #12]
 80017da:	fb02 f303 	mul.w	r3, r2, r3
 80017de:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80017e0:	89bb      	ldrh	r3, [r7, #12]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80017e6:	89bb      	ldrh	r3, [r7, #12]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	4413      	add	r3, r2
 80017ec:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80017ee:	7bf9      	ldrb	r1, [r7, #15]
 80017f0:	78ba      	ldrb	r2, [r7, #2]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	460b      	mov	r3, r1
 80017f8:	2100      	movs	r1, #0
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f001 fc8a 	bl	8003114 <u8x8_DrawTile>
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800181a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001822:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	7c5b      	ldrb	r3, [r3, #17]
 800182a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800182c:	7bba      	ldrb	r2, [r7, #14]
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	4619      	mov	r1, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffbd 	bl	80017b2 <u8g2_send_tile_row>
    src_row++;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	3301      	adds	r3, #1
 800183c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800183e:	7bbb      	ldrb	r3, [r7, #14]
 8001840:	3301      	adds	r3, #1
 8001842:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	7b7b      	ldrb	r3, [r7, #13]
 8001848:	429a      	cmp	r2, r3
 800184a:	d203      	bcs.n	8001854 <u8g2_send_buffer+0x4c>
 800184c:	7bba      	ldrb	r2, [r7, #14]
 800184e:	7b3b      	ldrb	r3, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d3eb      	bcc.n	800182c <u8g2_send_buffer+0x24>
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ffcf 	bl	8001808 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f001 fcb4 	bl	80031d8 <u8x8_RefreshDisplay>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	4798      	blx	r3
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff5b 	bl	8001776 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80018c0:	2100      	movs	r1, #0
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffd8 	bl	8001878 <u8g2_SetBufferCurrTileRow>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff95 	bl	8001808 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018e4:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	4413      	add	r3, r2
 80018f0:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	7c5b      	ldrb	r3, [r3, #17]
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d304      	bcc.n	8001908 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f001 fc6a 	bl	80031d8 <u8x8_RefreshDisplay>
    return 0;
 8001904:	2300      	movs	r3, #0
 8001906:	e00d      	b.n	8001924 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ff2f 	bl	8001776 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	4619      	mov	r1, r3
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffab 	bl	8001878 <u8g2_SetBufferCurrTileRow>
  return 1;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ffb7 	bl	80018a8 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffc8 	bl	80018d0 <u8g2_NextPage>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f9      	bne.n	800193a <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001946:	2100      	movs	r1, #0
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff95 	bl	8001878 <u8g2_SetBufferCurrTileRow>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2208      	movs	r2, #8
 8001964:	701a      	strb	r2, [r3, #0]
  return buf;
 8001966:	4b03      	ldr	r3, [pc, #12]	; (8001974 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000094 	.word	0x20000094

08001978 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af02      	add	r7, sp, #8
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 800198e:	490c      	ldr	r1, [pc, #48]	; (80019c0 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f001 fc81 	bl	8003298 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001996:	f107 0313 	add.w	r3, r7, #19
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ffdc 	bl	8001958 <u8g2_m_16_8_f>
 80019a0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80019a2:	7cfa      	ldrb	r2, [r7, #19]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 80019aa:	6979      	ldr	r1, [r7, #20]
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 ffbc 	bl	800292a <u8g2_SetupBuffer>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	08002e31 	.word	0x08002e31
 80019c0:	08002fd1 	.word	0x08002fd1
 80019c4:	080027af 	.word	0x080027af

080019c8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	781b      	ldrb	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	81fb      	strh	r3, [r7, #14]
    font++;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3301      	adds	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	89fb      	ldrh	r3, [r7, #14]
 8001a18:	4413      	add	r3, r2
 8001a1a:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001a1c:	89fb      	ldrh	r3, [r7, #14]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001a32:	2100      	movs	r1, #0
 8001a34:	6838      	ldr	r0, [r7, #0]
 8001a36:	f7ff ffc7 	bl	80019c8 <u8g2_font_get_byte>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001a42:	2101      	movs	r1, #1
 8001a44:	6838      	ldr	r0, [r7, #0]
 8001a46:	f7ff ffbf 	bl	80019c8 <u8g2_font_get_byte>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001a52:	2102      	movs	r1, #2
 8001a54:	6838      	ldr	r0, [r7, #0]
 8001a56:	f7ff ffb7 	bl	80019c8 <u8g2_font_get_byte>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001a62:	2103      	movs	r1, #3
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f7ff ffaf 	bl	80019c8 <u8g2_font_get_byte>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001a72:	2104      	movs	r1, #4
 8001a74:	6838      	ldr	r0, [r7, #0]
 8001a76:	f7ff ffa7 	bl	80019c8 <u8g2_font_get_byte>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001a82:	2105      	movs	r1, #5
 8001a84:	6838      	ldr	r0, [r7, #0]
 8001a86:	f7ff ff9f 	bl	80019c8 <u8g2_font_get_byte>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001a92:	2106      	movs	r1, #6
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f7ff ff97 	bl	80019c8 <u8g2_font_get_byte>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001aa2:	2107      	movs	r1, #7
 8001aa4:	6838      	ldr	r0, [r7, #0]
 8001aa6:	f7ff ff8f 	bl	80019c8 <u8g2_font_get_byte>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001ab2:	2108      	movs	r1, #8
 8001ab4:	6838      	ldr	r0, [r7, #0]
 8001ab6:	f7ff ff87 	bl	80019c8 <u8g2_font_get_byte>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001ac2:	2109      	movs	r1, #9
 8001ac4:	6838      	ldr	r0, [r7, #0]
 8001ac6:	f7ff ff7f 	bl	80019c8 <u8g2_font_get_byte>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001ad2:	210a      	movs	r1, #10
 8001ad4:	6838      	ldr	r0, [r7, #0]
 8001ad6:	f7ff ff77 	bl	80019c8 <u8g2_font_get_byte>
 8001ada:	4603      	mov	r3, r0
 8001adc:	b25a      	sxtb	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001ae2:	210b      	movs	r1, #11
 8001ae4:	6838      	ldr	r0, [r7, #0]
 8001ae6:	f7ff ff6f 	bl	80019c8 <u8g2_font_get_byte>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b25a      	sxtb	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001af2:	210c      	movs	r1, #12
 8001af4:	6838      	ldr	r0, [r7, #0]
 8001af6:	f7ff ff67 	bl	80019c8 <u8g2_font_get_byte>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b25a      	sxtb	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001b02:	210d      	movs	r1, #13
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff ff5f 	bl	80019c8 <u8g2_font_get_byte>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b25a      	sxtb	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001b12:	210e      	movs	r1, #14
 8001b14:	6838      	ldr	r0, [r7, #0]
 8001b16:	f7ff ff57 	bl	80019c8 <u8g2_font_get_byte>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b25a      	sxtb	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001b22:	210f      	movs	r1, #15
 8001b24:	6838      	ldr	r0, [r7, #0]
 8001b26:	f7ff ff4f 	bl	80019c8 <u8g2_font_get_byte>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b25a      	sxtb	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001b32:	2110      	movs	r1, #16
 8001b34:	6838      	ldr	r0, [r7, #0]
 8001b36:	f7ff ff47 	bl	80019c8 <u8g2_font_get_byte>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b25a      	sxtb	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001b42:	2111      	movs	r1, #17
 8001b44:	6838      	ldr	r0, [r7, #0]
 8001b46:	f7ff ff50 	bl	80019ea <u8g2_font_get_word>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001b52:	2113      	movs	r1, #19
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f7ff ff48 	bl	80019ea <u8g2_font_get_word>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001b62:	2115      	movs	r1, #21
 8001b64:	6838      	ldr	r0, [r7, #0]
 8001b66:	f7ff ff40 	bl	80019ea <u8g2_font_get_word>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	82da      	strh	r2, [r3, #22]
#endif
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b085      	sub	sp, #20
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7b1b      	ldrb	r3, [r3, #12]
 8001b8a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	7b7b      	ldrb	r3, [r7, #13]
 8001b98:	fa42 f303 	asr.w	r3, r2, r3
 8001b9c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001b9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ba0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001ba2:	7bba      	ldrb	r2, [r7, #14]
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001baa:	7bbb      	ldrb	r3, [r7, #14]
 8001bac:	2b07      	cmp	r3, #7
 8001bae:	d91a      	bls.n	8001be6 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001bb4:	7b3a      	ldrb	r2, [r7, #12]
 8001bb6:	7b7b      	ldrb	r3, [r7, #13]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	7b3b      	ldrb	r3, [r7, #12]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	b25a      	sxtb	r2, r3
 8001bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	b25b      	sxtb	r3, r3
 8001bde:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001be0:	7bbb      	ldrb	r3, [r7, #14]
 8001be2:	3b08      	subs	r3, #8
 8001be4:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7bba      	ldrb	r2, [r7, #14]
 8001c00:	731a      	strb	r2, [r3, #12]
  return val;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffab 	bl	8001b7a <u8g2_font_decode_get_unsigned_bits>
 8001c24:	4603      	mov	r3, r0
 8001c26:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001c32:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	7bbb      	ldrb	r3, [r7, #14]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	73fb      	strb	r3, [r7, #15]
  return v;
 8001c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001c54:	b490      	push	{r4, r7}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	4608      	mov	r0, r1
 8001c5e:	4611      	mov	r1, r2
 8001c60:	461a      	mov	r2, r3
 8001c62:	4623      	mov	r3, r4
 8001c64:	80fb      	strh	r3, [r7, #6]
 8001c66:	4603      	mov	r3, r0
 8001c68:	717b      	strb	r3, [r7, #5]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	713b      	strb	r3, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d014      	beq.n	8001ca2 <u8g2_add_vector_y+0x4e>
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	dc19      	bgt.n	8001cb0 <u8g2_add_vector_y+0x5c>
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <u8g2_add_vector_y+0x32>
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d007      	beq.n	8001c94 <u8g2_add_vector_y+0x40>
 8001c84:	e014      	b.n	8001cb0 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001c86:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	4413      	add	r3, r2
 8001c90:	80fb      	strh	r3, [r7, #6]
      break;
 8001c92:	e014      	b.n	8001cbe <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8001c94:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	80fb      	strh	r3, [r7, #6]
      break;
 8001ca0:	e00d      	b.n	8001cbe <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8001ca2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	88fa      	ldrh	r2, [r7, #6]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	80fb      	strh	r3, [r7, #6]
      break;
 8001cae:	e006      	b.n	8001cbe <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8001cb0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	88fa      	ldrh	r2, [r7, #6]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	80fb      	strh	r3, [r7, #6]
      break;      
 8001cbc:	bf00      	nop
  }
  return dy;
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc90      	pop	{r4, r7}
 8001cc8:	4770      	bx	lr

08001cca <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001cca:	b490      	push	{r4, r7}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4604      	mov	r4, r0
 8001cd2:	4608      	mov	r0, r1
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4623      	mov	r3, r4
 8001cda:	80fb      	strh	r3, [r7, #6]
 8001cdc:	4603      	mov	r3, r0
 8001cde:	717b      	strb	r3, [r7, #5]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	713b      	strb	r3, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d014      	beq.n	8001d18 <u8g2_add_vector_x+0x4e>
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	dc19      	bgt.n	8001d26 <u8g2_add_vector_x+0x5c>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <u8g2_add_vector_x+0x32>
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d007      	beq.n	8001d0a <u8g2_add_vector_x+0x40>
 8001cfa:	e014      	b.n	8001d26 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8001cfc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	4413      	add	r3, r2
 8001d06:	80fb      	strh	r3, [r7, #6]
      break;
 8001d08:	e014      	b.n	8001d34 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001d0a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	88fa      	ldrh	r2, [r7, #6]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	80fb      	strh	r3, [r7, #6]
      break;
 8001d16:	e00d      	b.n	8001d34 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001d18:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	88fa      	ldrh	r2, [r7, #6]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	80fb      	strh	r3, [r7, #6]
      break;
 8001d24:	e006      	b.n	8001d34 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001d26:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	4413      	add	r3, r2
 8001d30:	80fb      	strh	r3, [r7, #6]
      break;      
 8001d32:	bf00      	nop
  }
  return dx;
 8001d34:	88fb      	ldrh	r3, [r7, #6]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc90      	pop	{r4, r7}
 8001d3e:	4770      	bx	lr

08001d40 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3360      	adds	r3, #96	; 0x60
 8001d54:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d60:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001d68:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001d70:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	7d7b      	ldrb	r3, [r7, #21]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001d7e:	7dfa      	ldrb	r2, [r7, #23]
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d201      	bcs.n	8001d8a <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	889b      	ldrh	r3, [r3, #4]
 8001d8e:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	88db      	ldrh	r3, [r3, #6]
 8001d94:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001d96:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001d9a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	7c1b      	ldrb	r3, [r3, #16]
 8001da2:	89b8      	ldrh	r0, [r7, #12]
 8001da4:	f7ff ff91 	bl	8001cca <u8g2_add_vector_x>
 8001da8:	4603      	mov	r3, r0
 8001daa:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001dac:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001db0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	7c1b      	ldrb	r3, [r3, #16]
 8001db8:	8978      	ldrh	r0, [r7, #10]
 8001dba:	f7ff ff4b 	bl	8001c54 <u8g2_add_vector_y>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001dc2:	78bb      	ldrb	r3, [r7, #2]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d010      	beq.n	8001dea <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	7b9a      	ldrb	r2, [r3, #14]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001dd2:	7dbb      	ldrb	r3, [r7, #22]
 8001dd4:	b298      	uxth	r0, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	7c1b      	ldrb	r3, [r3, #16]
 8001dda:	897a      	ldrh	r2, [r7, #10]
 8001ddc:	89b9      	ldrh	r1, [r7, #12]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	4603      	mov	r3, r0
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fbfa 	bl	80025dc <u8g2_DrawHVLine>
 8001de8:	e013      	b.n	8001e12 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	7b5b      	ldrb	r3, [r3, #13]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10f      	bne.n	8001e12 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	7bda      	ldrb	r2, [r3, #15]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001dfc:	7dbb      	ldrb	r3, [r7, #22]
 8001dfe:	b298      	uxth	r0, r3
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	7c1b      	ldrb	r3, [r3, #16]
 8001e04:	897a      	ldrh	r2, [r7, #10]
 8001e06:	89b9      	ldrh	r1, [r7, #12]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fbe5 	bl	80025dc <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001e12:	7dfa      	ldrb	r2, [r7, #23]
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d309      	bcc.n	8001e2e <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001e1a:	7dfa      	ldrb	r2, [r7, #23]
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	757b      	strb	r3, [r7, #21]
    ly++;
 8001e26:	7d3b      	ldrb	r3, [r7, #20]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001e2c:	e79d      	b.n	8001d6a <u8g2_font_decode_len+0x2a>
      break;
 8001e2e:	bf00      	nop
  }
  lx += cnt;
 8001e30:	7d7a      	ldrb	r2, [r7, #21]
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
 8001e34:	4413      	add	r3, r2
 8001e36:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001e38:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8001e40:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	725a      	strb	r2, [r3, #9]
  
}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3360      	adds	r3, #96	; 0x60
 8001e5e:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001e72:	4619      	mov	r1, r3
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff fe80 	bl	8001b7a <u8g2_font_decode_get_unsigned_bits>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b25a      	sxtb	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001e88:	4619      	mov	r1, r3
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f7ff fe75 	bl	8001b7a <u8g2_font_decode_get_unsigned_bits>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b25a      	sxtb	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	7b9b      	ldrb	r3, [r3, #14]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bf0c      	ite	eq
 8001eaa:	2301      	moveq	r3, #1
 8001eac:	2300      	movne	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	73da      	strb	r2, [r3, #15]
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3360      	adds	r3, #96	; 0x60
 8001ece:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001ed0:	6839      	ldr	r1, [r7, #0]
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffbc 	bl	8001e50 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001ede:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6978      	ldr	r0, [r7, #20]
 8001eea:	f7ff fe90 	bl	8001c0e <u8g2_font_decode_get_signed_bits>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001ef8:	4619      	mov	r1, r3
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff fe87 	bl	8001c0e <u8g2_font_decode_get_signed_bits>
 8001f00:	4603      	mov	r3, r0
 8001f02:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6978      	ldr	r0, [r7, #20]
 8001f0e:	f7ff fe7e 	bl	8001c0e <u8g2_font_decode_get_signed_bits>
 8001f12:	4603      	mov	r3, r0
 8001f14:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f340 80d7 	ble.w	80020d0 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	8898      	ldrh	r0, [r3, #4]
 8001f26:	7cfa      	ldrb	r2, [r7, #19]
 8001f28:	7c7b      	ldrb	r3, [r7, #17]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	425b      	negs	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	b25a      	sxtb	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	7c1b      	ldrb	r3, [r3, #16]
 8001f38:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001f3c:	f7ff fec5 	bl	8001cca <u8g2_add_vector_x>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	88d8      	ldrh	r0, [r3, #6]
 8001f4c:	7cfa      	ldrb	r2, [r7, #19]
 8001f4e:	7c7b      	ldrb	r3, [r7, #17]
 8001f50:	4413      	add	r3, r2
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	425b      	negs	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	b25a      	sxtb	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	7c1b      	ldrb	r3, [r3, #16]
 8001f5e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001f62:	f7ff fe77 	bl	8001c54 <u8g2_add_vector_y>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	889b      	ldrh	r3, [r3, #4]
 8001f72:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	88db      	ldrh	r3, [r3, #6]
 8001f78:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001f7a:	8bfb      	ldrh	r3, [r7, #30]
 8001f7c:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001f7e:	8b7b      	ldrh	r3, [r7, #26]
 8001f80:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	7c1b      	ldrb	r3, [r3, #16]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d85a      	bhi.n	8002040 <u8g2_font_decode_glyph+0x180>
 8001f8a:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <u8g2_font_decode_glyph+0xd0>)
 8001f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f90:	08001fa1 	.word	0x08001fa1
 8001f94:	08001fbd 	.word	0x08001fbd
 8001f98:	08001fe5 	.word	0x08001fe5
 8001f9c:	08002019 	.word	0x08002019
      {
	case 0:
	    x1 += decode->glyph_width;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	8bbb      	ldrh	r3, [r7, #28]
 8001faa:	4413      	add	r3, r2
 8001fac:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001fae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	8b3b      	ldrh	r3, [r7, #24]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	833b      	strh	r3, [r7, #24]
	    break;
 8001fba:	e041      	b.n	8002040 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001fbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	8bfa      	ldrh	r2, [r7, #30]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001fc8:	8bfb      	ldrh	r3, [r7, #30]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001fce:	8bbb      	ldrh	r3, [r7, #28]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	8b3b      	ldrh	r3, [r7, #24]
 8001fde:	4413      	add	r3, r2
 8001fe0:	833b      	strh	r3, [r7, #24]
	    break;
 8001fe2:	e02d      	b.n	8002040 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	8bfa      	ldrh	r2, [r7, #30]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ff2:	8bfb      	ldrh	r3, [r7, #30]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001ff8:	8bbb      	ldrh	r3, [r7, #28]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001ffe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002002:	b29b      	uxth	r3, r3
 8002004:	8b7a      	ldrh	r2, [r7, #26]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800200a:	8b7b      	ldrh	r3, [r7, #26]
 800200c:	3301      	adds	r3, #1
 800200e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8002010:	8b3b      	ldrh	r3, [r7, #24]
 8002012:	3301      	adds	r3, #1
 8002014:	833b      	strh	r3, [r7, #24]
	    break;	  
 8002016:	e013      	b.n	8002040 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8002018:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800201c:	b29a      	uxth	r2, r3
 800201e:	8bbb      	ldrh	r3, [r7, #28]
 8002020:	4413      	add	r3, r2
 8002022:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800202a:	b29b      	uxth	r3, r3
 800202c:	8b7a      	ldrh	r2, [r7, #26]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002032:	8b7b      	ldrh	r3, [r7, #26]
 8002034:	3301      	adds	r3, #1
 8002036:	837b      	strh	r3, [r7, #26]
	    y1++;
 8002038:	8b3b      	ldrh	r3, [r7, #24]
 800203a:	3301      	adds	r3, #1
 800203c:	833b      	strh	r3, [r7, #24]
	    break;	  
 800203e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8002040:	8bb8      	ldrh	r0, [r7, #28]
 8002042:	8b7a      	ldrh	r2, [r7, #26]
 8002044:	8bf9      	ldrh	r1, [r7, #30]
 8002046:	8b3b      	ldrh	r3, [r7, #24]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	4603      	mov	r3, r0
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fb83 	bl	8002758 <u8g2_IsIntersection>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <u8g2_font_decode_glyph+0x19e>
	return d;
 8002058:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800205c:	e03a      	b.n	80020d4 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2200      	movs	r2, #0
 8002062:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2200      	movs	r2, #0
 8002068:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002070:	4619      	mov	r1, r3
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff fd81 	bl	8001b7a <u8g2_font_decode_get_unsigned_bits>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002082:	4619      	mov	r1, r3
 8002084:	6978      	ldr	r0, [r7, #20]
 8002086:	f7ff fd78 	bl	8001b7a <u8g2_font_decode_get_unsigned_bits>
 800208a:	4603      	mov	r3, r0
 800208c:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	2200      	movs	r2, #0
 8002092:	4619      	mov	r1, r3
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fe53 	bl	8001d40 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800209a:	7bbb      	ldrb	r3, [r7, #14]
 800209c:	2201      	movs	r2, #1
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff fe4d 	bl	8001d40 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80020a6:	2101      	movs	r1, #1
 80020a8:	6978      	ldr	r0, [r7, #20]
 80020aa:	f7ff fd66 	bl	8001b7a <u8g2_font_decode_get_unsigned_bits>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ec      	bne.n	800208e <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80020ba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80020be:	429a      	cmp	r2, r3
 80020c0:	dd00      	ble.n	80020c4 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80020c2:	e7d2      	b.n	800206a <u8g2_font_decode_glyph+0x1aa>
	break;
 80020c4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	7b9a      	ldrb	r2, [r3, #14]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 80020d0:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3317      	adds	r3, #23
 80020f2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	2bff      	cmp	r3, #255	; 0xff
 80020f8:	d82a      	bhi.n	8002150 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	2b60      	cmp	r3, #96	; 0x60
 80020fe:	d907      	bls.n	8002110 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002106:	461a      	mov	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	4413      	add	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e009      	b.n	8002124 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d906      	bls.n	8002124 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800211c:	461a      	mov	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	4413      	add	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	3301      	adds	r3, #1
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d04e      	beq.n	80021cc <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	887a      	ldrh	r2, [r7, #2]
 8002136:	429a      	cmp	r2, r3
 8002138:	d102      	bne.n	8002140 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3302      	adds	r3, #2
 800213e:	e049      	b.n	80021d4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	4413      	add	r3, r2
 800214c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800214e:	e7e9      	b.n	8002124 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002156:	461a      	mov	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4413      	add	r3, r2
 800215c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002162:	2100      	movs	r1, #0
 8002164:	6938      	ldr	r0, [r7, #16]
 8002166:	f7ff fc40 	bl	80019ea <u8g2_font_get_word>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002174:	2102      	movs	r1, #2
 8002176:	6938      	ldr	r0, [r7, #16]
 8002178:	f7ff fc37 	bl	80019ea <u8g2_font_get_word>
 800217c:	4603      	mov	r3, r0
 800217e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3304      	adds	r3, #4
 8002184:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8002186:	89fa      	ldrh	r2, [r7, #14]
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	429a      	cmp	r2, r3
 800218c:	d3e9      	bcc.n	8002162 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8002194:	89fb      	ldrh	r3, [r7, #14]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3301      	adds	r3, #1
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	89fb      	ldrh	r3, [r7, #14]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80021a8:	89fb      	ldrh	r3, [r7, #14]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80021ae:	89fa      	ldrh	r2, [r7, #14]
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d102      	bne.n	80021bc <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3303      	adds	r3, #3
 80021ba:	e00b      	b.n	80021d4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	3302      	adds	r3, #2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4413      	add	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80021ca:	e7e0      	b.n	800218e <u8g2_font_get_glyph_data+0xb2>
	break;
 80021cc:	bf00      	nop
 80021ce:	e000      	b.n	80021d2 <u8g2_font_get_glyph_data+0xf6>
	break;
 80021d0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	4608      	mov	r0, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	817b      	strh	r3, [r7, #10]
 80021ee:	460b      	mov	r3, r1
 80021f0:	813b      	strh	r3, [r7, #8]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	897a      	ldrh	r2, [r7, #10]
 80021fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	893a      	ldrh	r2, [r7, #8]
 8002206:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	4619      	mov	r1, r3
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f7ff ff64 	bl	80020dc <u8g2_font_get_glyph_data>
 8002214:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800221c:	6939      	ldr	r1, [r7, #16]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7ff fe4e 	bl	8001ec0 <u8g2_font_decode_glyph>
 8002224:	4603      	mov	r3, r0
 8002226:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8002228:	8afb      	ldrh	r3, [r7, #22]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	4608      	mov	r0, r1
 800223e:	4611      	mov	r1, r2
 8002240:	461a      	mov	r2, r3
 8002242:	4603      	mov	r3, r0
 8002244:	817b      	strh	r3, [r7, #10]
 8002246:	460b      	mov	r3, r1
 8002248:	813b      	strh	r3, [r7, #8]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002254:	2b03      	cmp	r3, #3
 8002256:	d833      	bhi.n	80022c0 <u8g2_DrawGlyph+0x8c>
 8002258:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <u8g2_DrawGlyph+0x2c>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002271 	.word	0x08002271
 8002264:	08002285 	.word	0x08002285
 8002268:	08002299 	.word	0x08002299
 800226c:	080022ad 	.word	0x080022ad
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	4798      	blx	r3
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	893b      	ldrh	r3, [r7, #8]
 800227e:	4413      	add	r3, r2
 8002280:	813b      	strh	r3, [r7, #8]
      break;
 8002282:	e01d      	b.n	80022c0 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	4798      	blx	r3
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	897b      	ldrh	r3, [r7, #10]
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	817b      	strh	r3, [r7, #10]
      break;
 8002296:	e013      	b.n	80022c0 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	4798      	blx	r3
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	893b      	ldrh	r3, [r7, #8]
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	813b      	strh	r3, [r7, #8]
      break;
 80022aa:	e009      	b.n	80022c0 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	4798      	blx	r3
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	897b      	ldrh	r3, [r7, #10]
 80022ba:	4413      	add	r3, r2
 80022bc:	817b      	strh	r3, [r7, #10]
      break;
 80022be:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	893a      	ldrh	r2, [r7, #8]
 80022c4:	8979      	ldrh	r1, [r7, #10]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7ff ff88 	bl	80021dc <u8g2_font_draw_glyph>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop

080022d8 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	817b      	strh	r3, [r7, #10]
 80022e6:	4613      	mov	r3, r2
 80022e8:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fc9d 	bl	8002c2a <u8x8_utf8_init>
  sum = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	7812      	ldrb	r2, [r2, #0]
 80022fc:	4611      	mov	r1, r2
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	4798      	blx	r3
 8002302:	4603      	mov	r3, r0
 8002304:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8002306:	8abb      	ldrh	r3, [r7, #20]
 8002308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800230c:	4293      	cmp	r3, r2
 800230e:	d038      	beq.n	8002382 <u8g2_draw_string+0xaa>
      break;
    str++;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3301      	adds	r3, #1
 8002314:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8002316:	8abb      	ldrh	r3, [r7, #20]
 8002318:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800231c:	4293      	cmp	r3, r2
 800231e:	d0e9      	beq.n	80022f4 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002320:	8abb      	ldrh	r3, [r7, #20]
 8002322:	893a      	ldrh	r2, [r7, #8]
 8002324:	8979      	ldrh	r1, [r7, #10]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f7ff ff84 	bl	8002234 <u8g2_DrawGlyph>
 800232c:	4603      	mov	r3, r0
 800232e:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002336:	2b03      	cmp	r3, #3
 8002338:	d81e      	bhi.n	8002378 <u8g2_draw_string+0xa0>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <u8g2_draw_string+0x68>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002351 	.word	0x08002351
 8002344:	0800235b 	.word	0x0800235b
 8002348:	08002365 	.word	0x08002365
 800234c:	0800236f 	.word	0x0800236f
      {
	case 0:
	  x += delta;
 8002350:	897a      	ldrh	r2, [r7, #10]
 8002352:	8a7b      	ldrh	r3, [r7, #18]
 8002354:	4413      	add	r3, r2
 8002356:	817b      	strh	r3, [r7, #10]
	  break;
 8002358:	e00e      	b.n	8002378 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800235a:	893a      	ldrh	r2, [r7, #8]
 800235c:	8a7b      	ldrh	r3, [r7, #18]
 800235e:	4413      	add	r3, r2
 8002360:	813b      	strh	r3, [r7, #8]
	  break;
 8002362:	e009      	b.n	8002378 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002364:	897a      	ldrh	r2, [r7, #10]
 8002366:	8a7b      	ldrh	r3, [r7, #18]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	817b      	strh	r3, [r7, #10]
	  break;
 800236c:	e004      	b.n	8002378 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800236e:	893a      	ldrh	r2, [r7, #8]
 8002370:	8a7b      	ldrh	r3, [r7, #18]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	813b      	strh	r3, [r7, #8]
	  break;
 8002376:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8002378:	8afa      	ldrh	r2, [r7, #22]
 800237a:	8a7b      	ldrh	r3, [r7, #18]
 800237c:	4413      	add	r3, r2
 800237e:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002380:	e7b8      	b.n	80022f4 <u8g2_draw_string+0x1c>
      break;
 8002382:	bf00      	nop
    }
  }
  return sum;
 8002384:	8afb      	ldrh	r3, [r7, #22]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop

08002390 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	817b      	strh	r3, [r7, #10]
 800239e:	4613      	mov	r3, r2
 80023a0:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <u8g2_DrawStr+0x30>)
 80023a6:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80023a8:	893a      	ldrh	r2, [r7, #8]
 80023aa:	8979      	ldrh	r1, [r7, #10]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f7ff ff92 	bl	80022d8 <u8g2_draw_string>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	08002c45 	.word	0x08002c45

080023c4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d05d      	beq.n	8002490 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d04d      	beq.n	8002492 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d11c      	bne.n	800243a <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 800240c:	429a      	cmp	r2, r3
 800240e:	da05      	bge.n	800241c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8002428:	429a      	cmp	r2, r3
 800242a:	dd32      	ble.n	8002492 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002438:	e02b      	b.n	8002492 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002440:	461a      	mov	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002448:	4619      	mov	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002450:	440b      	add	r3, r1
 8002452:	429a      	cmp	r2, r3
 8002454:	da0d      	bge.n	8002472 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800245c:	b2da      	uxtb	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002464:	b2db      	uxtb	r3, r3
 8002466:	4413      	add	r3, r2
 8002468:	b2db      	uxtb	r3, r3
 800246a:	b25a      	sxtb	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800247e:	429a      	cmp	r2, r3
 8002480:	dd07      	ble.n	8002492 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800248e:	e000      	b.n	8002492 <u8g2_UpdateRefHeight+0xce>
    return;
 8002490:	bf00      	nop
  }  
}
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  return 0;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
	...

080024b0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <u8g2_SetFontPosBaseline+0x18>)
 80024bc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	0800249b 	.word	0x0800249b

080024cc <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d00b      	beq.n	80024f8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3374      	adds	r3, #116	; 0x74
 80024ea:	6839      	ldr	r1, [r7, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fa9b 	bl	8001a28 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ff66 	bl	80023c4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	4611      	mov	r1, r2
 800250c:	461a      	mov	r2, r3
 800250e:	460b      	mov	r3, r1
 8002510:	80fb      	strh	r3, [r7, #6]
 8002512:	4613      	mov	r3, r2
 8002514:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 800251c:	8afb      	ldrh	r3, [r7, #22]
 800251e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	881a      	ldrh	r2, [r3, #0]
 8002524:	8abb      	ldrh	r3, [r7, #20]
 8002526:	4413      	add	r3, r2
 8002528:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800252a:	8afa      	ldrh	r2, [r7, #22]
 800252c:	8abb      	ldrh	r3, [r7, #20]
 800252e:	429a      	cmp	r2, r3
 8002530:	d90b      	bls.n	800254a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002532:	8afa      	ldrh	r2, [r7, #22]
 8002534:	88bb      	ldrh	r3, [r7, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	d205      	bcs.n	8002546 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800253a:	88bb      	ldrh	r3, [r7, #4]
 800253c:	82bb      	strh	r3, [r7, #20]
      b--;
 800253e:	8abb      	ldrh	r3, [r7, #20]
 8002540:	3b01      	subs	r3, #1
 8002542:	82bb      	strh	r3, [r7, #20]
 8002544:	e001      	b.n	800254a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800254a:	8afa      	ldrh	r2, [r7, #22]
 800254c:	88bb      	ldrh	r3, [r7, #4]
 800254e:	429a      	cmp	r2, r3
 8002550:	d301      	bcc.n	8002556 <u8g2_clip_intersection2+0x56>
    return 0;
 8002552:	2300      	movs	r3, #0
 8002554:	e01c      	b.n	8002590 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002556:	8aba      	ldrh	r2, [r7, #20]
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	429a      	cmp	r2, r3
 800255c:	d801      	bhi.n	8002562 <u8g2_clip_intersection2+0x62>
    return 0;
 800255e:	2300      	movs	r3, #0
 8002560:	e016      	b.n	8002590 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002562:	8afa      	ldrh	r2, [r7, #22]
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	429a      	cmp	r2, r3
 8002568:	d201      	bcs.n	800256e <u8g2_clip_intersection2+0x6e>
    a = c;
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800256e:	8aba      	ldrh	r2, [r7, #20]
 8002570:	88bb      	ldrh	r3, [r7, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	d901      	bls.n	800257a <u8g2_clip_intersection2+0x7a>
    b = d;
 8002576:	88bb      	ldrh	r3, [r7, #4]
 8002578:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8afa      	ldrh	r2, [r7, #22]
 800257e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002580:	8aba      	ldrh	r2, [r7, #20]
 8002582:	8afb      	ldrh	r3, [r7, #22]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	8aba      	ldrh	r2, [r7, #20]
 800258c:	801a      	strh	r2, [r3, #0]
  return 1;
 800258e:	2301      	movs	r3, #1
}
 8002590:	4618      	mov	r0, r3
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800259a:	b590      	push	{r4, r7, lr}
 800259c:	b087      	sub	sp, #28
 800259e:	af02      	add	r7, sp, #8
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	4608      	mov	r0, r1
 80025a4:	4611      	mov	r1, r2
 80025a6:	461a      	mov	r2, r3
 80025a8:	4603      	mov	r3, r0
 80025aa:	817b      	strh	r3, [r7, #10]
 80025ac:	460b      	mov	r3, r1
 80025ae:	813b      	strh	r3, [r7, #8]
 80025b0:	4613      	mov	r3, r2
 80025b2:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b8:	893a      	ldrh	r2, [r7, #8]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80025c2:	88f8      	ldrh	r0, [r7, #6]
 80025c4:	893a      	ldrh	r2, [r7, #8]
 80025c6:	8979      	ldrh	r1, [r7, #10]
 80025c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	4603      	mov	r3, r0
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	47a0      	blx	r4
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}

080025dc <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b087      	sub	sp, #28
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	4608      	mov	r0, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	817b      	strh	r3, [r7, #10]
 80025ee:	460b      	mov	r3, r1
 80025f0:	813b      	strh	r3, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d075      	beq.n	80026ec <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d072      	beq.n	80026ec <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d91a      	bls.n	8002642 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 800260c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d109      	bne.n	8002628 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002614:	897a      	ldrh	r2, [r7, #10]
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	b29b      	uxth	r3, r3
 800261c:	817b      	strh	r3, [r7, #10]
	  x++;
 800261e:	897b      	ldrh	r3, [r7, #10]
 8002620:	3301      	adds	r3, #1
 8002622:	b29b      	uxth	r3, r3
 8002624:	817b      	strh	r3, [r7, #10]
 8002626:	e00c      	b.n	8002642 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002628:	f897 3020 	ldrb.w	r3, [r7, #32]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d108      	bne.n	8002642 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002630:	893a      	ldrh	r2, [r7, #8]
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	b29b      	uxth	r3, r3
 8002638:	813b      	strh	r3, [r7, #8]
	  y++;
 800263a:	893b      	ldrh	r3, [r7, #8]
 800263c:	3301      	adds	r3, #1
 800263e:	b29b      	uxth	r3, r3
 8002640:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002642:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800264e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d11a      	bne.n	800268c <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800265c:	893b      	ldrh	r3, [r7, #8]
 800265e:	429a      	cmp	r2, r3
 8002660:	d83b      	bhi.n	80026da <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002668:	893b      	ldrh	r3, [r7, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	d937      	bls.n	80026de <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800267a:	1db9      	adds	r1, r7, #6
 800267c:	f107 000a 	add.w	r0, r7, #10
 8002680:	f7ff ff3e 	bl	8002500 <u8g2_clip_intersection2>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d11a      	bne.n	80026c0 <u8g2_DrawHVLine+0xe4>
	  return;
 800268a:	e02f      	b.n	80026ec <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	429a      	cmp	r2, r3
 8002696:	d824      	bhi.n	80026e2 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d920      	bls.n	80026e6 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80026b0:	1db9      	adds	r1, r7, #6
 80026b2:	f107 0008 	add.w	r0, r7, #8
 80026b6:	f7ff ff23 	bl	8002500 <u8g2_clip_intersection2>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d014      	beq.n	80026ea <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	689c      	ldr	r4, [r3, #8]
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	893a      	ldrh	r2, [r7, #8]
 80026ca:	88f8      	ldrh	r0, [r7, #6]
 80026cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	4603      	mov	r3, r0
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	47a0      	blx	r4
 80026d8:	e008      	b.n	80026ec <u8g2_DrawHVLine+0x110>
	  return;
 80026da:	bf00      	nop
 80026dc:	e006      	b.n	80026ec <u8g2_DrawHVLine+0x110>
	  return;
 80026de:	bf00      	nop
 80026e0:	e004      	b.n	80026ec <u8g2_DrawHVLine+0x110>
	  return;
 80026e2:	bf00      	nop
 80026e4:	e002      	b.n	80026ec <u8g2_DrawHVLine+0x110>
	  return;
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <u8g2_DrawHVLine+0x110>
	  return;
 80026ea:	bf00      	nop
    }
}
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd90      	pop	{r4, r7, pc}

080026f2 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80026f2:	b490      	push	{r4, r7}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4604      	mov	r4, r0
 80026fa:	4608      	mov	r0, r1
 80026fc:	4611      	mov	r1, r2
 80026fe:	461a      	mov	r2, r3
 8002700:	4623      	mov	r3, r4
 8002702:	80fb      	strh	r3, [r7, #6]
 8002704:	4603      	mov	r3, r0
 8002706:	80bb      	strh	r3, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002710:	887a      	ldrh	r2, [r7, #2]
 8002712:	88bb      	ldrh	r3, [r7, #4]
 8002714:	429a      	cmp	r2, r3
 8002716:	d20d      	bcs.n	8002734 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002718:	883a      	ldrh	r2, [r7, #0]
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	429a      	cmp	r2, r3
 800271e:	d901      	bls.n	8002724 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002720:	2301      	movs	r3, #1
 8002722:	e014      	b.n	800274e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002724:	887a      	ldrh	r2, [r7, #2]
 8002726:	883b      	ldrh	r3, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d901      	bls.n	8002730 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800272c:	2301      	movs	r3, #1
 800272e:	e00e      	b.n	800274e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002730:	2300      	movs	r3, #0
 8002732:	e00c      	b.n	800274e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002734:	883a      	ldrh	r2, [r7, #0]
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	429a      	cmp	r2, r3
 800273a:	d907      	bls.n	800274c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800273c:	887a      	ldrh	r2, [r7, #2]
 800273e:	883b      	ldrh	r3, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d901      	bls.n	8002748 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002744:	2301      	movs	r3, #1
 8002746:	e002      	b.n	800274e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002748:	2300      	movs	r3, #0
 800274a:	e000      	b.n	800274e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800274c:	2300      	movs	r3, #0
    }
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bc90      	pop	{r4, r7}
 8002756:	4770      	bx	lr

08002758 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	461a      	mov	r2, r3
 8002766:	4603      	mov	r3, r0
 8002768:	817b      	strh	r3, [r7, #10]
 800276a:	460b      	mov	r3, r1
 800276c:	813b      	strh	r3, [r7, #8]
 800276e:	4613      	mov	r3, r2
 8002770:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800277e:	8b3b      	ldrh	r3, [r7, #24]
 8002780:	893a      	ldrh	r2, [r7, #8]
 8002782:	f7ff ffb6 	bl	80026f2 <u8g2_is_intersection_decision_tree>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <u8g2_IsIntersection+0x38>
    return 0; 
 800278c:	2300      	movs	r3, #0
 800278e:	e00a      	b.n	80027a6 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	897a      	ldrh	r2, [r7, #10]
 80027a0:	f7ff ffa7 	bl	80026f2 <u8g2_is_intersection_decision_tree>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b089      	sub	sp, #36	; 0x24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	4608      	mov	r0, r1
 80027b8:	4611      	mov	r1, r2
 80027ba:	461a      	mov	r2, r3
 80027bc:	4603      	mov	r3, r0
 80027be:	817b      	strh	r3, [r7, #10]
 80027c0:	460b      	mov	r3, r1
 80027c2:	813b      	strh	r3, [r7, #8]
 80027c4:	4613      	mov	r3, r2
 80027c6:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80027c8:	893b      	ldrh	r3, [r7, #8]
 80027ca:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80027cc:	7efb      	ldrb	r3, [r7, #27]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80027d4:	2301      	movs	r3, #1
 80027d6:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80027d8:	7e3a      	ldrb	r2, [r7, #24]
 80027da:	7efb      	ldrb	r3, [r7, #27]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d801      	bhi.n	80027f8 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80027f4:	7e3b      	ldrb	r3, [r7, #24]
 80027f6:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d001      	beq.n	8002806 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002802:	7e3b      	ldrb	r3, [r7, #24]
 8002804:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002806:	893b      	ldrh	r3, [r7, #8]
 8002808:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800280a:	8afb      	ldrh	r3, [r7, #22]
 800280c:	f023 0307 	bic.w	r3, r3, #7
 8002810:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	7c1b      	ldrb	r3, [r3, #16]
 8002818:	b29b      	uxth	r3, r3
 800281a:	8afa      	ldrh	r2, [r7, #22]
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002828:	8afb      	ldrh	r3, [r7, #22]
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	4413      	add	r3, r2
 800282e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002830:	897b      	ldrh	r3, [r7, #10]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	4413      	add	r3, r2
 8002836:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002838:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d117      	bne.n	8002870 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	7ebb      	ldrb	r3, [r7, #26]
 8002846:	4313      	orrs	r3, r2
 8002848:	b2da      	uxtb	r2, r3
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	7e7b      	ldrb	r3, [r7, #25]
 8002854:	4053      	eors	r3, r2
 8002856:	b2da      	uxtb	r2, r3
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	701a      	strb	r2, [r3, #0]
	ptr++;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	3301      	adds	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
	len--;
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	3b01      	subs	r3, #1
 8002866:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1e8      	bne.n	8002840 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800286e:	e038      	b.n	80028e2 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	781a      	ldrb	r2, [r3, #0]
 8002874:	7ebb      	ldrb	r3, [r7, #26]
 8002876:	4313      	orrs	r3, r2
 8002878:	b2da      	uxtb	r2, r3
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	7e7b      	ldrb	r3, [r7, #25]
 8002884:	4053      	eors	r3, r2
 8002886:	b2da      	uxtb	r2, r3
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800288c:	7efb      	ldrb	r3, [r7, #27]
 800288e:	3301      	adds	r3, #1
 8002890:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002892:	7efb      	ldrb	r3, [r7, #27]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	76fb      	strb	r3, [r7, #27]
      len--;
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	3b01      	subs	r3, #1
 800289e:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80028a0:	7efb      	ldrb	r3, [r7, #27]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d114      	bne.n	80028d0 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80028aa:	461a      	mov	r2, r3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d801      	bhi.n	80028c0 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80028bc:	2301      	movs	r3, #1
 80028be:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d008      	beq.n	80028dc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	767b      	strb	r3, [r7, #25]
 80028ce:	e005      	b.n	80028dc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80028d0:	7ebb      	ldrb	r3, [r7, #26]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80028d6:	7e7b      	ldrb	r3, [r7, #25]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1c6      	bne.n	8002870 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80028e2:	bf00      	nop
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800290a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002914:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	4613      	mov	r3, r2
 8002938:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	79fa      	ldrb	r2, [r7, #7]
 8002950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff ffad 	bl	80028ec <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f7ff fd8c 	bl	80024b0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029bc:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80029be:	89fb      	ldrh	r3, [r7, #14]
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	89fa      	ldrh	r2, [r7, #14]
 80029c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	7c1b      	ldrb	r3, [r3, #16]
 80029ce:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80029d0:	89fb      	ldrh	r3, [r7, #14]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	89fa      	ldrh	r2, [r7, #14]
 80029da:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029e2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80029e4:	89fb      	ldrh	r3, [r7, #14]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	89fa      	ldrh	r2, [r7, #14]
 80029ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029f6:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80029f8:	89fb      	ldrh	r3, [r7, #14]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002a00:	4413      	add	r3, r2
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	7c52      	ldrb	r2, [r2, #17]
 8002a06:	4293      	cmp	r3, r2
 8002a08:	dd08      	ble.n	8002a1c <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	7c5b      	ldrb	r3, [r3, #17]
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002a1c:	89fb      	ldrh	r3, [r7, #14]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	4413      	add	r3, r2
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	8a9a      	ldrh	r2, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	8ada      	ldrh	r2, [r3, #22]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff fe63 	bl	8002758 <u8g2_IsIntersection>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002aa0:	e03b      	b.n	8002b1a <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d205      	bcs.n	8002ac6 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d905      	bls.n	8002ae2 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d205      	bcs.n	8002afe <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d905      	bls.n	8002b1a <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ff3c 	bl	80029a8 <u8g2_update_dimension_common>
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d30a      	bcc.n	8002b82 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ff65 	bl	8002a68 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b088      	sub	sp, #32
 8002baa:	af02      	add	r7, sp, #8
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	4608      	mov	r0, r1
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	817b      	strh	r3, [r7, #10]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	813b      	strh	r3, [r7, #8]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bc6:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8002bc8:	8aba      	ldrh	r2, [r7, #20]
 8002bca:	893b      	ldrh	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd6:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8002bd8:	8afa      	ldrh	r2, [r7, #22]
 8002bda:	897b      	ldrh	r3, [r7, #10]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8002be0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d107      	bne.n	8002bf8 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8002be8:	8abb      	ldrh	r3, [r7, #20]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8002bee:	8afa      	ldrh	r2, [r7, #22]
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	82fb      	strh	r3, [r7, #22]
 8002bf6:	e00a      	b.n	8002c0e <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8002bf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d106      	bne.n	8002c0e <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8002c00:	8afb      	ldrh	r3, [r7, #22]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8002c06:	8aba      	ldrh	r2, [r7, #20]
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002c0e:	88f8      	ldrh	r0, [r7, #6]
 8002c10:	8aba      	ldrh	r2, [r7, #20]
 8002c12:	8af9      	ldrh	r1, [r7, #22]
 8002c14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff fcbc 	bl	800259a <u8g2_draw_hv_line_2dir>
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <u8x8_ascii_next+0x18>
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	2b0a      	cmp	r3, #10
 8002c5a:	d102      	bne.n	8002c62 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c60:	e001      	b.n	8002c66 <u8x8_ascii_next+0x22>
  return b;
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	b29b      	uxth	r3, r3
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691c      	ldr	r4, [r3, #16]
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	2300      	movs	r3, #0
 8002c84:	2120      	movs	r1, #32
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	47a0      	blx	r4
 8002c8a:	4603      	mov	r3, r0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd90      	pop	{r4, r7, pc}

08002c94 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691c      	ldr	r4, [r3, #16]
 8002ca6:	7afa      	ldrb	r2, [r7, #11]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2117      	movs	r1, #23
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	47a0      	blx	r4
 8002cb0:	4603      	mov	r3, r0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd90      	pop	{r4, r7, pc}

08002cba <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002cc6:	1cfb      	adds	r3, r7, #3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2101      	movs	r1, #1
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ffe1 	bl	8002c94 <u8x8_byte_SendBytes>
 8002cd2:	4603      	mov	r3, r0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68dc      	ldr	r4, [r3, #12]
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2115      	movs	r1, #21
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	47a0      	blx	r4
 8002cf6:	4603      	mov	r3, r0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd90      	pop	{r4, r7, pc}

08002d00 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68dc      	ldr	r4, [r3, #12]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	2300      	movs	r3, #0
 8002d14:	2116      	movs	r1, #22
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	47a0      	blx	r4
 8002d1a:	4603      	mov	r3, r0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd90      	pop	{r4, r7, pc}

08002d24 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	68dc      	ldr	r4, [r3, #12]
 8002d36:	7afa      	ldrb	r2, [r7, #11]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2117      	movs	r1, #23
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	47a0      	blx	r4
 8002d40:	4603      	mov	r3, r0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd90      	pop	{r4, r7, pc}

08002d4a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002d4a:	b590      	push	{r4, r7, lr}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68dc      	ldr	r4, [r3, #12]
 8002d56:	2300      	movs	r3, #0
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2118      	movs	r1, #24
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	47a0      	blx	r4
 8002d60:	4603      	mov	r3, r0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd90      	pop	{r4, r7, pc}

08002d6a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002d6a:	b590      	push	{r4, r7, lr}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68dc      	ldr	r4, [r3, #12]
 8002d76:	2300      	movs	r3, #0
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2119      	movs	r1, #25
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	47a0      	blx	r4
 8002d80:	4603      	mov	r3, r0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}

08002d8a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002d8a:	b590      	push	{r4, r7, lr}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	73fb      	strb	r3, [r7, #15]
    data++;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	2bfe      	cmp	r3, #254	; 0xfe
 8002da4:	d031      	beq.n	8002e0a <u8x8_cad_SendSequence+0x80>
 8002da6:	2bfe      	cmp	r3, #254	; 0xfe
 8002da8:	dc3d      	bgt.n	8002e26 <u8x8_cad_SendSequence+0x9c>
 8002daa:	2b19      	cmp	r3, #25
 8002dac:	dc3b      	bgt.n	8002e26 <u8x8_cad_SendSequence+0x9c>
 8002dae:	2b18      	cmp	r3, #24
 8002db0:	da23      	bge.n	8002dfa <u8x8_cad_SendSequence+0x70>
 8002db2:	2b16      	cmp	r3, #22
 8002db4:	dc02      	bgt.n	8002dbc <u8x8_cad_SendSequence+0x32>
 8002db6:	2b15      	cmp	r3, #21
 8002db8:	da03      	bge.n	8002dc2 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002dba:	e034      	b.n	8002e26 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002dbc:	2b17      	cmp	r3, #23
 8002dbe:	d00e      	beq.n	8002dde <u8x8_cad_SendSequence+0x54>
	return;
 8002dc0:	e031      	b.n	8002e26 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68dc      	ldr	r4, [r3, #12]
 8002dcc:	7bba      	ldrb	r2, [r7, #14]
 8002dce:	7bf9      	ldrb	r1, [r7, #15]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	47a0      	blx	r4
	  data++;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	603b      	str	r3, [r7, #0]
	  break;
 8002ddc:	e022      	b.n	8002e24 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002de4:	f107 030e 	add.w	r3, r7, #14
 8002de8:	461a      	mov	r2, r3
 8002dea:	2101      	movs	r1, #1
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff99 	bl	8002d24 <u8x8_cad_SendData>
	  data++;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	603b      	str	r3, [r7, #0]
	  break;
 8002df8:	e014      	b.n	8002e24 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68dc      	ldr	r4, [r3, #12]
 8002dfe:	7bf9      	ldrb	r1, [r7, #15]
 8002e00:	2300      	movs	r3, #0
 8002e02:	2200      	movs	r2, #0
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	47a0      	blx	r4
	  break;
 8002e08:	e00c      	b.n	8002e24 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002e10:	7bbb      	ldrb	r3, [r7, #14]
 8002e12:	461a      	mov	r2, r3
 8002e14:	2129      	movs	r1, #41	; 0x29
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f9ed 	bl	80031f6 <u8x8_gpio_call>
	  data++;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	603b      	str	r3, [r7, #0]
	  break;
 8002e22:	bf00      	nop
    cmd = *data;
 8002e24:	e7b6      	b.n	8002d94 <u8x8_cad_SendSequence+0xa>
	return;
 8002e26:	bf00      	nop
    }
  }
}
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd90      	pop	{r4, r7, pc}
	...

08002e30 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e30:	b590      	push	{r4, r7, lr}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	72fb      	strb	r3, [r7, #11]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002e42:	7afb      	ldrb	r3, [r7, #11]
 8002e44:	3b14      	subs	r3, #20
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d82f      	bhi.n	8002eaa <u8x8_cad_001+0x7a>
 8002e4a:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <u8x8_cad_001+0x20>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e99 	.word	0x08002e99
 8002e54:	08002e69 	.word	0x08002e69
 8002e58:	08002e7d 	.word	0x08002e7d
 8002e5c:	08002e91 	.word	0x08002e91
 8002e60:	08002e99 	.word	0x08002e99
 8002e64:	08002e99 	.word	0x08002e99
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002e68:	2100      	movs	r1, #0
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff ff00 	bl	8002c70 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e70:	7abb      	ldrb	r3, [r7, #10]
 8002e72:	4619      	mov	r1, r3
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff ff20 	bl	8002cba <u8x8_byte_SendByte>
      break;
 8002e7a:	e018      	b.n	8002eae <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f7ff fef6 	bl	8002c70 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e84:	7abb      	ldrb	r3, [r7, #10]
 8002e86:	4619      	mov	r1, r3
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff ff16 	bl	8002cba <u8x8_byte_SendByte>
      break;
 8002e8e:	e00e      	b.n	8002eae <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002e90:	2101      	movs	r1, #1
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff feec 	bl	8002c70 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	691c      	ldr	r4, [r3, #16]
 8002e9c:	7aba      	ldrb	r2, [r7, #10]
 8002e9e:	7af9      	ldrb	r1, [r7, #11]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	47a0      	blx	r4
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	e002      	b.n	8002eb0 <u8x8_cad_001+0x80>
    default:
      return 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <u8x8_cad_001+0x80>
  }
  return 1;
 8002eae:	2301      	movs	r3, #1
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd90      	pop	{r4, r7, pc}

08002eb8 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	607b      	str	r3, [r7, #4]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	72fb      	strb	r3, [r7, #11]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002eca:	7afb      	ldrb	r3, [r7, #11]
 8002ecc:	2b0f      	cmp	r3, #15
 8002ece:	d006      	beq.n	8002ede <u8x8_d_st7565_common+0x26>
 8002ed0:	2b0f      	cmp	r3, #15
 8002ed2:	dc71      	bgt.n	8002fb8 <u8x8_d_st7565_common+0x100>
 8002ed4:	2b0b      	cmp	r3, #11
 8002ed6:	d050      	beq.n	8002f7a <u8x8_d_st7565_common+0xc2>
 8002ed8:	2b0e      	cmp	r3, #14
 8002eda:	d05b      	beq.n	8002f94 <u8x8_d_st7565_common+0xdc>
 8002edc:	e06c      	b.n	8002fb8 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff ff33 	bl	8002d4a <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	795b      	ldrb	r3, [r3, #5]
 8002ee8:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8002eea:	7dbb      	ldrb	r3, [r7, #22]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002ef6:	7dbb      	ldrb	r3, [r7, #22]
 8002ef8:	4413      	add	r3, r2
 8002efa:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002efc:	7dbb      	ldrb	r3, [r7, #22]
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f043 0310 	orr.w	r3, r3, #16
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	4619      	mov	r1, r3
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f7ff fee6 	bl	8002cdc <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002f10:	7dbb      	ldrb	r3, [r7, #22]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	4619      	mov	r1, r3
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff fede 	bl	8002cdc <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	799b      	ldrb	r3, [r3, #6]
 8002f24:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff fed5 	bl	8002cdc <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	791b      	ldrb	r3, [r3, #4]
 8002f36:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8002f44:	7dfa      	ldrb	r2, [r7, #23]
 8002f46:	7dbb      	ldrb	r3, [r7, #22]
 8002f48:	4413      	add	r3, r2
 8002f4a:	2b84      	cmp	r3, #132	; 0x84
 8002f4c:	d905      	bls.n	8002f5a <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 8002f4e:	2384      	movs	r3, #132	; 0x84
 8002f50:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8002f52:	7dfa      	ldrb	r2, [r7, #23]
 8002f54:	7dbb      	ldrb	r3, [r7, #22]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7ff fedf 	bl	8002d24 <u8x8_cad_SendData>
	arg_int--;
 8002f66:	7abb      	ldrb	r3, [r7, #10]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002f6c:	7abb      	ldrb	r3, [r7, #10]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f3      	bne.n	8002f5a <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f7ff fef9 	bl	8002d6a <u8x8_cad_EndTransfer>
      break;
 8002f78:	e020      	b.n	8002fbc <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002f7a:	7abb      	ldrb	r3, [r7, #10]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d104      	bne.n	8002f8a <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8002f80:	4911      	ldr	r1, [pc, #68]	; (8002fc8 <u8x8_d_st7565_common+0x110>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff ff01 	bl	8002d8a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8002f88:	e018      	b.n	8002fbc <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8002f8a:	4910      	ldr	r1, [pc, #64]	; (8002fcc <u8x8_d_st7565_common+0x114>)
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff fefc 	bl	8002d8a <u8x8_cad_SendSequence>
      break;
 8002f92:	e013      	b.n	8002fbc <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff fed8 	bl	8002d4a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002f9a:	2181      	movs	r1, #129	; 0x81
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7ff fe9d 	bl	8002cdc <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002fa2:	7abb      	ldrb	r3, [r7, #10]
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	4619      	mov	r1, r3
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff fea8 	bl	8002d00 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f7ff feda 	bl	8002d6a <u8x8_cad_EndTransfer>
      break;
 8002fb6:	e001      	b.n	8002fbc <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8002fbc:	2301      	movs	r3, #1
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	080072ec 	.word	0x080072ec
 8002fcc:	080072f4 	.word	0x080072f4

08002fd0 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	72fb      	strb	r3, [r7, #11]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8002fe2:	7aba      	ldrb	r2, [r7, #10]
 8002fe4:	7af9      	ldrb	r1, [r7, #11]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f7ff ff65 	bl	8002eb8 <u8x8_d_st7565_common>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d131      	bne.n	8003058 <u8x8_d_st7565_nhd_c12864+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8002ff4:	7afb      	ldrb	r3, [r7, #11]
 8002ff6:	2b0d      	cmp	r3, #13
 8002ff8:	d013      	beq.n	8003022 <u8x8_d_st7565_nhd_c12864+0x52>
 8002ffa:	2b0d      	cmp	r3, #13
 8002ffc:	dc2a      	bgt.n	8003054 <u8x8_d_st7565_nhd_c12864+0x84>
 8002ffe:	2b09      	cmp	r3, #9
 8003000:	d002      	beq.n	8003008 <u8x8_d_st7565_nhd_c12864+0x38>
 8003002:	2b0a      	cmp	r3, #10
 8003004:	d005      	beq.n	8003012 <u8x8_d_st7565_nhd_c12864+0x42>
 8003006:	e025      	b.n	8003054 <u8x8_d_st7565_nhd_c12864+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8003008:	4916      	ldr	r1, [pc, #88]	; (8003064 <u8x8_d_st7565_nhd_c12864+0x94>)
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f832 	bl	8003074 <u8x8_d_helper_display_setup_memory>
	break;
 8003010:	e023      	b.n	800305a <u8x8_d_st7565_nhd_c12864+0x8a>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f841 	bl	800309a <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8003018:	4913      	ldr	r1, [pc, #76]	; (8003068 <u8x8_d_st7565_nhd_c12864+0x98>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7ff feb5 	bl	8002d8a <u8x8_cad_SendSequence>
	break;
 8003020:	e01b      	b.n	800305a <u8x8_d_st7565_nhd_c12864+0x8a>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8003022:	7abb      	ldrb	r3, [r7, #10]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <u8x8_d_st7565_nhd_c12864+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8003028:	4910      	ldr	r1, [pc, #64]	; (800306c <u8x8_d_st7565_nhd_c12864+0x9c>)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f7ff fead 	bl	8002d8a <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	7c9a      	ldrb	r2, [r3, #18]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 800303c:	e00d      	b.n	800305a <u8x8_d_st7565_nhd_c12864+0x8a>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 800303e:	490c      	ldr	r1, [pc, #48]	; (8003070 <u8x8_d_st7565_nhd_c12864+0xa0>)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff fea2 	bl	8002d8a <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	7cda      	ldrb	r2, [r3, #19]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 8003052:	e002      	b.n	800305a <u8x8_d_st7565_nhd_c12864+0x8a>
      default:
	return 0;		/* msg unknown */
 8003054:	2300      	movs	r3, #0
 8003056:	e001      	b.n	800305c <u8x8_d_st7565_nhd_c12864+0x8c>
    }
  }
 8003058:	bf00      	nop
  return 1;
 800305a:	2301      	movs	r3, #1
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	0800730c 	.word	0x0800730c
 8003068:	08007324 	.word	0x08007324
 800306c:	080072fc 	.word	0x080072fc
 8003070:	08007304 	.word	0x08007304

08003074 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	7c9a      	ldrb	r2, [r3, #18]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800309a:	b590      	push	{r4, r7, lr}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695c      	ldr	r4, [r3, #20]
 80030a6:	2300      	movs	r3, #0
 80030a8:	2200      	movs	r2, #0
 80030aa:	2128      	movs	r1, #40	; 0x28
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68dc      	ldr	r4, [r3, #12]
 80030b4:	2300      	movs	r3, #0
 80030b6:	2200      	movs	r2, #0
 80030b8:	2114      	movs	r1, #20
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80030be:	2201      	movs	r2, #1
 80030c0:	214b      	movs	r1, #75	; 0x4b
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f897 	bl	80031f6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	791b      	ldrb	r3, [r3, #4]
 80030ce:	461a      	mov	r2, r3
 80030d0:	2129      	movs	r1, #41	; 0x29
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f88f 	bl	80031f6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80030d8:	2200      	movs	r2, #0
 80030da:	214b      	movs	r1, #75	; 0x4b
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f88a 	bl	80031f6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	791b      	ldrb	r3, [r3, #4]
 80030e8:	461a      	mov	r2, r3
 80030ea:	2129      	movs	r1, #41	; 0x29
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f882 	bl	80031f6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80030f2:	2201      	movs	r2, #1
 80030f4:	214b      	movs	r1, #75	; 0x4b
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f87d 	bl	80031f6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	795b      	ldrb	r3, [r3, #5]
 8003102:	461a      	mov	r2, r3
 8003104:	2129      	movs	r1, #41	; 0x29
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f875 	bl	80031f6 <u8x8_gpio_call>
}    
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bd90      	pop	{r4, r7, pc}

08003114 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4603      	mov	r3, r0
 8003124:	70fb      	strb	r3, [r7, #3]
 8003126:	460b      	mov	r3, r1
 8003128:	70bb      	strb	r3, [r7, #2]
 800312a:	4613      	mov	r3, r2
 800312c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003132:	78bb      	ldrb	r3, [r7, #2]
 8003134:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003136:	787b      	ldrb	r3, [r7, #1]
 8003138:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689c      	ldr	r4, [r3, #8]
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	2201      	movs	r2, #1
 8003148:	210f      	movs	r1, #15
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	47a0      	blx	r4
 800314e:	4603      	mov	r3, r0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bd90      	pop	{r4, r7, pc}

08003158 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689c      	ldr	r4, [r3, #8]
 8003164:	2300      	movs	r3, #0
 8003166:	2200      	movs	r2, #0
 8003168:	2109      	movs	r1, #9
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	47a0      	blx	r4
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bd90      	pop	{r4, r7, pc}

08003176 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003176:	b590      	push	{r4, r7, lr}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689c      	ldr	r4, [r3, #8]
 8003182:	2300      	movs	r3, #0
 8003184:	2200      	movs	r2, #0
 8003186:	210a      	movs	r1, #10
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	47a0      	blx	r4
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}

08003194 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689c      	ldr	r4, [r3, #8]
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	2300      	movs	r3, #0
 80031a8:	210b      	movs	r1, #11
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	47a0      	blx	r4
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}

080031b6 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 80031b6:	b590      	push	{r4, r7, lr}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689c      	ldr	r4, [r3, #8]
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	2300      	movs	r3, #0
 80031ca:	210e      	movs	r1, #14
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	47a0      	blx	r4
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd90      	pop	{r4, r7, pc}

080031d8 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689c      	ldr	r4, [r3, #8]
 80031e4:	2300      	movs	r3, #0
 80031e6:	2200      	movs	r2, #0
 80031e8:	2110      	movs	r1, #16
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	47a0      	blx	r4
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd90      	pop	{r4, r7, pc}

080031f6 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80031f6:	b590      	push	{r4, r7, lr}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	70fb      	strb	r3, [r7, #3]
 8003202:	4613      	mov	r3, r2
 8003204:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695c      	ldr	r4, [r3, #20]
 800320a:	78ba      	ldrb	r2, [r7, #2]
 800320c:	78f9      	ldrb	r1, [r7, #3]
 800320e:	2300      	movs	r3, #0
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	47a0      	blx	r4
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}

0800321c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	72fb      	strb	r3, [r7, #11]
 800322a:	4613      	mov	r3, r2
 800322c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr
	...

0800323c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a11      	ldr	r2, [pc, #68]	; (8003294 <u8x8_SetupDefaults+0x58>)
 800324e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a10      	ldr	r2, [pc, #64]	; (8003294 <u8x8_SetupDefaults+0x58>)
 8003254:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <u8x8_SetupDefaults+0x58>)
 800325a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <u8x8_SetupDefaults+0x58>)
 8003260:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	22ff      	movs	r2, #255	; 0xff
 800327c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	22ff      	movs	r2, #255	; 0xff
 8003284:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	0800321d 	.word	0x0800321d

08003298 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff ffc8 	bl	800323c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f7ff ff47 	bl	8003158 <u8x8_SetupMemory>
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af02      	add	r7, sp, #8
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 80032de:	f107 020f 	add.w	r2, r7, #15
 80032e2:	1df9      	adds	r1, r7, #7
 80032e4:	2364      	movs	r3, #100	; 0x64
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2301      	movs	r3, #1
 80032ea:	4804      	ldr	r0, [pc, #16]	; (80032fc <W25qxx_Spi+0x28>)
 80032ec:	f001 fe71 	bl	8004fd2 <HAL_SPI_TransmitReceive>
	return ret;	
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	200004a0 	.word	0x200004a0

08003300 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	2300      	movs	r3, #0
 8003310:	607b      	str	r3, [r7, #4]
 8003312:	2300      	movs	r3, #0
 8003314:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8003316:	2200      	movs	r2, #0
 8003318:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800331c:	4813      	ldr	r0, [pc, #76]	; (800336c <W25qxx_ReadID+0x6c>)
 800331e:	f000 ff55 	bl	80041cc <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8003322:	209f      	movs	r0, #159	; 0x9f
 8003324:	f7ff ffd6 	bl	80032d4 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003328:	20a5      	movs	r0, #165	; 0xa5
 800332a:	f7ff ffd3 	bl	80032d4 <W25qxx_Spi>
 800332e:	4603      	mov	r3, r0
 8003330:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003332:	20a5      	movs	r0, #165	; 0xa5
 8003334:	f7ff ffce 	bl	80032d4 <W25qxx_Spi>
 8003338:	4603      	mov	r3, r0
 800333a:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800333c:	20a5      	movs	r0, #165	; 0xa5
 800333e:	f7ff ffc9 	bl	80032d4 <W25qxx_Spi>
 8003342:	4603      	mov	r3, r0
 8003344:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8003346:	2201      	movs	r2, #1
 8003348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800334c:	4807      	ldr	r0, [pc, #28]	; (800336c <W25qxx_ReadID+0x6c>)
 800334e:	f000 ff3d 	bl	80041cc <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	041a      	lsls	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	4313      	orrs	r3, r2
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  return Temp;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40011000 	.word	0x40011000

08003370 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8003376:	2200      	movs	r2, #0
 8003378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800337c:	4816      	ldr	r0, [pc, #88]	; (80033d8 <W25qxx_ReadUniqID+0x68>)
 800337e:	f000 ff25 	bl	80041cc <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8003382:	204b      	movs	r0, #75	; 0x4b
 8003384:	f7ff ffa6 	bl	80032d4 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8003388:	2300      	movs	r3, #0
 800338a:	71fb      	strb	r3, [r7, #7]
 800338c:	e005      	b.n	800339a <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800338e:	20a5      	movs	r0, #165	; 0xa5
 8003390:	f7ff ffa0 	bl	80032d4 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	3301      	adds	r3, #1
 8003398:	71fb      	strb	r3, [r7, #7]
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d9f6      	bls.n	800338e <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	71bb      	strb	r3, [r7, #6]
 80033a4:	e00b      	b.n	80033be <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80033a6:	79bc      	ldrb	r4, [r7, #6]
 80033a8:	20a5      	movs	r0, #165	; 0xa5
 80033aa:	f7ff ff93 	bl	80032d4 <W25qxx_Spi>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <W25qxx_ReadUniqID+0x6c>)
 80033b4:	4423      	add	r3, r4
 80033b6:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 80033b8:	79bb      	ldrb	r3, [r7, #6]
 80033ba:	3301      	adds	r3, #1
 80033bc:	71bb      	strb	r3, [r7, #6]
 80033be:	79bb      	ldrb	r3, [r7, #6]
 80033c0:	2b07      	cmp	r3, #7
 80033c2:	d9f0      	bls.n	80033a6 <W25qxx_ReadUniqID+0x36>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80033c4:	2201      	movs	r2, #1
 80033c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033ca:	4803      	ldr	r0, [pc, #12]	; (80033d8 <W25qxx_ReadUniqID+0x68>)
 80033cc:	f000 fefe 	bl	80041cc <HAL_GPIO_WritePin>
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd90      	pop	{r4, r7, pc}
 80033d8:	40011000 	.word	0x40011000
 80033dc:	200019d4 	.word	0x200019d4

080033e0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80033e4:	2200      	movs	r2, #0
 80033e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033ea:	4808      	ldr	r0, [pc, #32]	; (800340c <W25qxx_WriteEnable+0x2c>)
 80033ec:	f000 feee 	bl	80041cc <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 80033f0:	2006      	movs	r0, #6
 80033f2:	f7ff ff6f 	bl	80032d4 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80033f6:	2201      	movs	r2, #1
 80033f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033fc:	4803      	ldr	r0, [pc, #12]	; (800340c <W25qxx_WriteEnable+0x2c>)
 80033fe:	f000 fee5 	bl	80041cc <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003402:	2001      	movs	r0, #1
 8003404:	f000 fb70 	bl	8003ae8 <HAL_Delay>
}
 8003408:	bf00      	nop
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40011000 	.word	0x40011000

08003410 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800341e:	2200      	movs	r2, #0
 8003420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003424:	481c      	ldr	r0, [pc, #112]	; (8003498 <W25qxx_ReadStatusRegister+0x88>)
 8003426:	f000 fed1 	bl	80041cc <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d10c      	bne.n	800344a <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8003430:	2005      	movs	r0, #5
 8003432:	f7ff ff4f 	bl	80032d4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8003436:	20a5      	movs	r0, #165	; 0xa5
 8003438:	f7ff ff4c 	bl	80032d4 <W25qxx_Spi>
 800343c:	4603      	mov	r3, r0
 800343e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003440:	4a16      	ldr	r2, [pc, #88]	; (800349c <W25qxx_ReadStatusRegister+0x8c>)
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003448:	e01b      	b.n	8003482 <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d10c      	bne.n	800346a <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8003450:	2035      	movs	r0, #53	; 0x35
 8003452:	f7ff ff3f 	bl	80032d4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8003456:	20a5      	movs	r0, #165	; 0xa5
 8003458:	f7ff ff3c 	bl	80032d4 <W25qxx_Spi>
 800345c:	4603      	mov	r3, r0
 800345e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003460:	4a0e      	ldr	r2, [pc, #56]	; (800349c <W25qxx_ReadStatusRegister+0x8c>)
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003468:	e00b      	b.n	8003482 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 800346a:	2015      	movs	r0, #21
 800346c:	f7ff ff32 	bl	80032d4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8003470:	20a5      	movs	r0, #165	; 0xa5
 8003472:	f7ff ff2f 	bl	80032d4 <W25qxx_Spi>
 8003476:	4603      	mov	r3, r0
 8003478:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800347a:	4a08      	ldr	r2, [pc, #32]	; (800349c <W25qxx_ReadStatusRegister+0x8c>)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8003482:	2201      	movs	r2, #1
 8003484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003488:	4803      	ldr	r0, [pc, #12]	; (8003498 <W25qxx_ReadStatusRegister+0x88>)
 800348a:	f000 fe9f 	bl	80041cc <HAL_GPIO_WritePin>
	return status;
 800348e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40011000 	.word	0x40011000
 800349c:	200019d4 	.word	0x200019d4

080034a0 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80034a4:	2001      	movs	r0, #1
 80034a6:	f000 fb1f 	bl	8003ae8 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80034aa:	2200      	movs	r2, #0
 80034ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034b0:	480f      	ldr	r0, [pc, #60]	; (80034f0 <W25qxx_WaitForWriteEnd+0x50>)
 80034b2:	f000 fe8b 	bl	80041cc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80034b6:	2005      	movs	r0, #5
 80034b8:	f7ff ff0c 	bl	80032d4 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80034bc:	20a5      	movs	r0, #165	; 0xa5
 80034be:	f7ff ff09 	bl	80032d4 <W25qxx_Spi>
 80034c2:	4603      	mov	r3, r0
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <W25qxx_WaitForWriteEnd+0x54>)
 80034c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80034cc:	2001      	movs	r0, #1
 80034ce:	f000 fb0b 	bl	8003ae8 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <W25qxx_WaitForWriteEnd+0x54>)
 80034d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1ed      	bne.n	80034bc <W25qxx_WaitForWriteEnd+0x1c>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80034e0:	2201      	movs	r2, #1
 80034e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034e6:	4802      	ldr	r0, [pc, #8]	; (80034f0 <W25qxx_WaitForWriteEnd+0x50>)
 80034e8:	f000 fe70 	bl	80041cc <HAL_GPIO_WritePin>
}
 80034ec:	bf00      	nop
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40011000 	.word	0x40011000
 80034f4:	200019d4 	.word	0x200019d4

080034f8 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 80034fe:	4b60      	ldr	r3, [pc, #384]	; (8003680 <W25qxx_Init+0x188>)
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8003506:	e002      	b.n	800350e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003508:	2001      	movs	r0, #1
 800350a:	f000 faed 	bl	8003ae8 <HAL_Delay>
	while(HAL_GetTick()<100)
 800350e:	f000 fae1 	bl	8003ad4 <HAL_GetTick>
 8003512:	4603      	mov	r3, r0
 8003514:	2b63      	cmp	r3, #99	; 0x63
 8003516:	d9f7      	bls.n	8003508 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8003518:	2201      	movs	r2, #1
 800351a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800351e:	4859      	ldr	r0, [pc, #356]	; (8003684 <W25qxx_Init+0x18c>)
 8003520:	f000 fe54 	bl	80041cc <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8003524:	2064      	movs	r0, #100	; 0x64
 8003526:	f000 fadf 	bl	8003ae8 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 800352a:	f7ff fee9 	bl	8003300 <W25qxx_ReadID>
 800352e:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	b29b      	uxth	r3, r3
 8003534:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003538:	3b11      	subs	r3, #17
 800353a:	2b09      	cmp	r3, #9
 800353c:	d85f      	bhi.n	80035fe <W25qxx_Init+0x106>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <W25qxx_Init+0x4c>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	080035f1 	.word	0x080035f1
 8003548:	080035e3 	.word	0x080035e3
 800354c:	080035d5 	.word	0x080035d5
 8003550:	080035c7 	.word	0x080035c7
 8003554:	080035b9 	.word	0x080035b9
 8003558:	080035ab 	.word	0x080035ab
 800355c:	0800359d 	.word	0x0800359d
 8003560:	0800358d 	.word	0x0800358d
 8003564:	0800357d 	.word	0x0800357d
 8003568:	0800356d 	.word	0x0800356d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 800356c:	4b44      	ldr	r3, [pc, #272]	; (8003680 <W25qxx_Init+0x188>)
 800356e:	220a      	movs	r2, #10
 8003570:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8003572:	4b43      	ldr	r3, [pc, #268]	; (8003680 <W25qxx_Init+0x188>)
 8003574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003578:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 800357a:	e046      	b.n	800360a <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 800357c:	4b40      	ldr	r3, [pc, #256]	; (8003680 <W25qxx_Init+0x188>)
 800357e:	2209      	movs	r2, #9
 8003580:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8003582:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <W25qxx_Init+0x188>)
 8003584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003588:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 800358a:	e03e      	b.n	800360a <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 800358c:	4b3c      	ldr	r3, [pc, #240]	; (8003680 <W25qxx_Init+0x188>)
 800358e:	2208      	movs	r2, #8
 8003590:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8003592:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <W25qxx_Init+0x188>)
 8003594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003598:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 800359a:	e036      	b.n	800360a <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 800359c:	4b38      	ldr	r3, [pc, #224]	; (8003680 <W25qxx_Init+0x188>)
 800359e:	2207      	movs	r2, #7
 80035a0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 80035a2:	4b37      	ldr	r3, [pc, #220]	; (8003680 <W25qxx_Init+0x188>)
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 80035a8:	e02f      	b.n	800360a <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 80035aa:	4b35      	ldr	r3, [pc, #212]	; (8003680 <W25qxx_Init+0x188>)
 80035ac:	2206      	movs	r2, #6
 80035ae:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 80035b0:	4b33      	ldr	r3, [pc, #204]	; (8003680 <W25qxx_Init+0x188>)
 80035b2:	2240      	movs	r2, #64	; 0x40
 80035b4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 80035b6:	e028      	b.n	800360a <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 80035b8:	4b31      	ldr	r3, [pc, #196]	; (8003680 <W25qxx_Init+0x188>)
 80035ba:	2205      	movs	r2, #5
 80035bc:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 80035be:	4b30      	ldr	r3, [pc, #192]	; (8003680 <W25qxx_Init+0x188>)
 80035c0:	2220      	movs	r2, #32
 80035c2:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 80035c4:	e021      	b.n	800360a <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 80035c6:	4b2e      	ldr	r3, [pc, #184]	; (8003680 <W25qxx_Init+0x188>)
 80035c8:	2204      	movs	r2, #4
 80035ca:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 80035cc:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <W25qxx_Init+0x188>)
 80035ce:	2210      	movs	r2, #16
 80035d0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 80035d2:	e01a      	b.n	800360a <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 80035d4:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <W25qxx_Init+0x188>)
 80035d6:	2203      	movs	r2, #3
 80035d8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 80035da:	4b29      	ldr	r3, [pc, #164]	; (8003680 <W25qxx_Init+0x188>)
 80035dc:	2208      	movs	r2, #8
 80035de:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 80035e0:	e013      	b.n	800360a <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 80035e2:	4b27      	ldr	r3, [pc, #156]	; (8003680 <W25qxx_Init+0x188>)
 80035e4:	2202      	movs	r2, #2
 80035e6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 80035e8:	4b25      	ldr	r3, [pc, #148]	; (8003680 <W25qxx_Init+0x188>)
 80035ea:	2204      	movs	r2, #4
 80035ec:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 80035ee:	e00c      	b.n	800360a <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 80035f0:	4b23      	ldr	r3, [pc, #140]	; (8003680 <W25qxx_Init+0x188>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 80035f6:	4b22      	ldr	r3, [pc, #136]	; (8003680 <W25qxx_Init+0x188>)
 80035f8:	2202      	movs	r2, #2
 80035fa:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 80035fc:	e005      	b.n	800360a <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 80035fe:	4b20      	ldr	r3, [pc, #128]	; (8003680 <W25qxx_Init+0x188>)
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8003606:	2300      	movs	r3, #0
 8003608:	e036      	b.n	8003678 <W25qxx_Init+0x180>
				
	}		
	w25qxx.PageSize=256;
 800360a:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <W25qxx_Init+0x188>)
 800360c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003610:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <W25qxx_Init+0x188>)
 8003614:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003618:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 800361a:	4b19      	ldr	r3, [pc, #100]	; (8003680 <W25qxx_Init+0x188>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	4a17      	ldr	r2, [pc, #92]	; (8003680 <W25qxx_Init+0x188>)
 8003622:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8003624:	4b16      	ldr	r3, [pc, #88]	; (8003680 <W25qxx_Init+0x188>)
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	4a15      	ldr	r2, [pc, #84]	; (8003680 <W25qxx_Init+0x188>)
 800362a:	6912      	ldr	r2, [r2, #16]
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	4a13      	ldr	r2, [pc, #76]	; (8003680 <W25qxx_Init+0x188>)
 8003632:	8952      	ldrh	r2, [r2, #10]
 8003634:	fbb3 f3f2 	udiv	r3, r3, r2
 8003638:	4a11      	ldr	r2, [pc, #68]	; (8003680 <W25qxx_Init+0x188>)
 800363a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 800363c:	4b10      	ldr	r3, [pc, #64]	; (8003680 <W25qxx_Init+0x188>)
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	4a0f      	ldr	r2, [pc, #60]	; (8003680 <W25qxx_Init+0x188>)
 8003644:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <W25qxx_Init+0x188>)
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <W25qxx_Init+0x188>)
 800364c:	6912      	ldr	r2, [r2, #16]
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	0a9b      	lsrs	r3, r3, #10
 8003654:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <W25qxx_Init+0x188>)
 8003656:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003658:	f7ff fe8a 	bl	8003370 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800365c:	2001      	movs	r0, #1
 800365e:	f7ff fed7 	bl	8003410 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003662:	2002      	movs	r0, #2
 8003664:	f7ff fed4 	bl	8003410 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003668:	2003      	movs	r0, #3
 800366a:	f7ff fed1 	bl	8003410 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <W25qxx_Init+0x188>)
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003676:	2301      	movs	r3, #1
}	
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	200019d4 	.word	0x200019d4
 8003684:	40011000 	.word	0x40011000

08003688 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock=0;	
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8003690:	e002      	b.n	8003698 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003692:	2001      	movs	r0, #1
 8003694:	f000 fa28 	bl	8003ae8 <HAL_Delay>
	while(w25qxx.Lock==1)
 8003698:	4b24      	ldr	r3, [pc, #144]	; (800372c <W25qxx_EraseSector+0xa4>)
 800369a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d0f7      	beq.n	8003692 <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;	
 80036a2:	4b22      	ldr	r3, [pc, #136]	; (800372c <W25qxx_EraseSector+0xa4>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 80036aa:	f7ff fef9 	bl	80034a0 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80036ae:	4b1f      	ldr	r3, [pc, #124]	; (800372c <W25qxx_EraseSector+0xa4>)
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 80036ba:	f7ff fe91 	bl	80033e0 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80036be:	2200      	movs	r2, #0
 80036c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036c4:	481a      	ldr	r0, [pc, #104]	; (8003730 <W25qxx_EraseSector+0xa8>)
 80036c6:	f000 fd81 	bl	80041cc <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 80036ca:	2020      	movs	r0, #32
 80036cc:	f7ff fe02 	bl	80032d4 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80036d0:	4b16      	ldr	r3, [pc, #88]	; (800372c <W25qxx_EraseSector+0xa4>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d905      	bls.n	80036e4 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0e1b      	lsrs	r3, r3, #24
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fdf8 	bl	80032d4 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	0c1b      	lsrs	r3, r3, #16
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fdf2 	bl	80032d4 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0a1b      	lsrs	r3, r3, #8
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fdec 	bl	80032d4 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff fde7 	bl	80032d4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8003706:	2201      	movs	r2, #1
 8003708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800370c:	4808      	ldr	r0, [pc, #32]	; (8003730 <W25qxx_EraseSector+0xa8>)
 800370e:	f000 fd5d 	bl	80041cc <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8003712:	f7ff fec5 	bl	80034a0 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 8003716:	2001      	movs	r0, #1
 8003718:	f000 f9e6 	bl	8003ae8 <HAL_Delay>
	w25qxx.Lock=0;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <W25qxx_EraseSector+0xa4>)
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	200019d4 	.word	0x200019d4
 8003730:	40011000 	.word	0x40011000

08003734 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <W25qxx_SectorToPage+0x24>)
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	4a04      	ldr	r2, [pc, #16]	; (8003758 <W25qxx_SectorToPage+0x24>)
 8003748:	8952      	ldrh	r2, [r2, #10]
 800374a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800374e:	4618      	mov	r0, r3
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	200019d4 	.word	0x200019d4

0800375c <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 800376a:	e002      	b.n	8003772 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800376c:	2001      	movs	r0, #1
 800376e:	f000 f9bb 	bl	8003ae8 <HAL_Delay>
	while(w25qxx.Lock==1)
 8003772:	4b38      	ldr	r3, [pc, #224]	; (8003854 <W25qxx_WritePage+0xf8>)
 8003774:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003778:	2b01      	cmp	r3, #1
 800377a:	d0f7      	beq.n	800376c <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 800377c:	4b35      	ldr	r3, [pc, #212]	; (8003854 <W25qxx_WritePage+0xf8>)
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4413      	add	r3, r2
 800378a:	4a32      	ldr	r2, [pc, #200]	; (8003854 <W25qxx_WritePage+0xf8>)
 800378c:	8952      	ldrh	r2, [r2, #10]
 800378e:	4293      	cmp	r3, r2
 8003790:	d802      	bhi.n	8003798 <W25qxx_WritePage+0x3c>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8003798:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <W25qxx_WritePage+0xf8>)
 800379a:	895b      	ldrh	r3, [r3, #10]
 800379c:	461a      	mov	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	4413      	add	r3, r2
 80037aa:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <W25qxx_WritePage+0xf8>)
 80037ac:	8952      	ldrh	r2, [r2, #10]
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d905      	bls.n	80037be <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 80037b2:	4b28      	ldr	r3, [pc, #160]	; (8003854 <W25qxx_WritePage+0xf8>)
 80037b4:	895b      	ldrh	r3, [r3, #10]
 80037b6:	461a      	mov	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 80037be:	f7ff fe6f 	bl	80034a0 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 80037c2:	f7ff fe0d 	bl	80033e0 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80037c6:	2200      	movs	r2, #0
 80037c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037cc:	4822      	ldr	r0, [pc, #136]	; (8003858 <W25qxx_WritePage+0xfc>)
 80037ce:	f000 fcfd 	bl	80041cc <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 80037d2:	2002      	movs	r0, #2
 80037d4:	f7ff fd7e 	bl	80032d4 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 80037d8:	4b1e      	ldr	r3, [pc, #120]	; (8003854 <W25qxx_WritePage+0xf8>)
 80037da:	895b      	ldrh	r3, [r3, #10]
 80037dc:	461a      	mov	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	fb03 f302 	mul.w	r3, r3, r2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4413      	add	r3, r2
 80037e8:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 80037ea:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <W25qxx_WritePage+0xf8>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d905      	bls.n	80037fe <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	0e1b      	lsrs	r3, r3, #24
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fd6b 	bl	80032d4 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	b2db      	uxtb	r3, r3
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fd65 	bl	80032d4 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fd5f 	bl	80032d4 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fd5a 	bl	80032d4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	b29a      	uxth	r2, r3
 8003824:	2364      	movs	r3, #100	; 0x64
 8003826:	68f9      	ldr	r1, [r7, #12]
 8003828:	480c      	ldr	r0, [pc, #48]	; (800385c <W25qxx_WritePage+0x100>)
 800382a:	f001 f985 	bl	8004b38 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800382e:	2201      	movs	r2, #1
 8003830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003834:	4808      	ldr	r0, [pc, #32]	; (8003858 <W25qxx_WritePage+0xfc>)
 8003836:	f000 fcc9 	bl	80041cc <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 800383a:	f7ff fe31 	bl	80034a0 <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 800383e:	2001      	movs	r0, #1
 8003840:	f000 f952 	bl	8003ae8 <HAL_Delay>
	w25qxx.Lock=0;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <W25qxx_WritePage+0xf8>)
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	200019d4 	.word	0x200019d4
 8003858:	40011000 	.word	0x40011000
 800385c:	200004a0 	.word	0x200004a0

08003860 <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 800386e:	4b2c      	ldr	r3, [pc, #176]	; (8003920 <W25qxx_WriteSector+0xc0>)
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d802      	bhi.n	800387e <W25qxx_WriteSector+0x1e>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 800387e:	4b28      	ldr	r3, [pc, #160]	; (8003920 <W25qxx_WriteSector+0xc0>)
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 8003884:	4b26      	ldr	r3, [pc, #152]	; (8003920 <W25qxx_WriteSector+0xc0>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d243      	bcs.n	8003916 <W25qxx_WriteSector+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	441a      	add	r2, r3
 8003894:	4b22      	ldr	r3, [pc, #136]	; (8003920 <W25qxx_WriteSector+0xc0>)
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	429a      	cmp	r2, r3
 800389a:	d905      	bls.n	80038a8 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 800389c:	4b20      	ldr	r3, [pc, #128]	; (8003920 <W25qxx_WriteSector+0xc0>)
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	e001      	b.n	80038ac <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 80038ac:	68b8      	ldr	r0, [r7, #8]
 80038ae:	f7ff ff41 	bl	8003734 <W25qxx_SectorToPage>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <W25qxx_WriteSector+0xc0>)
 80038b6:	895b      	ldrh	r3, [r3, #10]
 80038b8:	4619      	mov	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80038c0:	4413      	add	r3, r2
 80038c2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 80038c4:	4b16      	ldr	r3, [pc, #88]	; (8003920 <W25qxx_WriteSector+0xc0>)
 80038c6:	895b      	ldrh	r3, [r3, #10]
 80038c8:	461a      	mov	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80038d0:	fb02 f201 	mul.w	r2, r2, r1
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	69f9      	ldr	r1, [r7, #28]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f7ff ff3c 	bl	800375c <W25qxx_WritePage>
		StartPage++;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	3301      	adds	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <W25qxx_WriteSector+0xc0>)
 80038ec:	895b      	ldrh	r3, [r3, #10]
 80038ee:	461a      	mov	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	1a9a      	subs	r2, r3, r2
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	4413      	add	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <W25qxx_WriteSector+0xc0>)
 80038fc:	895b      	ldrh	r3, [r3, #10]
 80038fe:	461a      	mov	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	dce1      	bgt.n	80038d8 <W25qxx_WriteSector+0x78>
 8003914:	e000      	b.n	8003918 <W25qxx_WriteSector+0xb8>
		return;
 8003916:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	200019d4 	.word	0x200019d4

08003924 <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8003930:	e002      	b.n	8003938 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8003932:	2001      	movs	r0, #1
 8003934:	f000 f8d8 	bl	8003ae8 <HAL_Delay>
	while(w25qxx.Lock==1)
 8003938:	4b24      	ldr	r3, [pc, #144]	; (80039cc <W25qxx_ReadBytes+0xa8>)
 800393a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800393e:	2b01      	cmp	r3, #1
 8003940:	d0f7      	beq.n	8003932 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <W25qxx_ReadBytes+0xa8>)
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800394a:	2200      	movs	r2, #0
 800394c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003950:	481f      	ldr	r0, [pc, #124]	; (80039d0 <W25qxx_ReadBytes+0xac>)
 8003952:	f000 fc3b 	bl	80041cc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8003956:	200b      	movs	r0, #11
 8003958:	f7ff fcbc 	bl	80032d4 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <W25qxx_ReadBytes+0xa8>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d905      	bls.n	8003970 <W25qxx_ReadBytes+0x4c>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	0e1b      	lsrs	r3, r3, #24
 8003968:	b2db      	uxtb	r3, r3
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fcb2 	bl	80032d4 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fcac 	bl	80032d4 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	b2db      	uxtb	r3, r3
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fca6 	bl	80032d4 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fca1 	bl	80032d4 <W25qxx_Spi>
	W25qxx_Spi(0);
 8003992:	2000      	movs	r0, #0
 8003994:	f7ff fc9e 	bl	80032d4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	b29a      	uxth	r2, r3
 800399c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80039a0:	68f9      	ldr	r1, [r7, #12]
 80039a2:	480c      	ldr	r0, [pc, #48]	; (80039d4 <W25qxx_ReadBytes+0xb0>)
 80039a4:	f001 fa04 	bl	8004db0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80039a8:	2201      	movs	r2, #1
 80039aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039ae:	4808      	ldr	r0, [pc, #32]	; (80039d0 <W25qxx_ReadBytes+0xac>)
 80039b0:	f000 fc0c 	bl	80041cc <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 80039b4:	2001      	movs	r0, #1
 80039b6:	f000 f897 	bl	8003ae8 <HAL_Delay>
	w25qxx.Lock=0;
 80039ba:	4b04      	ldr	r3, [pc, #16]	; (80039cc <W25qxx_ReadBytes+0xa8>)
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	200019d4 	.word	0x200019d4
 80039d0:	40011000 	.word	0x40011000
 80039d4:	200004a0 	.word	0x200004a0

080039d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039d8:	480c      	ldr	r0, [pc, #48]	; (8003a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039da:	490d      	ldr	r1, [pc, #52]	; (8003a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039dc:	4a0d      	ldr	r2, [pc, #52]	; (8003a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039e0:	e002      	b.n	80039e8 <LoopCopyDataInit>

080039e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039e6:	3304      	adds	r3, #4

080039e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039ec:	d3f9      	bcc.n	80039e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039f0:	4c0a      	ldr	r4, [pc, #40]	; (8003a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80039f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039f4:	e001      	b.n	80039fa <LoopFillZerobss>

080039f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039f8:	3204      	adds	r2, #4

080039fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039fc:	d3fb      	bcc.n	80039f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039fe:	f7fd fe03 	bl	8001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a02:	f002 fb19 	bl	8006038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a06:	f7fc ff19 	bl	800083c <main>
  bx lr
 8003a0a:	4770      	bx	lr
  ldr r0, =_sdata
 8003a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003a14:	080073e4 	.word	0x080073e4
  ldr r2, =_sbss
 8003a18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003a1c:	20001a10 	.word	0x20001a10

08003a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a20:	e7fe      	b.n	8003a20 <ADC1_2_IRQHandler>
	...

08003a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <HAL_Init+0x28>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <HAL_Init+0x28>)
 8003a2e:	f043 0310 	orr.w	r3, r3, #16
 8003a32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a34:	2003      	movs	r0, #3
 8003a36:	f000 f947 	bl	8003cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a3a:	200f      	movs	r0, #15
 8003a3c:	f000 f808 	bl	8003a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a40:	f7fd fca0 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40022000 	.word	0x40022000

08003a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a58:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_InitTick+0x54>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_InitTick+0x58>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	4619      	mov	r1, r3
 8003a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f95f 	bl	8003d32 <HAL_SYSTICK_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e00e      	b.n	8003a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b0f      	cmp	r3, #15
 8003a82:	d80a      	bhi.n	8003a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a84:	2200      	movs	r2, #0
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8c:	f000 f927 	bl	8003cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a90:	4a06      	ldr	r2, [pc, #24]	; (8003aac <HAL_InitTick+0x5c>)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	20000008 	.word	0x20000008
 8003aac:	20000004 	.word	0x20000004

08003ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_IncTick+0x1c>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_IncTick+0x20>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	4a03      	ldr	r2, [pc, #12]	; (8003ad0 <HAL_IncTick+0x20>)
 8003ac2:	6013      	str	r3, [r2, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	20000008 	.word	0x20000008
 8003ad0:	200019fc 	.word	0x200019fc

08003ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ad8:	4b02      	ldr	r3, [pc, #8]	; (8003ae4 <HAL_GetTick+0x10>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr
 8003ae4:	200019fc 	.word	0x200019fc

08003ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003af0:	f7ff fff0 	bl	8003ad4 <HAL_GetTick>
 8003af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d005      	beq.n	8003b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <HAL_Delay+0x44>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b0e:	bf00      	nop
 8003b10:	f7ff ffe0 	bl	8003ad4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d8f7      	bhi.n	8003b10 <HAL_Delay+0x28>
  {
  }
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000008 	.word	0x20000008

08003b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b62:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	60d3      	str	r3, [r2, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b7c:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <__NVIC_GetPriorityGrouping+0x18>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	f003 0307 	and.w	r3, r3, #7
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	db0b      	blt.n	8003bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	f003 021f 	and.w	r2, r3, #31
 8003bac:	4906      	ldr	r1, [pc, #24]	; (8003bc8 <__NVIC_EnableIRQ+0x34>)
 8003bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	e000e100 	.word	0xe000e100

08003bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	6039      	str	r1, [r7, #0]
 8003bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	db0a      	blt.n	8003bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	490c      	ldr	r1, [pc, #48]	; (8003c18 <__NVIC_SetPriority+0x4c>)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	0112      	lsls	r2, r2, #4
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	440b      	add	r3, r1
 8003bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bf4:	e00a      	b.n	8003c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	4908      	ldr	r1, [pc, #32]	; (8003c1c <__NVIC_SetPriority+0x50>)
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	3b04      	subs	r3, #4
 8003c04:	0112      	lsls	r2, r2, #4
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	440b      	add	r3, r1
 8003c0a:	761a      	strb	r2, [r3, #24]
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	e000e100 	.word	0xe000e100
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b089      	sub	sp, #36	; 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f1c3 0307 	rsb	r3, r3, #7
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	bf28      	it	cs
 8003c3e:	2304      	movcs	r3, #4
 8003c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3304      	adds	r3, #4
 8003c46:	2b06      	cmp	r3, #6
 8003c48:	d902      	bls.n	8003c50 <NVIC_EncodePriority+0x30>
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	3b03      	subs	r3, #3
 8003c4e:	e000      	b.n	8003c52 <NVIC_EncodePriority+0x32>
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43da      	mvns	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	401a      	ands	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c68:	f04f 31ff 	mov.w	r1, #4294967295
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c72:	43d9      	mvns	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	4313      	orrs	r3, r2
         );
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3724      	adds	r7, #36	; 0x24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c94:	d301      	bcc.n	8003c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c96:	2301      	movs	r3, #1
 8003c98:	e00f      	b.n	8003cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c9a:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <SysTick_Config+0x40>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ca2:	210f      	movs	r1, #15
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	f7ff ff90 	bl	8003bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <SysTick_Config+0x40>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cb2:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <SysTick_Config+0x40>)
 8003cb4:	2207      	movs	r2, #7
 8003cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	e000e010 	.word	0xe000e010

08003cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff2d 	bl	8003b30 <__NVIC_SetPriorityGrouping>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf0:	f7ff ff42 	bl	8003b78 <__NVIC_GetPriorityGrouping>
 8003cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	6978      	ldr	r0, [r7, #20]
 8003cfc:	f7ff ff90 	bl	8003c20 <NVIC_EncodePriority>
 8003d00:	4602      	mov	r2, r0
 8003d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ff5f 	bl	8003bcc <__NVIC_SetPriority>
}
 8003d0e:	bf00      	nop
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ff35 	bl	8003b94 <__NVIC_EnableIRQ>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff ffa2 	bl	8003c84 <SysTick_Config>
 8003d40:	4603      	mov	r3, r0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d008      	beq.n	8003d72 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2204      	movs	r2, #4
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e020      	b.n	8003db4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 020e 	bic.w	r2, r2, #14
 8003d80:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003da0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d005      	beq.n	8003de2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
 8003de0:	e051      	b.n	8003e86 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 020e 	bic.w	r2, r2, #14
 8003df0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <HAL_DMA_Abort_IT+0xd0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d029      	beq.n	8003e60 <HAL_DMA_Abort_IT+0xa0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a20      	ldr	r2, [pc, #128]	; (8003e94 <HAL_DMA_Abort_IT+0xd4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d022      	beq.n	8003e5c <HAL_DMA_Abort_IT+0x9c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1f      	ldr	r2, [pc, #124]	; (8003e98 <HAL_DMA_Abort_IT+0xd8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d01a      	beq.n	8003e56 <HAL_DMA_Abort_IT+0x96>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1d      	ldr	r2, [pc, #116]	; (8003e9c <HAL_DMA_Abort_IT+0xdc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d012      	beq.n	8003e50 <HAL_DMA_Abort_IT+0x90>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <HAL_DMA_Abort_IT+0xe0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00a      	beq.n	8003e4a <HAL_DMA_Abort_IT+0x8a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1a      	ldr	r2, [pc, #104]	; (8003ea4 <HAL_DMA_Abort_IT+0xe4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d102      	bne.n	8003e44 <HAL_DMA_Abort_IT+0x84>
 8003e3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e42:	e00e      	b.n	8003e62 <HAL_DMA_Abort_IT+0xa2>
 8003e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e48:	e00b      	b.n	8003e62 <HAL_DMA_Abort_IT+0xa2>
 8003e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e4e:	e008      	b.n	8003e62 <HAL_DMA_Abort_IT+0xa2>
 8003e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e54:	e005      	b.n	8003e62 <HAL_DMA_Abort_IT+0xa2>
 8003e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e5a:	e002      	b.n	8003e62 <HAL_DMA_Abort_IT+0xa2>
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	e000      	b.n	8003e62 <HAL_DMA_Abort_IT+0xa2>
 8003e60:	2301      	movs	r3, #1
 8003e62:	4a11      	ldr	r2, [pc, #68]	; (8003ea8 <HAL_DMA_Abort_IT+0xe8>)
 8003e64:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3
    } 
  }
  return status;
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40020008 	.word	0x40020008
 8003e94:	4002001c 	.word	0x4002001c
 8003e98:	40020030 	.word	0x40020030
 8003e9c:	40020044 	.word	0x40020044
 8003ea0:	40020058 	.word	0x40020058
 8003ea4:	4002006c 	.word	0x4002006c
 8003ea8:	40020000 	.word	0x40020000

08003eac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr
	...

08003ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b08b      	sub	sp, #44	; 0x2c
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ed6:	e169      	b.n	80041ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ed8:	2201      	movs	r2, #1
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	f040 8158 	bne.w	80041a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4a9a      	ldr	r2, [pc, #616]	; (8004164 <HAL_GPIO_Init+0x2a0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d05e      	beq.n	8003fbe <HAL_GPIO_Init+0xfa>
 8003f00:	4a98      	ldr	r2, [pc, #608]	; (8004164 <HAL_GPIO_Init+0x2a0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d875      	bhi.n	8003ff2 <HAL_GPIO_Init+0x12e>
 8003f06:	4a98      	ldr	r2, [pc, #608]	; (8004168 <HAL_GPIO_Init+0x2a4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d058      	beq.n	8003fbe <HAL_GPIO_Init+0xfa>
 8003f0c:	4a96      	ldr	r2, [pc, #600]	; (8004168 <HAL_GPIO_Init+0x2a4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d86f      	bhi.n	8003ff2 <HAL_GPIO_Init+0x12e>
 8003f12:	4a96      	ldr	r2, [pc, #600]	; (800416c <HAL_GPIO_Init+0x2a8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d052      	beq.n	8003fbe <HAL_GPIO_Init+0xfa>
 8003f18:	4a94      	ldr	r2, [pc, #592]	; (800416c <HAL_GPIO_Init+0x2a8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d869      	bhi.n	8003ff2 <HAL_GPIO_Init+0x12e>
 8003f1e:	4a94      	ldr	r2, [pc, #592]	; (8004170 <HAL_GPIO_Init+0x2ac>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d04c      	beq.n	8003fbe <HAL_GPIO_Init+0xfa>
 8003f24:	4a92      	ldr	r2, [pc, #584]	; (8004170 <HAL_GPIO_Init+0x2ac>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d863      	bhi.n	8003ff2 <HAL_GPIO_Init+0x12e>
 8003f2a:	4a92      	ldr	r2, [pc, #584]	; (8004174 <HAL_GPIO_Init+0x2b0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d046      	beq.n	8003fbe <HAL_GPIO_Init+0xfa>
 8003f30:	4a90      	ldr	r2, [pc, #576]	; (8004174 <HAL_GPIO_Init+0x2b0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d85d      	bhi.n	8003ff2 <HAL_GPIO_Init+0x12e>
 8003f36:	2b12      	cmp	r3, #18
 8003f38:	d82a      	bhi.n	8003f90 <HAL_GPIO_Init+0xcc>
 8003f3a:	2b12      	cmp	r3, #18
 8003f3c:	d859      	bhi.n	8003ff2 <HAL_GPIO_Init+0x12e>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <HAL_GPIO_Init+0x80>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003fbf 	.word	0x08003fbf
 8003f48:	08003f99 	.word	0x08003f99
 8003f4c:	08003fab 	.word	0x08003fab
 8003f50:	08003fed 	.word	0x08003fed
 8003f54:	08003ff3 	.word	0x08003ff3
 8003f58:	08003ff3 	.word	0x08003ff3
 8003f5c:	08003ff3 	.word	0x08003ff3
 8003f60:	08003ff3 	.word	0x08003ff3
 8003f64:	08003ff3 	.word	0x08003ff3
 8003f68:	08003ff3 	.word	0x08003ff3
 8003f6c:	08003ff3 	.word	0x08003ff3
 8003f70:	08003ff3 	.word	0x08003ff3
 8003f74:	08003ff3 	.word	0x08003ff3
 8003f78:	08003ff3 	.word	0x08003ff3
 8003f7c:	08003ff3 	.word	0x08003ff3
 8003f80:	08003ff3 	.word	0x08003ff3
 8003f84:	08003ff3 	.word	0x08003ff3
 8003f88:	08003fa1 	.word	0x08003fa1
 8003f8c:	08003fb5 	.word	0x08003fb5
 8003f90:	4a79      	ldr	r2, [pc, #484]	; (8004178 <HAL_GPIO_Init+0x2b4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f96:	e02c      	b.n	8003ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	623b      	str	r3, [r7, #32]
          break;
 8003f9e:	e029      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	623b      	str	r3, [r7, #32]
          break;
 8003fa8:	e024      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	623b      	str	r3, [r7, #32]
          break;
 8003fb2:	e01f      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	623b      	str	r3, [r7, #32]
          break;
 8003fbc:	e01a      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fc6:	2304      	movs	r3, #4
 8003fc8:	623b      	str	r3, [r7, #32]
          break;
 8003fca:	e013      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	611a      	str	r2, [r3, #16]
          break;
 8003fde:	e009      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	615a      	str	r2, [r3, #20]
          break;
 8003fea:	e003      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fec:	2300      	movs	r3, #0
 8003fee:	623b      	str	r3, [r7, #32]
          break;
 8003ff0:	e000      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          break;
 8003ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2bff      	cmp	r3, #255	; 0xff
 8003ff8:	d801      	bhi.n	8003ffe <HAL_GPIO_Init+0x13a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	e001      	b.n	8004002 <HAL_GPIO_Init+0x13e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2bff      	cmp	r3, #255	; 0xff
 8004008:	d802      	bhi.n	8004010 <HAL_GPIO_Init+0x14c>
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	e002      	b.n	8004016 <HAL_GPIO_Init+0x152>
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	3b08      	subs	r3, #8
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	210f      	movs	r1, #15
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	401a      	ands	r2, r3
 8004028:	6a39      	ldr	r1, [r7, #32]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	431a      	orrs	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80b1 	beq.w	80041a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004044:	4b4d      	ldr	r3, [pc, #308]	; (800417c <HAL_GPIO_Init+0x2b8>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	4a4c      	ldr	r2, [pc, #304]	; (800417c <HAL_GPIO_Init+0x2b8>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6193      	str	r3, [r2, #24]
 8004050:	4b4a      	ldr	r3, [pc, #296]	; (800417c <HAL_GPIO_Init+0x2b8>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800405c:	4a48      	ldr	r2, [pc, #288]	; (8004180 <HAL_GPIO_Init+0x2bc>)
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	089b      	lsrs	r3, r3, #2
 8004062:	3302      	adds	r3, #2
 8004064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	220f      	movs	r2, #15
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4013      	ands	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a40      	ldr	r2, [pc, #256]	; (8004184 <HAL_GPIO_Init+0x2c0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <HAL_GPIO_Init+0x1ec>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a3f      	ldr	r2, [pc, #252]	; (8004188 <HAL_GPIO_Init+0x2c4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00d      	beq.n	80040ac <HAL_GPIO_Init+0x1e8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a3e      	ldr	r2, [pc, #248]	; (800418c <HAL_GPIO_Init+0x2c8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d007      	beq.n	80040a8 <HAL_GPIO_Init+0x1e4>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a3d      	ldr	r2, [pc, #244]	; (8004190 <HAL_GPIO_Init+0x2cc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_GPIO_Init+0x1e0>
 80040a0:	2303      	movs	r3, #3
 80040a2:	e006      	b.n	80040b2 <HAL_GPIO_Init+0x1ee>
 80040a4:	2304      	movs	r3, #4
 80040a6:	e004      	b.n	80040b2 <HAL_GPIO_Init+0x1ee>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e002      	b.n	80040b2 <HAL_GPIO_Init+0x1ee>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_GPIO_Init+0x1ee>
 80040b0:	2300      	movs	r3, #0
 80040b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b4:	f002 0203 	and.w	r2, r2, #3
 80040b8:	0092      	lsls	r2, r2, #2
 80040ba:	4093      	lsls	r3, r2
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80040c2:	492f      	ldr	r1, [pc, #188]	; (8004180 <HAL_GPIO_Init+0x2bc>)
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	089b      	lsrs	r3, r3, #2
 80040c8:	3302      	adds	r3, #2
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d006      	beq.n	80040ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	492c      	ldr	r1, [pc, #176]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]
 80040e8:	e006      	b.n	80040f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040ea:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	4928      	ldr	r1, [pc, #160]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d006      	beq.n	8004112 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004104:	4b23      	ldr	r3, [pc, #140]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	4922      	ldr	r1, [pc, #136]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
 8004110:	e006      	b.n	8004120 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	43db      	mvns	r3, r3
 800411a:	491e      	ldr	r1, [pc, #120]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 800411c:	4013      	ands	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d006      	beq.n	800413a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800412c:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	4918      	ldr	r1, [pc, #96]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]
 8004138:	e006      	b.n	8004148 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800413a:	4b16      	ldr	r3, [pc, #88]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	43db      	mvns	r3, r3
 8004142:	4914      	ldr	r1, [pc, #80]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 8004144:	4013      	ands	r3, r2
 8004146:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d021      	beq.n	8004198 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	490e      	ldr	r1, [pc, #56]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	4313      	orrs	r3, r2
 800415e:	60cb      	str	r3, [r1, #12]
 8004160:	e021      	b.n	80041a6 <HAL_GPIO_Init+0x2e2>
 8004162:	bf00      	nop
 8004164:	10320000 	.word	0x10320000
 8004168:	10310000 	.word	0x10310000
 800416c:	10220000 	.word	0x10220000
 8004170:	10210000 	.word	0x10210000
 8004174:	10120000 	.word	0x10120000
 8004178:	10110000 	.word	0x10110000
 800417c:	40021000 	.word	0x40021000
 8004180:	40010000 	.word	0x40010000
 8004184:	40010800 	.word	0x40010800
 8004188:	40010c00 	.word	0x40010c00
 800418c:	40011000 	.word	0x40011000
 8004190:	40011400 	.word	0x40011400
 8004194:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_GPIO_Init+0x304>)
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	43db      	mvns	r3, r3
 80041a0:	4909      	ldr	r1, [pc, #36]	; (80041c8 <HAL_GPIO_Init+0x304>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	3301      	adds	r3, #1
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	fa22 f303 	lsr.w	r3, r2, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f47f ae8e 	bne.w	8003ed8 <HAL_GPIO_Init+0x14>
  }
}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	372c      	adds	r7, #44	; 0x2c
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	40010400 	.word	0x40010400

080041cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	807b      	strh	r3, [r7, #2]
 80041d8:	4613      	mov	r3, r2
 80041da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041dc:	787b      	ldrb	r3, [r7, #1]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041e2:	887a      	ldrh	r2, [r7, #2]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041e8:	e003      	b.n	80041f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	041a      	lsls	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	611a      	str	r2, [r3, #16]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr

080041fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e26c      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8087 	beq.w	800432a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800421c:	4b92      	ldr	r3, [pc, #584]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	2b04      	cmp	r3, #4
 8004226:	d00c      	beq.n	8004242 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004228:	4b8f      	ldr	r3, [pc, #572]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d112      	bne.n	800425a <HAL_RCC_OscConfig+0x5e>
 8004234:	4b8c      	ldr	r3, [pc, #560]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d10b      	bne.n	800425a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004242:	4b89      	ldr	r3, [pc, #548]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d06c      	beq.n	8004328 <HAL_RCC_OscConfig+0x12c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d168      	bne.n	8004328 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e246      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004262:	d106      	bne.n	8004272 <HAL_RCC_OscConfig+0x76>
 8004264:	4b80      	ldr	r3, [pc, #512]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a7f      	ldr	r2, [pc, #508]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 800426a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	e02e      	b.n	80042d0 <HAL_RCC_OscConfig+0xd4>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x98>
 800427a:	4b7b      	ldr	r3, [pc, #492]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a7a      	ldr	r2, [pc, #488]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b78      	ldr	r3, [pc, #480]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a77      	ldr	r2, [pc, #476]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 800428c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e01d      	b.n	80042d0 <HAL_RCC_OscConfig+0xd4>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0xbc>
 800429e:	4b72      	ldr	r3, [pc, #456]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a71      	ldr	r2, [pc, #452]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b6f      	ldr	r3, [pc, #444]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a6e      	ldr	r2, [pc, #440]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e00b      	b.n	80042d0 <HAL_RCC_OscConfig+0xd4>
 80042b8:	4b6b      	ldr	r3, [pc, #428]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a6a      	ldr	r2, [pc, #424]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	4b68      	ldr	r3, [pc, #416]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a67      	ldr	r2, [pc, #412]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d013      	beq.n	8004300 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d8:	f7ff fbfc 	bl	8003ad4 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e0:	f7ff fbf8 	bl	8003ad4 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b64      	cmp	r3, #100	; 0x64
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e1fa      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4b5d      	ldr	r3, [pc, #372]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0xe4>
 80042fe:	e014      	b.n	800432a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7ff fbe8 	bl	8003ad4 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004308:	f7ff fbe4 	bl	8003ad4 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	; 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1e6      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431a:	4b53      	ldr	r3, [pc, #332]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x10c>
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d063      	beq.n	80043fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004336:	4b4c      	ldr	r3, [pc, #304]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004342:	4b49      	ldr	r3, [pc, #292]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b08      	cmp	r3, #8
 800434c:	d11c      	bne.n	8004388 <HAL_RCC_OscConfig+0x18c>
 800434e:	4b46      	ldr	r3, [pc, #280]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d116      	bne.n	8004388 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435a:	4b43      	ldr	r3, [pc, #268]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_RCC_OscConfig+0x176>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d001      	beq.n	8004372 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e1ba      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004372:	4b3d      	ldr	r3, [pc, #244]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4939      	ldr	r1, [pc, #228]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004386:	e03a      	b.n	80043fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d020      	beq.n	80043d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004390:	4b36      	ldr	r3, [pc, #216]	; (800446c <HAL_RCC_OscConfig+0x270>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004396:	f7ff fb9d 	bl	8003ad4 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439e:	f7ff fb99 	bl	8003ad4 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e19b      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b0:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043bc:	4b2a      	ldr	r3, [pc, #168]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4927      	ldr	r1, [pc, #156]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	600b      	str	r3, [r1, #0]
 80043d0:	e015      	b.n	80043fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d2:	4b26      	ldr	r3, [pc, #152]	; (800446c <HAL_RCC_OscConfig+0x270>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7ff fb7c 	bl	8003ad4 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e0:	f7ff fb78 	bl	8003ad4 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e17a      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f2:	4b1d      	ldr	r3, [pc, #116]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d03a      	beq.n	8004480 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d019      	beq.n	8004446 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004412:	4b17      	ldr	r3, [pc, #92]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004418:	f7ff fb5c 	bl	8003ad4 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004420:	f7ff fb58 	bl	8003ad4 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e15a      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004432:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800443e:	2001      	movs	r0, #1
 8004440:	f000 fad8 	bl	80049f4 <RCC_Delay>
 8004444:	e01c      	b.n	8004480 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444c:	f7ff fb42 	bl	8003ad4 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004452:	e00f      	b.n	8004474 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004454:	f7ff fb3e 	bl	8003ad4 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d908      	bls.n	8004474 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e140      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
 800446c:	42420000 	.word	0x42420000
 8004470:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004474:	4b9e      	ldr	r3, [pc, #632]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e9      	bne.n	8004454 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80a6 	beq.w	80045da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448e:	2300      	movs	r3, #0
 8004490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004492:	4b97      	ldr	r3, [pc, #604]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10d      	bne.n	80044ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449e:	4b94      	ldr	r3, [pc, #592]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	4a93      	ldr	r2, [pc, #588]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a8:	61d3      	str	r3, [r2, #28]
 80044aa:	4b91      	ldr	r3, [pc, #580]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ba:	4b8e      	ldr	r3, [pc, #568]	; (80046f4 <HAL_RCC_OscConfig+0x4f8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d118      	bne.n	80044f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c6:	4b8b      	ldr	r3, [pc, #556]	; (80046f4 <HAL_RCC_OscConfig+0x4f8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a8a      	ldr	r2, [pc, #552]	; (80046f4 <HAL_RCC_OscConfig+0x4f8>)
 80044cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d2:	f7ff faff 	bl	8003ad4 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044da:	f7ff fafb 	bl	8003ad4 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b64      	cmp	r3, #100	; 0x64
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e0fd      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ec:	4b81      	ldr	r3, [pc, #516]	; (80046f4 <HAL_RCC_OscConfig+0x4f8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d106      	bne.n	800450e <HAL_RCC_OscConfig+0x312>
 8004500:	4b7b      	ldr	r3, [pc, #492]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	4a7a      	ldr	r2, [pc, #488]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6213      	str	r3, [r2, #32]
 800450c:	e02d      	b.n	800456a <HAL_RCC_OscConfig+0x36e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10c      	bne.n	8004530 <HAL_RCC_OscConfig+0x334>
 8004516:	4b76      	ldr	r3, [pc, #472]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	4a75      	ldr	r2, [pc, #468]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	6213      	str	r3, [r2, #32]
 8004522:	4b73      	ldr	r3, [pc, #460]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	4a72      	ldr	r2, [pc, #456]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004528:	f023 0304 	bic.w	r3, r3, #4
 800452c:	6213      	str	r3, [r2, #32]
 800452e:	e01c      	b.n	800456a <HAL_RCC_OscConfig+0x36e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	2b05      	cmp	r3, #5
 8004536:	d10c      	bne.n	8004552 <HAL_RCC_OscConfig+0x356>
 8004538:	4b6d      	ldr	r3, [pc, #436]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	4a6c      	ldr	r2, [pc, #432]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 800453e:	f043 0304 	orr.w	r3, r3, #4
 8004542:	6213      	str	r3, [r2, #32]
 8004544:	4b6a      	ldr	r3, [pc, #424]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4a69      	ldr	r2, [pc, #420]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6213      	str	r3, [r2, #32]
 8004550:	e00b      	b.n	800456a <HAL_RCC_OscConfig+0x36e>
 8004552:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	4a66      	ldr	r2, [pc, #408]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	6213      	str	r3, [r2, #32]
 800455e:	4b64      	ldr	r3, [pc, #400]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	4a63      	ldr	r2, [pc, #396]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004564:	f023 0304 	bic.w	r3, r3, #4
 8004568:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d015      	beq.n	800459e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004572:	f7ff faaf 	bl	8003ad4 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457a:	f7ff faab 	bl	8003ad4 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f241 3288 	movw	r2, #5000	; 0x1388
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e0ab      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	4b57      	ldr	r3, [pc, #348]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ee      	beq.n	800457a <HAL_RCC_OscConfig+0x37e>
 800459c:	e014      	b.n	80045c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459e:	f7ff fa99 	bl	8003ad4 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a4:	e00a      	b.n	80045bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a6:	f7ff fa95 	bl	8003ad4 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e095      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045bc:	4b4c      	ldr	r3, [pc, #304]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ee      	bne.n	80045a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045c8:	7dfb      	ldrb	r3, [r7, #23]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ce:	4b48      	ldr	r3, [pc, #288]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	4a47      	ldr	r2, [pc, #284]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 80045d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8081 	beq.w	80046e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e4:	4b42      	ldr	r3, [pc, #264]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d061      	beq.n	80046b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d146      	bne.n	8004686 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f8:	4b3f      	ldr	r3, [pc, #252]	; (80046f8 <HAL_RCC_OscConfig+0x4fc>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7ff fa69 	bl	8003ad4 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004606:	f7ff fa65 	bl	8003ad4 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e067      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004618:	4b35      	ldr	r3, [pc, #212]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f0      	bne.n	8004606 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462c:	d108      	bne.n	8004640 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800462e:	4b30      	ldr	r3, [pc, #192]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	492d      	ldr	r1, [pc, #180]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004640:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a19      	ldr	r1, [r3, #32]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	430b      	orrs	r3, r1
 8004652:	4927      	ldr	r1, [pc, #156]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004658:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <HAL_RCC_OscConfig+0x4fc>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465e:	f7ff fa39 	bl	8003ad4 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004666:	f7ff fa35 	bl	8003ad4 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e037      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x46a>
 8004684:	e02f      	b.n	80046e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004686:	4b1c      	ldr	r3, [pc, #112]	; (80046f8 <HAL_RCC_OscConfig+0x4fc>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7ff fa22 	bl	8003ad4 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7ff fa1e 	bl	8003ad4 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e020      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x498>
 80046b2:	e018      	b.n	80046e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e013      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCC_OscConfig+0x4f4>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d106      	bne.n	80046e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40007000 	.word	0x40007000
 80046f8:	42420060 	.word	0x42420060

080046fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0d0      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004710:	4b6a      	ldr	r3, [pc, #424]	; (80048bc <HAL_RCC_ClockConfig+0x1c0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d910      	bls.n	8004740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b67      	ldr	r3, [pc, #412]	; (80048bc <HAL_RCC_ClockConfig+0x1c0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 0207 	bic.w	r2, r3, #7
 8004726:	4965      	ldr	r1, [pc, #404]	; (80048bc <HAL_RCC_ClockConfig+0x1c0>)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	4313      	orrs	r3, r2
 800472c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	4b63      	ldr	r3, [pc, #396]	; (80048bc <HAL_RCC_ClockConfig+0x1c0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e0b8      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d020      	beq.n	800478e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004758:	4b59      	ldr	r3, [pc, #356]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a58      	ldr	r2, [pc, #352]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 800475e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004762:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004770:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4a52      	ldr	r2, [pc, #328]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004776:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800477a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800477c:	4b50      	ldr	r3, [pc, #320]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	494d      	ldr	r1, [pc, #308]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 800478a:	4313      	orrs	r3, r2
 800478c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d040      	beq.n	800481c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d107      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a2:	4b47      	ldr	r3, [pc, #284]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d115      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e07f      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d107      	bne.n	80047ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e073      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ca:	4b3d      	ldr	r3, [pc, #244]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e06b      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047da:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f023 0203 	bic.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4936      	ldr	r1, [pc, #216]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ec:	f7ff f972 	bl	8003ad4 <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	e00a      	b.n	800480a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7ff f96e 	bl	8003ad4 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e053      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	4b2d      	ldr	r3, [pc, #180]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 020c 	and.w	r2, r3, #12
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	429a      	cmp	r2, r3
 800481a:	d1eb      	bne.n	80047f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800481c:	4b27      	ldr	r3, [pc, #156]	; (80048bc <HAL_RCC_ClockConfig+0x1c0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d210      	bcs.n	800484c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b24      	ldr	r3, [pc, #144]	; (80048bc <HAL_RCC_ClockConfig+0x1c0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 0207 	bic.w	r2, r3, #7
 8004832:	4922      	ldr	r1, [pc, #136]	; (80048bc <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b20      	ldr	r3, [pc, #128]	; (80048bc <HAL_RCC_ClockConfig+0x1c0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e032      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004858:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4916      	ldr	r1, [pc, #88]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004866:	4313      	orrs	r3, r2
 8004868:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004876:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	490e      	ldr	r1, [pc, #56]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800488a:	f000 f821 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 800488e:	4602      	mov	r2, r0
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	490a      	ldr	r1, [pc, #40]	; (80048c4 <HAL_RCC_ClockConfig+0x1c8>)
 800489c:	5ccb      	ldrb	r3, [r1, r3]
 800489e:	fa22 f303 	lsr.w	r3, r2, r3
 80048a2:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <HAL_RCC_ClockConfig+0x1cc>)
 80048a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <HAL_RCC_ClockConfig+0x1d0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff f8d0 	bl	8003a50 <HAL_InitTick>

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40022000 	.word	0x40022000
 80048c0:	40021000 	.word	0x40021000
 80048c4:	08006a04 	.word	0x08006a04
 80048c8:	20000000 	.word	0x20000000
 80048cc:	20000004 	.word	0x20000004

080048d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d0:	b490      	push	{r4, r7}
 80048d2:	b08a      	sub	sp, #40	; 0x28
 80048d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048d6:	4b2a      	ldr	r3, [pc, #168]	; (8004980 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048d8:	1d3c      	adds	r4, r7, #4
 80048da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048e0:	f240 2301 	movw	r3, #513	; 0x201
 80048e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	2300      	movs	r3, #0
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048fa:	4b22      	ldr	r3, [pc, #136]	; (8004984 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b04      	cmp	r3, #4
 8004908:	d002      	beq.n	8004910 <HAL_RCC_GetSysClockFreq+0x40>
 800490a:	2b08      	cmp	r3, #8
 800490c:	d003      	beq.n	8004916 <HAL_RCC_GetSysClockFreq+0x46>
 800490e:	e02d      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004910:	4b1d      	ldr	r3, [pc, #116]	; (8004988 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004912:	623b      	str	r3, [r7, #32]
      break;
 8004914:	e02d      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	0c9b      	lsrs	r3, r3, #18
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004922:	4413      	add	r3, r2
 8004924:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004928:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004934:	4b13      	ldr	r3, [pc, #76]	; (8004984 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	0c5b      	lsrs	r3, r3, #17
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004942:	4413      	add	r3, r2
 8004944:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004948:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800494e:	fb02 f203 	mul.w	r2, r2, r3
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
 800495a:	e004      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	4a0b      	ldr	r2, [pc, #44]	; (800498c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004960:	fb02 f303 	mul.w	r3, r2, r3
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	623b      	str	r3, [r7, #32]
      break;
 800496a:	e002      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800496e:	623b      	str	r3, [r7, #32]
      break;
 8004970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004972:	6a3b      	ldr	r3, [r7, #32]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3728      	adds	r7, #40	; 0x28
 8004978:	46bd      	mov	sp, r7
 800497a:	bc90      	pop	{r4, r7}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	080069f4 	.word	0x080069f4
 8004984:	40021000 	.word	0x40021000
 8004988:	007a1200 	.word	0x007a1200
 800498c:	003d0900 	.word	0x003d0900

08004990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004994:	4b02      	ldr	r3, [pc, #8]	; (80049a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	20000000 	.word	0x20000000

080049a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049a8:	f7ff fff2 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049ac:	4602      	mov	r2, r0
 80049ae:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	4903      	ldr	r1, [pc, #12]	; (80049c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ba:	5ccb      	ldrb	r3, [r1, r3]
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000
 80049c8:	08006a14 	.word	0x08006a14

080049cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049d0:	f7ff ffde 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	0adb      	lsrs	r3, r3, #11
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	4903      	ldr	r1, [pc, #12]	; (80049f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049e2:	5ccb      	ldrb	r3, [r1, r3]
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000
 80049f0:	08006a14 	.word	0x08006a14

080049f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <RCC_Delay+0x34>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0a      	ldr	r2, [pc, #40]	; (8004a2c <RCC_Delay+0x38>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	0a5b      	lsrs	r3, r3, #9
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a10:	bf00      	nop
  }
  while (Delay --);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	60fa      	str	r2, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f9      	bne.n	8004a10 <RCC_Delay+0x1c>
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	20000000 	.word	0x20000000
 8004a2c:	10624dd3 	.word	0x10624dd3

08004a30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e076      	b.n	8004b30 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d108      	bne.n	8004a5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a52:	d009      	beq.n	8004a68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	61da      	str	r2, [r3, #28]
 8004a5a:	e005      	b.n	8004a68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fcb0 	bl	80013e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aec:	ea42 0103 	orr.w	r1, r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	0c1a      	lsrs	r2, r3, #16
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f002 0204 	and.w	r2, r2, #4
 8004b0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69da      	ldr	r2, [r3, #28]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_SPI_Transmit+0x22>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e126      	b.n	8004da8 <HAL_SPI_Transmit+0x270>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b62:	f7fe ffb7 	bl	8003ad4 <HAL_GetTick>
 8004b66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d002      	beq.n	8004b7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b7c:	e10b      	b.n	8004d96 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_SPI_Transmit+0x52>
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d102      	bne.n	8004b90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b8e:	e102      	b.n	8004d96 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2203      	movs	r2, #3
 8004b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	88fa      	ldrh	r2, [r7, #6]
 8004bae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd6:	d10f      	bne.n	8004bf8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b40      	cmp	r3, #64	; 0x40
 8004c04:	d007      	beq.n	8004c16 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1e:	d14b      	bne.n	8004cb8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_SPI_Transmit+0xf6>
 8004c28:	8afb      	ldrh	r3, [r7, #22]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d13e      	bne.n	8004cac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	881a      	ldrh	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	1c9a      	adds	r2, r3, #2
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c52:	e02b      	b.n	8004cac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d112      	bne.n	8004c88 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	881a      	ldrh	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	1c9a      	adds	r2, r3, #2
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c86:	e011      	b.n	8004cac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c88:	f7fe ff24 	bl	8003ad4 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d803      	bhi.n	8004ca0 <HAL_SPI_Transmit+0x168>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d102      	bne.n	8004ca6 <HAL_SPI_Transmit+0x16e>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004caa:	e074      	b.n	8004d96 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1ce      	bne.n	8004c54 <HAL_SPI_Transmit+0x11c>
 8004cb6:	e04c      	b.n	8004d52 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_SPI_Transmit+0x18e>
 8004cc0:	8afb      	ldrh	r3, [r7, #22]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d140      	bne.n	8004d48 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	330c      	adds	r3, #12
 8004cd0:	7812      	ldrb	r2, [r2, #0]
 8004cd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cec:	e02c      	b.n	8004d48 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d113      	bne.n	8004d24 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d22:	e011      	b.n	8004d48 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d24:	f7fe fed6 	bl	8003ad4 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d803      	bhi.n	8004d3c <HAL_SPI_Transmit+0x204>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3a:	d102      	bne.n	8004d42 <HAL_SPI_Transmit+0x20a>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d102      	bne.n	8004d48 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d46:	e026      	b.n	8004d96 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1cd      	bne.n	8004cee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	6839      	ldr	r1, [r7, #0]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 fbb8 	bl	80054cc <SPI_EndRxTxTransaction>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e000      	b.n	8004d96 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004da6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3720      	adds	r7, #32
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dcc:	d112      	bne.n	8004df4 <HAL_SPI_Receive+0x44>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10e      	bne.n	8004df4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2204      	movs	r2, #4
 8004dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	4613      	mov	r3, r2
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f8f1 	bl	8004fd2 <HAL_SPI_TransmitReceive>
 8004df0:	4603      	mov	r3, r0
 8004df2:	e0ea      	b.n	8004fca <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_SPI_Receive+0x52>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e0e3      	b.n	8004fca <HAL_SPI_Receive+0x21a>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e0a:	f7fe fe63 	bl	8003ad4 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e20:	e0ca      	b.n	8004fb8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_SPI_Receive+0x7e>
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e32:	e0c1      	b.n	8004fb8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2204      	movs	r2, #4
 8004e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	88fa      	ldrh	r2, [r7, #6]
 8004e4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	88fa      	ldrh	r2, [r7, #6]
 8004e52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7a:	d10f      	bne.n	8004e9c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e9a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea6:	2b40      	cmp	r3, #64	; 0x40
 8004ea8:	d007      	beq.n	8004eba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d162      	bne.n	8004f88 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ec2:	e02e      	b.n	8004f22 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d115      	bne.n	8004efe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f103 020c 	add.w	r2, r3, #12
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	7812      	ldrb	r2, [r2, #0]
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004efc:	e011      	b.n	8004f22 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004efe:	f7fe fde9 	bl	8003ad4 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d803      	bhi.n	8004f16 <HAL_SPI_Receive+0x166>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d102      	bne.n	8004f1c <HAL_SPI_Receive+0x16c>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d102      	bne.n	8004f22 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f20:	e04a      	b.n	8004fb8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1cb      	bne.n	8004ec4 <HAL_SPI_Receive+0x114>
 8004f2c:	e031      	b.n	8004f92 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d113      	bne.n	8004f64 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	b292      	uxth	r2, r2
 8004f48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	1c9a      	adds	r2, r3, #2
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f62:	e011      	b.n	8004f88 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f64:	f7fe fdb6 	bl	8003ad4 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d803      	bhi.n	8004f7c <HAL_SPI_Receive+0x1cc>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7a:	d102      	bne.n	8004f82 <HAL_SPI_Receive+0x1d2>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f86:	e017      	b.n	8004fb8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1cd      	bne.n	8004f2e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fa46 	bl	8005428 <SPI_EndRxTransaction>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
 8004fb4:	e000      	b.n	8004fb8 <HAL_SPI_Receive+0x208>
  }

error :
 8004fb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b08c      	sub	sp, #48	; 0x30
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_SPI_TransmitReceive+0x26>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e18a      	b.n	800530e <HAL_SPI_TransmitReceive+0x33c>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005000:	f7fe fd68 	bl	8003ad4 <HAL_GetTick>
 8005004:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800500c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005016:	887b      	ldrh	r3, [r7, #2]
 8005018:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800501a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800501e:	2b01      	cmp	r3, #1
 8005020:	d00f      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x70>
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005028:	d107      	bne.n	800503a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d103      	bne.n	800503a <HAL_SPI_TransmitReceive+0x68>
 8005032:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005036:	2b04      	cmp	r3, #4
 8005038:	d003      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800503a:	2302      	movs	r3, #2
 800503c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005040:	e15b      	b.n	80052fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_SPI_TransmitReceive+0x82>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <HAL_SPI_TransmitReceive+0x82>
 800504e:	887b      	ldrh	r3, [r7, #2]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d103      	bne.n	800505c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800505a:	e14e      	b.n	80052fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b04      	cmp	r3, #4
 8005066:	d003      	beq.n	8005070 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2205      	movs	r2, #5
 800506c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	887a      	ldrh	r2, [r7, #2]
 8005080:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	887a      	ldrh	r2, [r7, #2]
 8005086:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	887a      	ldrh	r2, [r7, #2]
 8005092:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	887a      	ldrh	r2, [r7, #2]
 8005098:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d007      	beq.n	80050c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050cc:	d178      	bne.n	80051c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x10a>
 80050d6:	8b7b      	ldrh	r3, [r7, #26]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d166      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	881a      	ldrh	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	1c9a      	adds	r2, r3, #2
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005100:	e053      	b.n	80051aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b02      	cmp	r3, #2
 800510e:	d11b      	bne.n	8005148 <HAL_SPI_TransmitReceive+0x176>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <HAL_SPI_TransmitReceive+0x176>
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d113      	bne.n	8005148 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	881a      	ldrh	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	1c9a      	adds	r2, r3, #2
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b01      	cmp	r3, #1
 8005154:	d119      	bne.n	800518a <HAL_SPI_TransmitReceive+0x1b8>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515a:	b29b      	uxth	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d014      	beq.n	800518a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	b292      	uxth	r2, r2
 800516c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	1c9a      	adds	r2, r3, #2
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005186:	2301      	movs	r3, #1
 8005188:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800518a:	f7fe fca3 	bl	8003ad4 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005196:	429a      	cmp	r2, r3
 8005198:	d807      	bhi.n	80051aa <HAL_SPI_TransmitReceive+0x1d8>
 800519a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d003      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051a8:	e0a7      	b.n	80052fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1a6      	bne.n	8005102 <HAL_SPI_TransmitReceive+0x130>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1a1      	bne.n	8005102 <HAL_SPI_TransmitReceive+0x130>
 80051be:	e07c      	b.n	80052ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x1fc>
 80051c8:	8b7b      	ldrh	r3, [r7, #26]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d16b      	bne.n	80052a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	7812      	ldrb	r2, [r2, #0]
 80051da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f4:	e057      	b.n	80052a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b02      	cmp	r3, #2
 8005202:	d11c      	bne.n	800523e <HAL_SPI_TransmitReceive+0x26c>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d017      	beq.n	800523e <HAL_SPI_TransmitReceive+0x26c>
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d114      	bne.n	800523e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	7812      	ldrb	r2, [r2, #0]
 8005220:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b01      	cmp	r3, #1
 800524a:	d119      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x2ae>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d014      	beq.n	8005280 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800527c:	2301      	movs	r3, #1
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005280:	f7fe fc28 	bl	8003ad4 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800528c:	429a      	cmp	r2, r3
 800528e:	d803      	bhi.n	8005298 <HAL_SPI_TransmitReceive+0x2c6>
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d102      	bne.n	800529e <HAL_SPI_TransmitReceive+0x2cc>
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	2b00      	cmp	r3, #0
 800529c:	d103      	bne.n	80052a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052a4:	e029      	b.n	80052fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1a2      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x224>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d19d      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f904 	bl	80054cc <SPI_EndRxTxTransaction>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d006      	beq.n	80052d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052d6:	e010      	b.n	80052fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10b      	bne.n	80052f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	e000      	b.n	80052fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800530a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800530e:	4618      	mov	r0, r3
 8005310:	3730      	adds	r7, #48	; 0x30
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005328:	f7fe fbd4 	bl	8003ad4 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	4413      	add	r3, r2
 8005336:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005338:	f7fe fbcc 	bl	8003ad4 <HAL_GetTick>
 800533c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800533e:	4b39      	ldr	r3, [pc, #228]	; (8005424 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	015b      	lsls	r3, r3, #5
 8005344:	0d1b      	lsrs	r3, r3, #20
 8005346:	69fa      	ldr	r2, [r7, #28]
 8005348:	fb02 f303 	mul.w	r3, r2, r3
 800534c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800534e:	e054      	b.n	80053fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005356:	d050      	beq.n	80053fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005358:	f7fe fbbc 	bl	8003ad4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	429a      	cmp	r2, r3
 8005366:	d902      	bls.n	800536e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d13d      	bne.n	80053ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800537c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005386:	d111      	bne.n	80053ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005390:	d004      	beq.n	800539c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800539a:	d107      	bne.n	80053ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b4:	d10f      	bne.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e017      	b.n	800541a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4013      	ands	r3, r2
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	429a      	cmp	r2, r3
 8005408:	bf0c      	ite	eq
 800540a:	2301      	moveq	r3, #1
 800540c:	2300      	movne	r3, #0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	429a      	cmp	r2, r3
 8005416:	d19b      	bne.n	8005350 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3720      	adds	r7, #32
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000000 	.word	0x20000000

08005428 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800543c:	d111      	bne.n	8005462 <SPI_EndRxTransaction+0x3a>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005446:	d004      	beq.n	8005452 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005450:	d107      	bne.n	8005462 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005460:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800546a:	d117      	bne.n	800549c <SPI_EndRxTransaction+0x74>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005474:	d112      	bne.n	800549c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2200      	movs	r2, #0
 800547e:	2101      	movs	r1, #1
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff ff49 	bl	8005318 <SPI_WaitFlagStateUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01a      	beq.n	80054c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005490:	f043 0220 	orr.w	r2, r3, #32
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e013      	b.n	80054c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2200      	movs	r2, #0
 80054a4:	2180      	movs	r1, #128	; 0x80
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7ff ff36 	bl	8005318 <SPI_WaitFlagStateUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d007      	beq.n	80054c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	f043 0220 	orr.w	r2, r3, #32
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e000      	b.n	80054c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2200      	movs	r2, #0
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff ff18 	bl	8005318 <SPI_WaitFlagStateUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f2:	f043 0220 	orr.w	r2, r3, #32
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e000      	b.n	8005500 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e03f      	b.n	800559a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fb ffa4 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2224      	movs	r2, #36	; 0x24
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800554a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fcdf 	bl	8005f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b08a      	sub	sp, #40	; 0x28
 80055a6:	af02      	add	r7, sp, #8
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	603b      	str	r3, [r7, #0]
 80055ae:	4613      	mov	r3, r2
 80055b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d17c      	bne.n	80056bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_UART_Transmit+0x2c>
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e075      	b.n	80056be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_UART_Transmit+0x3e>
 80055dc:	2302      	movs	r3, #2
 80055de:	e06e      	b.n	80056be <HAL_UART_Transmit+0x11c>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2221      	movs	r2, #33	; 0x21
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055f6:	f7fe fa6d 	bl	8003ad4 <HAL_GetTick>
 80055fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	88fa      	ldrh	r2, [r7, #6]
 8005600:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	88fa      	ldrh	r2, [r7, #6]
 8005606:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005610:	d108      	bne.n	8005624 <HAL_UART_Transmit+0x82>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d104      	bne.n	8005624 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800561a:	2300      	movs	r3, #0
 800561c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	e003      	b.n	800562c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005628:	2300      	movs	r3, #0
 800562a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005634:	e02a      	b.n	800568c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2200      	movs	r2, #0
 800563e:	2180      	movs	r1, #128	; 0x80
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 fa92 	bl	8005b6a <UART_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e036      	b.n	80056be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	3302      	adds	r3, #2
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	e007      	b.n	800567e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	3301      	adds	r3, #1
 800567c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1cf      	bne.n	8005636 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2200      	movs	r2, #0
 800569e:	2140      	movs	r1, #64	; 0x40
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fa62 	bl	8005b6a <UART_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e006      	b.n	80056be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	e000      	b.n	80056be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056bc:	2302      	movs	r3, #2
  }
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	4613      	mov	r3, r2
 80056d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d11d      	bne.n	800571c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_UART_Receive_IT+0x26>
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e016      	b.n	800571e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_UART_Receive_IT+0x38>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e00f      	b.n	800571e <HAL_UART_Receive_IT+0x58>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800570c:	88fb      	ldrh	r3, [r7, #6]
 800570e:	461a      	mov	r2, r3
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 fa73 	bl	8005bfe <UART_Start_Receive_IT>
 8005718:	4603      	mov	r3, r0
 800571a:	e000      	b.n	800571e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800571c:	2302      	movs	r3, #2
  }
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800573c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695a      	ldr	r2, [r3, #20]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	2b01      	cmp	r3, #1
 8005754:	d107      	bne.n	8005766 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0210 	bic.w	r2, r2, #16
 8005764:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	d024      	beq.n	80057be <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005782:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	2b00      	cmp	r3, #0
 800578a:	d018      	beq.n	80057be <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	2200      	movs	r2, #0
 8005792:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe fad6 	bl	8003d4a <HAL_DMA_Abort>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00c      	beq.n	80057be <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fe fb7f 	bl	8003eac <HAL_DMA_GetError>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d104      	bne.n	80057be <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2210      	movs	r2, #16
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e00a      	b.n	80057d4 <HAL_UART_AbortReceive+0xae>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10d      	bne.n	800582e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_UART_IRQHandler+0x52>
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fac9 	bl	8005dbe <UART_Receive_IT>
      return;
 800582c:	e17b      	b.n	8005b26 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 80b1 	beq.w	8005998 <HAL_UART_IRQHandler+0x1bc>
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <HAL_UART_IRQHandler+0x70>
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 80a6 	beq.w	8005998 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_UART_IRQHandler+0x90>
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	f043 0201 	orr.w	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_UART_IRQHandler+0xb0>
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	f043 0202 	orr.w	r2, r3, #2
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_UART_IRQHandler+0xd0>
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	f043 0204 	orr.w	r2, r3, #4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00f      	beq.n	80058d6 <HAL_UART_IRQHandler+0xfa>
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d104      	bne.n	80058ca <HAL_UART_IRQHandler+0xee>
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f043 0208 	orr.w	r2, r3, #8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 811e 	beq.w	8005b1c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <HAL_UART_IRQHandler+0x11e>
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fa62 	bl	8005dbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	bf14      	ite	ne
 8005908:	2301      	movne	r3, #1
 800590a:	2300      	moveq	r3, #0
 800590c:	b2db      	uxtb	r3, r3
 800590e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d102      	bne.n	8005922 <HAL_UART_IRQHandler+0x146>
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d031      	beq.n	8005986 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f9a4 	bl	8005c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d023      	beq.n	800597e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695a      	ldr	r2, [r3, #20]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005944:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d013      	beq.n	8005976 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005952:	4a76      	ldr	r2, [pc, #472]	; (8005b2c <HAL_UART_IRQHandler+0x350>)
 8005954:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe fa30 	bl	8003dc0 <HAL_DMA_Abort_IT>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d016      	beq.n	8005994 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005970:	4610      	mov	r0, r2
 8005972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	e00e      	b.n	8005994 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f8e3 	bl	8005b42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	e00a      	b.n	8005994 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8df 	bl	8005b42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	e006      	b.n	8005994 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f8db 	bl	8005b42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005992:	e0c3      	b.n	8005b1c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005994:	bf00      	nop
    return;
 8005996:	e0c1      	b.n	8005b1c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	2b01      	cmp	r3, #1
 800599e:	f040 80a1 	bne.w	8005ae4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 809b 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8095 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d04e      	beq.n	8005a7c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80059e8:	8a3b      	ldrh	r3, [r7, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 8098 	beq.w	8005b20 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059f4:	8a3a      	ldrh	r2, [r7, #16]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	f080 8092 	bcs.w	8005b20 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8a3a      	ldrh	r2, [r7, #16]
 8005a00:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d02b      	beq.n	8005a64 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a1a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695a      	ldr	r2, [r3, #20]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0201 	bic.w	r2, r2, #1
 8005a2a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a3a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0210 	bic.w	r2, r2, #16
 8005a58:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe f973 	bl	8003d4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f86d 	bl	8005b54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a7a:	e051      	b.n	8005b20 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d047      	beq.n	8005b24 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005a94:	8a7b      	ldrh	r3, [r7, #18]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d044      	beq.n	8005b24 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005aa8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695a      	ldr	r2, [r3, #20]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0201 	bic.w	r2, r2, #1
 8005ab8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0210 	bic.w	r2, r2, #16
 8005ad6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ad8:	8a7b      	ldrh	r3, [r7, #18]
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f839 	bl	8005b54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ae2:	e01f      	b.n	8005b24 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d008      	beq.n	8005b00 <HAL_UART_IRQHandler+0x324>
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f8f9 	bl	8005cf0 <UART_Transmit_IT>
    return;
 8005afe:	e012      	b.n	8005b26 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00d      	beq.n	8005b26 <HAL_UART_IRQHandler+0x34a>
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f93a 	bl	8005d8e <UART_EndTransmit_IT>
    return;
 8005b1a:	e004      	b.n	8005b26 <HAL_UART_IRQHandler+0x34a>
    return;
 8005b1c:	bf00      	nop
 8005b1e:	e002      	b.n	8005b26 <HAL_UART_IRQHandler+0x34a>
      return;
 8005b20:	bf00      	nop
 8005b22:	e000      	b.n	8005b26 <HAL_UART_IRQHandler+0x34a>
      return;
 8005b24:	bf00      	nop
  }
}
 8005b26:	3728      	adds	r7, #40	; 0x28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	08005cc9 	.word	0x08005cc9

08005b30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr

08005b42 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr

08005b6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	603b      	str	r3, [r7, #0]
 8005b76:	4613      	mov	r3, r2
 8005b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b7a:	e02c      	b.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	d028      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8005b8a:	f7fd ffa3 	bl	8003ad4 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d21d      	bcs.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ba8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0201 	bic.w	r2, r2, #1
 8005bb8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e00f      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4013      	ands	r3, r2
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	bf0c      	ite	eq
 8005be6:	2301      	moveq	r3, #1
 8005be8:	2300      	movne	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d0c3      	beq.n	8005b7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2222      	movs	r2, #34	; 0x22
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c42:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0220 	orr.w	r2, r2, #32
 8005c62:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c86:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695a      	ldr	r2, [r3, #20]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d107      	bne.n	8005cb0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0210 	bic.w	r2, r2, #16
 8005cae:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff ff2d 	bl	8005b42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b21      	cmp	r3, #33	; 0x21
 8005d02:	d13e      	bne.n	8005d82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0c:	d114      	bne.n	8005d38 <UART_Transmit_IT+0x48>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d110      	bne.n	8005d38 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	1c9a      	adds	r2, r3, #2
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	621a      	str	r2, [r3, #32]
 8005d36:	e008      	b.n	8005d4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	1c59      	adds	r1, r3, #1
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6211      	str	r1, [r2, #32]
 8005d42:	781a      	ldrb	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	4619      	mov	r1, r3
 8005d58:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10f      	bne.n	8005d7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e000      	b.n	8005d84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d82:	2302      	movs	r3, #2
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bc80      	pop	{r7}
 8005d8c:	4770      	bx	lr

08005d8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff febe 	bl	8005b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b086      	sub	sp, #24
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b22      	cmp	r3, #34	; 0x22
 8005dd0:	f040 8099 	bne.w	8005f06 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ddc:	d117      	bne.n	8005e0e <UART_Receive_IT+0x50>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d113      	bne.n	8005e0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	1c9a      	adds	r2, r3, #2
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e0c:	e026      	b.n	8005e5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e20:	d007      	beq.n	8005e32 <UART_Receive_IT+0x74>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <UART_Receive_IT+0x82>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	e008      	b.n	8005e52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d148      	bne.n	8005f02 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0220 	bic.w	r2, r2, #32
 8005e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695a      	ldr	r2, [r3, #20]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d123      	bne.n	8005ef8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0210 	bic.w	r2, r2, #16
 8005ec4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d10a      	bne.n	8005eea <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff fe2f 	bl	8005b54 <HAL_UARTEx_RxEventCallback>
 8005ef6:	e002      	b.n	8005efe <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fa fe71 	bl	8000be0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e002      	b.n	8005f08 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e000      	b.n	8005f08 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005f06:	2302      	movs	r3, #2
  }
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f4a:	f023 030c 	bic.w	r3, r3, #12
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	430b      	orrs	r3, r1
 8005f56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2c      	ldr	r2, [pc, #176]	; (8006024 <UART_SetConfig+0x114>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d103      	bne.n	8005f80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f78:	f7fe fd28 	bl	80049cc <HAL_RCC_GetPCLK2Freq>
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	e002      	b.n	8005f86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f80:	f7fe fd10 	bl	80049a4 <HAL_RCC_GetPCLK1Freq>
 8005f84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009a      	lsls	r2, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	4a22      	ldr	r2, [pc, #136]	; (8006028 <UART_SetConfig+0x118>)
 8005f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	0119      	lsls	r1, r3, #4
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009a      	lsls	r2, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fbc:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <UART_SetConfig+0x118>)
 8005fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	2064      	movs	r0, #100	; 0x64
 8005fc6:	fb00 f303 	mul.w	r3, r0, r3
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	3332      	adds	r3, #50	; 0x32
 8005fd0:	4a15      	ldr	r2, [pc, #84]	; (8006028 <UART_SetConfig+0x118>)
 8005fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd6:	095b      	lsrs	r3, r3, #5
 8005fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fdc:	4419      	add	r1, r3
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009a      	lsls	r2, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <UART_SetConfig+0x118>)
 8005ff6:	fba3 0302 	umull	r0, r3, r3, r2
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	2064      	movs	r0, #100	; 0x64
 8005ffe:	fb00 f303 	mul.w	r3, r0, r3
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	3332      	adds	r3, #50	; 0x32
 8006008:	4a07      	ldr	r2, [pc, #28]	; (8006028 <UART_SetConfig+0x118>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	f003 020f 	and.w	r2, r3, #15
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	440a      	add	r2, r1
 800601a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40013800 	.word	0x40013800
 8006028:	51eb851f 	.word	0x51eb851f

0800602c <__errno>:
 800602c:	4b01      	ldr	r3, [pc, #4]	; (8006034 <__errno+0x8>)
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	2000000c 	.word	0x2000000c

08006038 <__libc_init_array>:
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	2600      	movs	r6, #0
 800603c:	4d0c      	ldr	r5, [pc, #48]	; (8006070 <__libc_init_array+0x38>)
 800603e:	4c0d      	ldr	r4, [pc, #52]	; (8006074 <__libc_init_array+0x3c>)
 8006040:	1b64      	subs	r4, r4, r5
 8006042:	10a4      	asrs	r4, r4, #2
 8006044:	42a6      	cmp	r6, r4
 8006046:	d109      	bne.n	800605c <__libc_init_array+0x24>
 8006048:	f000 fc5c 	bl	8006904 <_init>
 800604c:	2600      	movs	r6, #0
 800604e:	4d0a      	ldr	r5, [pc, #40]	; (8006078 <__libc_init_array+0x40>)
 8006050:	4c0a      	ldr	r4, [pc, #40]	; (800607c <__libc_init_array+0x44>)
 8006052:	1b64      	subs	r4, r4, r5
 8006054:	10a4      	asrs	r4, r4, #2
 8006056:	42a6      	cmp	r6, r4
 8006058:	d105      	bne.n	8006066 <__libc_init_array+0x2e>
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006060:	4798      	blx	r3
 8006062:	3601      	adds	r6, #1
 8006064:	e7ee      	b.n	8006044 <__libc_init_array+0xc>
 8006066:	f855 3b04 	ldr.w	r3, [r5], #4
 800606a:	4798      	blx	r3
 800606c:	3601      	adds	r6, #1
 800606e:	e7f2      	b.n	8006056 <__libc_init_array+0x1e>
 8006070:	080073dc 	.word	0x080073dc
 8006074:	080073dc 	.word	0x080073dc
 8006078:	080073dc 	.word	0x080073dc
 800607c:	080073e0 	.word	0x080073e0

08006080 <memset>:
 8006080:	4603      	mov	r3, r0
 8006082:	4402      	add	r2, r0
 8006084:	4293      	cmp	r3, r2
 8006086:	d100      	bne.n	800608a <memset+0xa>
 8006088:	4770      	bx	lr
 800608a:	f803 1b01 	strb.w	r1, [r3], #1
 800608e:	e7f9      	b.n	8006084 <memset+0x4>

08006090 <siprintf>:
 8006090:	b40e      	push	{r1, r2, r3}
 8006092:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006096:	b500      	push	{lr}
 8006098:	b09c      	sub	sp, #112	; 0x70
 800609a:	ab1d      	add	r3, sp, #116	; 0x74
 800609c:	9002      	str	r0, [sp, #8]
 800609e:	9006      	str	r0, [sp, #24]
 80060a0:	9107      	str	r1, [sp, #28]
 80060a2:	9104      	str	r1, [sp, #16]
 80060a4:	4808      	ldr	r0, [pc, #32]	; (80060c8 <siprintf+0x38>)
 80060a6:	4909      	ldr	r1, [pc, #36]	; (80060cc <siprintf+0x3c>)
 80060a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ac:	9105      	str	r1, [sp, #20]
 80060ae:	6800      	ldr	r0, [r0, #0]
 80060b0:	a902      	add	r1, sp, #8
 80060b2:	9301      	str	r3, [sp, #4]
 80060b4:	f000 f8c4 	bl	8006240 <_svfiprintf_r>
 80060b8:	2200      	movs	r2, #0
 80060ba:	9b02      	ldr	r3, [sp, #8]
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	b01c      	add	sp, #112	; 0x70
 80060c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060c4:	b003      	add	sp, #12
 80060c6:	4770      	bx	lr
 80060c8:	2000000c 	.word	0x2000000c
 80060cc:	ffff0208 	.word	0xffff0208

080060d0 <__retarget_lock_acquire_recursive>:
 80060d0:	4770      	bx	lr

080060d2 <__retarget_lock_release_recursive>:
 80060d2:	4770      	bx	lr

080060d4 <_malloc_r>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	1ccd      	adds	r5, r1, #3
 80060d8:	f025 0503 	bic.w	r5, r5, #3
 80060dc:	3508      	adds	r5, #8
 80060de:	2d0c      	cmp	r5, #12
 80060e0:	bf38      	it	cc
 80060e2:	250c      	movcc	r5, #12
 80060e4:	2d00      	cmp	r5, #0
 80060e6:	4606      	mov	r6, r0
 80060e8:	db01      	blt.n	80060ee <_malloc_r+0x1a>
 80060ea:	42a9      	cmp	r1, r5
 80060ec:	d903      	bls.n	80060f6 <_malloc_r+0x22>
 80060ee:	230c      	movs	r3, #12
 80060f0:	6033      	str	r3, [r6, #0]
 80060f2:	2000      	movs	r0, #0
 80060f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060f6:	f000 fb7f 	bl	80067f8 <__malloc_lock>
 80060fa:	4921      	ldr	r1, [pc, #132]	; (8006180 <_malloc_r+0xac>)
 80060fc:	680a      	ldr	r2, [r1, #0]
 80060fe:	4614      	mov	r4, r2
 8006100:	b99c      	cbnz	r4, 800612a <_malloc_r+0x56>
 8006102:	4f20      	ldr	r7, [pc, #128]	; (8006184 <_malloc_r+0xb0>)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	b923      	cbnz	r3, 8006112 <_malloc_r+0x3e>
 8006108:	4621      	mov	r1, r4
 800610a:	4630      	mov	r0, r6
 800610c:	f000 fb2e 	bl	800676c <_sbrk_r>
 8006110:	6038      	str	r0, [r7, #0]
 8006112:	4629      	mov	r1, r5
 8006114:	4630      	mov	r0, r6
 8006116:	f000 fb29 	bl	800676c <_sbrk_r>
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	d123      	bne.n	8006166 <_malloc_r+0x92>
 800611e:	230c      	movs	r3, #12
 8006120:	4630      	mov	r0, r6
 8006122:	6033      	str	r3, [r6, #0]
 8006124:	f000 fb6e 	bl	8006804 <__malloc_unlock>
 8006128:	e7e3      	b.n	80060f2 <_malloc_r+0x1e>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	1b5b      	subs	r3, r3, r5
 800612e:	d417      	bmi.n	8006160 <_malloc_r+0x8c>
 8006130:	2b0b      	cmp	r3, #11
 8006132:	d903      	bls.n	800613c <_malloc_r+0x68>
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	441c      	add	r4, r3
 8006138:	6025      	str	r5, [r4, #0]
 800613a:	e004      	b.n	8006146 <_malloc_r+0x72>
 800613c:	6863      	ldr	r3, [r4, #4]
 800613e:	42a2      	cmp	r2, r4
 8006140:	bf0c      	ite	eq
 8006142:	600b      	streq	r3, [r1, #0]
 8006144:	6053      	strne	r3, [r2, #4]
 8006146:	4630      	mov	r0, r6
 8006148:	f000 fb5c 	bl	8006804 <__malloc_unlock>
 800614c:	f104 000b 	add.w	r0, r4, #11
 8006150:	1d23      	adds	r3, r4, #4
 8006152:	f020 0007 	bic.w	r0, r0, #7
 8006156:	1ac2      	subs	r2, r0, r3
 8006158:	d0cc      	beq.n	80060f4 <_malloc_r+0x20>
 800615a:	1a1b      	subs	r3, r3, r0
 800615c:	50a3      	str	r3, [r4, r2]
 800615e:	e7c9      	b.n	80060f4 <_malloc_r+0x20>
 8006160:	4622      	mov	r2, r4
 8006162:	6864      	ldr	r4, [r4, #4]
 8006164:	e7cc      	b.n	8006100 <_malloc_r+0x2c>
 8006166:	1cc4      	adds	r4, r0, #3
 8006168:	f024 0403 	bic.w	r4, r4, #3
 800616c:	42a0      	cmp	r0, r4
 800616e:	d0e3      	beq.n	8006138 <_malloc_r+0x64>
 8006170:	1a21      	subs	r1, r4, r0
 8006172:	4630      	mov	r0, r6
 8006174:	f000 fafa 	bl	800676c <_sbrk_r>
 8006178:	3001      	adds	r0, #1
 800617a:	d1dd      	bne.n	8006138 <_malloc_r+0x64>
 800617c:	e7cf      	b.n	800611e <_malloc_r+0x4a>
 800617e:	bf00      	nop
 8006180:	20000494 	.word	0x20000494
 8006184:	20000498 	.word	0x20000498

08006188 <__ssputs_r>:
 8006188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	688e      	ldr	r6, [r1, #8]
 800618e:	4682      	mov	sl, r0
 8006190:	429e      	cmp	r6, r3
 8006192:	460c      	mov	r4, r1
 8006194:	4690      	mov	r8, r2
 8006196:	461f      	mov	r7, r3
 8006198:	d838      	bhi.n	800620c <__ssputs_r+0x84>
 800619a:	898a      	ldrh	r2, [r1, #12]
 800619c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061a0:	d032      	beq.n	8006208 <__ssputs_r+0x80>
 80061a2:	6825      	ldr	r5, [r4, #0]
 80061a4:	6909      	ldr	r1, [r1, #16]
 80061a6:	3301      	adds	r3, #1
 80061a8:	eba5 0901 	sub.w	r9, r5, r1
 80061ac:	6965      	ldr	r5, [r4, #20]
 80061ae:	444b      	add	r3, r9
 80061b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061b8:	106d      	asrs	r5, r5, #1
 80061ba:	429d      	cmp	r5, r3
 80061bc:	bf38      	it	cc
 80061be:	461d      	movcc	r5, r3
 80061c0:	0553      	lsls	r3, r2, #21
 80061c2:	d531      	bpl.n	8006228 <__ssputs_r+0xa0>
 80061c4:	4629      	mov	r1, r5
 80061c6:	f7ff ff85 	bl	80060d4 <_malloc_r>
 80061ca:	4606      	mov	r6, r0
 80061cc:	b950      	cbnz	r0, 80061e4 <__ssputs_r+0x5c>
 80061ce:	230c      	movs	r3, #12
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	f8ca 3000 	str.w	r3, [sl]
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061de:	81a3      	strh	r3, [r4, #12]
 80061e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e4:	464a      	mov	r2, r9
 80061e6:	6921      	ldr	r1, [r4, #16]
 80061e8:	f000 fade 	bl	80067a8 <memcpy>
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f6:	81a3      	strh	r3, [r4, #12]
 80061f8:	6126      	str	r6, [r4, #16]
 80061fa:	444e      	add	r6, r9
 80061fc:	6026      	str	r6, [r4, #0]
 80061fe:	463e      	mov	r6, r7
 8006200:	6165      	str	r5, [r4, #20]
 8006202:	eba5 0509 	sub.w	r5, r5, r9
 8006206:	60a5      	str	r5, [r4, #8]
 8006208:	42be      	cmp	r6, r7
 800620a:	d900      	bls.n	800620e <__ssputs_r+0x86>
 800620c:	463e      	mov	r6, r7
 800620e:	4632      	mov	r2, r6
 8006210:	4641      	mov	r1, r8
 8006212:	6820      	ldr	r0, [r4, #0]
 8006214:	f000 fad6 	bl	80067c4 <memmove>
 8006218:	68a3      	ldr	r3, [r4, #8]
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	1b9b      	subs	r3, r3, r6
 800621e:	4432      	add	r2, r6
 8006220:	2000      	movs	r0, #0
 8006222:	60a3      	str	r3, [r4, #8]
 8006224:	6022      	str	r2, [r4, #0]
 8006226:	e7db      	b.n	80061e0 <__ssputs_r+0x58>
 8006228:	462a      	mov	r2, r5
 800622a:	f000 fb3d 	bl	80068a8 <_realloc_r>
 800622e:	4606      	mov	r6, r0
 8006230:	2800      	cmp	r0, #0
 8006232:	d1e1      	bne.n	80061f8 <__ssputs_r+0x70>
 8006234:	4650      	mov	r0, sl
 8006236:	6921      	ldr	r1, [r4, #16]
 8006238:	f000 faea 	bl	8006810 <_free_r>
 800623c:	e7c7      	b.n	80061ce <__ssputs_r+0x46>
	...

08006240 <_svfiprintf_r>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	4698      	mov	r8, r3
 8006246:	898b      	ldrh	r3, [r1, #12]
 8006248:	4607      	mov	r7, r0
 800624a:	061b      	lsls	r3, r3, #24
 800624c:	460d      	mov	r5, r1
 800624e:	4614      	mov	r4, r2
 8006250:	b09d      	sub	sp, #116	; 0x74
 8006252:	d50e      	bpl.n	8006272 <_svfiprintf_r+0x32>
 8006254:	690b      	ldr	r3, [r1, #16]
 8006256:	b963      	cbnz	r3, 8006272 <_svfiprintf_r+0x32>
 8006258:	2140      	movs	r1, #64	; 0x40
 800625a:	f7ff ff3b 	bl	80060d4 <_malloc_r>
 800625e:	6028      	str	r0, [r5, #0]
 8006260:	6128      	str	r0, [r5, #16]
 8006262:	b920      	cbnz	r0, 800626e <_svfiprintf_r+0x2e>
 8006264:	230c      	movs	r3, #12
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	f04f 30ff 	mov.w	r0, #4294967295
 800626c:	e0d1      	b.n	8006412 <_svfiprintf_r+0x1d2>
 800626e:	2340      	movs	r3, #64	; 0x40
 8006270:	616b      	str	r3, [r5, #20]
 8006272:	2300      	movs	r3, #0
 8006274:	9309      	str	r3, [sp, #36]	; 0x24
 8006276:	2320      	movs	r3, #32
 8006278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800627c:	2330      	movs	r3, #48	; 0x30
 800627e:	f04f 0901 	mov.w	r9, #1
 8006282:	f8cd 800c 	str.w	r8, [sp, #12]
 8006286:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800642c <_svfiprintf_r+0x1ec>
 800628a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800628e:	4623      	mov	r3, r4
 8006290:	469a      	mov	sl, r3
 8006292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006296:	b10a      	cbz	r2, 800629c <_svfiprintf_r+0x5c>
 8006298:	2a25      	cmp	r2, #37	; 0x25
 800629a:	d1f9      	bne.n	8006290 <_svfiprintf_r+0x50>
 800629c:	ebba 0b04 	subs.w	fp, sl, r4
 80062a0:	d00b      	beq.n	80062ba <_svfiprintf_r+0x7a>
 80062a2:	465b      	mov	r3, fp
 80062a4:	4622      	mov	r2, r4
 80062a6:	4629      	mov	r1, r5
 80062a8:	4638      	mov	r0, r7
 80062aa:	f7ff ff6d 	bl	8006188 <__ssputs_r>
 80062ae:	3001      	adds	r0, #1
 80062b0:	f000 80aa 	beq.w	8006408 <_svfiprintf_r+0x1c8>
 80062b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062b6:	445a      	add	r2, fp
 80062b8:	9209      	str	r2, [sp, #36]	; 0x24
 80062ba:	f89a 3000 	ldrb.w	r3, [sl]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80a2 	beq.w	8006408 <_svfiprintf_r+0x1c8>
 80062c4:	2300      	movs	r3, #0
 80062c6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ce:	f10a 0a01 	add.w	sl, sl, #1
 80062d2:	9304      	str	r3, [sp, #16]
 80062d4:	9307      	str	r3, [sp, #28]
 80062d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062da:	931a      	str	r3, [sp, #104]	; 0x68
 80062dc:	4654      	mov	r4, sl
 80062de:	2205      	movs	r2, #5
 80062e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e4:	4851      	ldr	r0, [pc, #324]	; (800642c <_svfiprintf_r+0x1ec>)
 80062e6:	f000 fa51 	bl	800678c <memchr>
 80062ea:	9a04      	ldr	r2, [sp, #16]
 80062ec:	b9d8      	cbnz	r0, 8006326 <_svfiprintf_r+0xe6>
 80062ee:	06d0      	lsls	r0, r2, #27
 80062f0:	bf44      	itt	mi
 80062f2:	2320      	movmi	r3, #32
 80062f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f8:	0711      	lsls	r1, r2, #28
 80062fa:	bf44      	itt	mi
 80062fc:	232b      	movmi	r3, #43	; 0x2b
 80062fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006302:	f89a 3000 	ldrb.w	r3, [sl]
 8006306:	2b2a      	cmp	r3, #42	; 0x2a
 8006308:	d015      	beq.n	8006336 <_svfiprintf_r+0xf6>
 800630a:	4654      	mov	r4, sl
 800630c:	2000      	movs	r0, #0
 800630e:	f04f 0c0a 	mov.w	ip, #10
 8006312:	9a07      	ldr	r2, [sp, #28]
 8006314:	4621      	mov	r1, r4
 8006316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800631a:	3b30      	subs	r3, #48	; 0x30
 800631c:	2b09      	cmp	r3, #9
 800631e:	d94e      	bls.n	80063be <_svfiprintf_r+0x17e>
 8006320:	b1b0      	cbz	r0, 8006350 <_svfiprintf_r+0x110>
 8006322:	9207      	str	r2, [sp, #28]
 8006324:	e014      	b.n	8006350 <_svfiprintf_r+0x110>
 8006326:	eba0 0308 	sub.w	r3, r0, r8
 800632a:	fa09 f303 	lsl.w	r3, r9, r3
 800632e:	4313      	orrs	r3, r2
 8006330:	46a2      	mov	sl, r4
 8006332:	9304      	str	r3, [sp, #16]
 8006334:	e7d2      	b.n	80062dc <_svfiprintf_r+0x9c>
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	1d19      	adds	r1, r3, #4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	9103      	str	r1, [sp, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	bfbb      	ittet	lt
 8006342:	425b      	neglt	r3, r3
 8006344:	f042 0202 	orrlt.w	r2, r2, #2
 8006348:	9307      	strge	r3, [sp, #28]
 800634a:	9307      	strlt	r3, [sp, #28]
 800634c:	bfb8      	it	lt
 800634e:	9204      	strlt	r2, [sp, #16]
 8006350:	7823      	ldrb	r3, [r4, #0]
 8006352:	2b2e      	cmp	r3, #46	; 0x2e
 8006354:	d10c      	bne.n	8006370 <_svfiprintf_r+0x130>
 8006356:	7863      	ldrb	r3, [r4, #1]
 8006358:	2b2a      	cmp	r3, #42	; 0x2a
 800635a:	d135      	bne.n	80063c8 <_svfiprintf_r+0x188>
 800635c:	9b03      	ldr	r3, [sp, #12]
 800635e:	3402      	adds	r4, #2
 8006360:	1d1a      	adds	r2, r3, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	9203      	str	r2, [sp, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	bfb8      	it	lt
 800636a:	f04f 33ff 	movlt.w	r3, #4294967295
 800636e:	9305      	str	r3, [sp, #20]
 8006370:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800643c <_svfiprintf_r+0x1fc>
 8006374:	2203      	movs	r2, #3
 8006376:	4650      	mov	r0, sl
 8006378:	7821      	ldrb	r1, [r4, #0]
 800637a:	f000 fa07 	bl	800678c <memchr>
 800637e:	b140      	cbz	r0, 8006392 <_svfiprintf_r+0x152>
 8006380:	2340      	movs	r3, #64	; 0x40
 8006382:	eba0 000a 	sub.w	r0, r0, sl
 8006386:	fa03 f000 	lsl.w	r0, r3, r0
 800638a:	9b04      	ldr	r3, [sp, #16]
 800638c:	3401      	adds	r4, #1
 800638e:	4303      	orrs	r3, r0
 8006390:	9304      	str	r3, [sp, #16]
 8006392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006396:	2206      	movs	r2, #6
 8006398:	4825      	ldr	r0, [pc, #148]	; (8006430 <_svfiprintf_r+0x1f0>)
 800639a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800639e:	f000 f9f5 	bl	800678c <memchr>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d038      	beq.n	8006418 <_svfiprintf_r+0x1d8>
 80063a6:	4b23      	ldr	r3, [pc, #140]	; (8006434 <_svfiprintf_r+0x1f4>)
 80063a8:	bb1b      	cbnz	r3, 80063f2 <_svfiprintf_r+0x1b2>
 80063aa:	9b03      	ldr	r3, [sp, #12]
 80063ac:	3307      	adds	r3, #7
 80063ae:	f023 0307 	bic.w	r3, r3, #7
 80063b2:	3308      	adds	r3, #8
 80063b4:	9303      	str	r3, [sp, #12]
 80063b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b8:	4433      	add	r3, r6
 80063ba:	9309      	str	r3, [sp, #36]	; 0x24
 80063bc:	e767      	b.n	800628e <_svfiprintf_r+0x4e>
 80063be:	460c      	mov	r4, r1
 80063c0:	2001      	movs	r0, #1
 80063c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063c6:	e7a5      	b.n	8006314 <_svfiprintf_r+0xd4>
 80063c8:	2300      	movs	r3, #0
 80063ca:	f04f 0c0a 	mov.w	ip, #10
 80063ce:	4619      	mov	r1, r3
 80063d0:	3401      	adds	r4, #1
 80063d2:	9305      	str	r3, [sp, #20]
 80063d4:	4620      	mov	r0, r4
 80063d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063da:	3a30      	subs	r2, #48	; 0x30
 80063dc:	2a09      	cmp	r2, #9
 80063de:	d903      	bls.n	80063e8 <_svfiprintf_r+0x1a8>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0c5      	beq.n	8006370 <_svfiprintf_r+0x130>
 80063e4:	9105      	str	r1, [sp, #20]
 80063e6:	e7c3      	b.n	8006370 <_svfiprintf_r+0x130>
 80063e8:	4604      	mov	r4, r0
 80063ea:	2301      	movs	r3, #1
 80063ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80063f0:	e7f0      	b.n	80063d4 <_svfiprintf_r+0x194>
 80063f2:	ab03      	add	r3, sp, #12
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	462a      	mov	r2, r5
 80063f8:	4638      	mov	r0, r7
 80063fa:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <_svfiprintf_r+0x1f8>)
 80063fc:	a904      	add	r1, sp, #16
 80063fe:	f3af 8000 	nop.w
 8006402:	1c42      	adds	r2, r0, #1
 8006404:	4606      	mov	r6, r0
 8006406:	d1d6      	bne.n	80063b6 <_svfiprintf_r+0x176>
 8006408:	89ab      	ldrh	r3, [r5, #12]
 800640a:	065b      	lsls	r3, r3, #25
 800640c:	f53f af2c 	bmi.w	8006268 <_svfiprintf_r+0x28>
 8006410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006412:	b01d      	add	sp, #116	; 0x74
 8006414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006418:	ab03      	add	r3, sp, #12
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	462a      	mov	r2, r5
 800641e:	4638      	mov	r0, r7
 8006420:	4b05      	ldr	r3, [pc, #20]	; (8006438 <_svfiprintf_r+0x1f8>)
 8006422:	a904      	add	r1, sp, #16
 8006424:	f000 f87c 	bl	8006520 <_printf_i>
 8006428:	e7eb      	b.n	8006402 <_svfiprintf_r+0x1c2>
 800642a:	bf00      	nop
 800642c:	080073a8 	.word	0x080073a8
 8006430:	080073b2 	.word	0x080073b2
 8006434:	00000000 	.word	0x00000000
 8006438:	08006189 	.word	0x08006189
 800643c:	080073ae 	.word	0x080073ae

08006440 <_printf_common>:
 8006440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006444:	4616      	mov	r6, r2
 8006446:	4699      	mov	r9, r3
 8006448:	688a      	ldr	r2, [r1, #8]
 800644a:	690b      	ldr	r3, [r1, #16]
 800644c:	4607      	mov	r7, r0
 800644e:	4293      	cmp	r3, r2
 8006450:	bfb8      	it	lt
 8006452:	4613      	movlt	r3, r2
 8006454:	6033      	str	r3, [r6, #0]
 8006456:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800645a:	460c      	mov	r4, r1
 800645c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006460:	b10a      	cbz	r2, 8006466 <_printf_common+0x26>
 8006462:	3301      	adds	r3, #1
 8006464:	6033      	str	r3, [r6, #0]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	0699      	lsls	r1, r3, #26
 800646a:	bf42      	ittt	mi
 800646c:	6833      	ldrmi	r3, [r6, #0]
 800646e:	3302      	addmi	r3, #2
 8006470:	6033      	strmi	r3, [r6, #0]
 8006472:	6825      	ldr	r5, [r4, #0]
 8006474:	f015 0506 	ands.w	r5, r5, #6
 8006478:	d106      	bne.n	8006488 <_printf_common+0x48>
 800647a:	f104 0a19 	add.w	sl, r4, #25
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	6832      	ldr	r2, [r6, #0]
 8006482:	1a9b      	subs	r3, r3, r2
 8006484:	42ab      	cmp	r3, r5
 8006486:	dc28      	bgt.n	80064da <_printf_common+0x9a>
 8006488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800648c:	1e13      	subs	r3, r2, #0
 800648e:	6822      	ldr	r2, [r4, #0]
 8006490:	bf18      	it	ne
 8006492:	2301      	movne	r3, #1
 8006494:	0692      	lsls	r2, r2, #26
 8006496:	d42d      	bmi.n	80064f4 <_printf_common+0xb4>
 8006498:	4649      	mov	r1, r9
 800649a:	4638      	mov	r0, r7
 800649c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064a0:	47c0      	blx	r8
 80064a2:	3001      	adds	r0, #1
 80064a4:	d020      	beq.n	80064e8 <_printf_common+0xa8>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	68e5      	ldr	r5, [r4, #12]
 80064aa:	f003 0306 	and.w	r3, r3, #6
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	bf18      	it	ne
 80064b2:	2500      	movne	r5, #0
 80064b4:	6832      	ldr	r2, [r6, #0]
 80064b6:	f04f 0600 	mov.w	r6, #0
 80064ba:	68a3      	ldr	r3, [r4, #8]
 80064bc:	bf08      	it	eq
 80064be:	1aad      	subeq	r5, r5, r2
 80064c0:	6922      	ldr	r2, [r4, #16]
 80064c2:	bf08      	it	eq
 80064c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064c8:	4293      	cmp	r3, r2
 80064ca:	bfc4      	itt	gt
 80064cc:	1a9b      	subgt	r3, r3, r2
 80064ce:	18ed      	addgt	r5, r5, r3
 80064d0:	341a      	adds	r4, #26
 80064d2:	42b5      	cmp	r5, r6
 80064d4:	d11a      	bne.n	800650c <_printf_common+0xcc>
 80064d6:	2000      	movs	r0, #0
 80064d8:	e008      	b.n	80064ec <_printf_common+0xac>
 80064da:	2301      	movs	r3, #1
 80064dc:	4652      	mov	r2, sl
 80064de:	4649      	mov	r1, r9
 80064e0:	4638      	mov	r0, r7
 80064e2:	47c0      	blx	r8
 80064e4:	3001      	adds	r0, #1
 80064e6:	d103      	bne.n	80064f0 <_printf_common+0xb0>
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f0:	3501      	adds	r5, #1
 80064f2:	e7c4      	b.n	800647e <_printf_common+0x3e>
 80064f4:	2030      	movs	r0, #48	; 0x30
 80064f6:	18e1      	adds	r1, r4, r3
 80064f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006502:	4422      	add	r2, r4
 8006504:	3302      	adds	r3, #2
 8006506:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800650a:	e7c5      	b.n	8006498 <_printf_common+0x58>
 800650c:	2301      	movs	r3, #1
 800650e:	4622      	mov	r2, r4
 8006510:	4649      	mov	r1, r9
 8006512:	4638      	mov	r0, r7
 8006514:	47c0      	blx	r8
 8006516:	3001      	adds	r0, #1
 8006518:	d0e6      	beq.n	80064e8 <_printf_common+0xa8>
 800651a:	3601      	adds	r6, #1
 800651c:	e7d9      	b.n	80064d2 <_printf_common+0x92>
	...

08006520 <_printf_i>:
 8006520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006524:	460c      	mov	r4, r1
 8006526:	7e27      	ldrb	r7, [r4, #24]
 8006528:	4691      	mov	r9, r2
 800652a:	2f78      	cmp	r7, #120	; 0x78
 800652c:	4680      	mov	r8, r0
 800652e:	469a      	mov	sl, r3
 8006530:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006532:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006536:	d807      	bhi.n	8006548 <_printf_i+0x28>
 8006538:	2f62      	cmp	r7, #98	; 0x62
 800653a:	d80a      	bhi.n	8006552 <_printf_i+0x32>
 800653c:	2f00      	cmp	r7, #0
 800653e:	f000 80d9 	beq.w	80066f4 <_printf_i+0x1d4>
 8006542:	2f58      	cmp	r7, #88	; 0x58
 8006544:	f000 80a4 	beq.w	8006690 <_printf_i+0x170>
 8006548:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800654c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006550:	e03a      	b.n	80065c8 <_printf_i+0xa8>
 8006552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006556:	2b15      	cmp	r3, #21
 8006558:	d8f6      	bhi.n	8006548 <_printf_i+0x28>
 800655a:	a001      	add	r0, pc, #4	; (adr r0, 8006560 <_printf_i+0x40>)
 800655c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006560:	080065b9 	.word	0x080065b9
 8006564:	080065cd 	.word	0x080065cd
 8006568:	08006549 	.word	0x08006549
 800656c:	08006549 	.word	0x08006549
 8006570:	08006549 	.word	0x08006549
 8006574:	08006549 	.word	0x08006549
 8006578:	080065cd 	.word	0x080065cd
 800657c:	08006549 	.word	0x08006549
 8006580:	08006549 	.word	0x08006549
 8006584:	08006549 	.word	0x08006549
 8006588:	08006549 	.word	0x08006549
 800658c:	080066db 	.word	0x080066db
 8006590:	080065fd 	.word	0x080065fd
 8006594:	080066bd 	.word	0x080066bd
 8006598:	08006549 	.word	0x08006549
 800659c:	08006549 	.word	0x08006549
 80065a0:	080066fd 	.word	0x080066fd
 80065a4:	08006549 	.word	0x08006549
 80065a8:	080065fd 	.word	0x080065fd
 80065ac:	08006549 	.word	0x08006549
 80065b0:	08006549 	.word	0x08006549
 80065b4:	080066c5 	.word	0x080066c5
 80065b8:	680b      	ldr	r3, [r1, #0]
 80065ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065be:	1d1a      	adds	r2, r3, #4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	600a      	str	r2, [r1, #0]
 80065c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0a4      	b.n	8006716 <_printf_i+0x1f6>
 80065cc:	6825      	ldr	r5, [r4, #0]
 80065ce:	6808      	ldr	r0, [r1, #0]
 80065d0:	062e      	lsls	r6, r5, #24
 80065d2:	f100 0304 	add.w	r3, r0, #4
 80065d6:	d50a      	bpl.n	80065ee <_printf_i+0xce>
 80065d8:	6805      	ldr	r5, [r0, #0]
 80065da:	600b      	str	r3, [r1, #0]
 80065dc:	2d00      	cmp	r5, #0
 80065de:	da03      	bge.n	80065e8 <_printf_i+0xc8>
 80065e0:	232d      	movs	r3, #45	; 0x2d
 80065e2:	426d      	negs	r5, r5
 80065e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e8:	230a      	movs	r3, #10
 80065ea:	485e      	ldr	r0, [pc, #376]	; (8006764 <_printf_i+0x244>)
 80065ec:	e019      	b.n	8006622 <_printf_i+0x102>
 80065ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80065f2:	6805      	ldr	r5, [r0, #0]
 80065f4:	600b      	str	r3, [r1, #0]
 80065f6:	bf18      	it	ne
 80065f8:	b22d      	sxthne	r5, r5
 80065fa:	e7ef      	b.n	80065dc <_printf_i+0xbc>
 80065fc:	680b      	ldr	r3, [r1, #0]
 80065fe:	6825      	ldr	r5, [r4, #0]
 8006600:	1d18      	adds	r0, r3, #4
 8006602:	6008      	str	r0, [r1, #0]
 8006604:	0628      	lsls	r0, r5, #24
 8006606:	d501      	bpl.n	800660c <_printf_i+0xec>
 8006608:	681d      	ldr	r5, [r3, #0]
 800660a:	e002      	b.n	8006612 <_printf_i+0xf2>
 800660c:	0669      	lsls	r1, r5, #25
 800660e:	d5fb      	bpl.n	8006608 <_printf_i+0xe8>
 8006610:	881d      	ldrh	r5, [r3, #0]
 8006612:	2f6f      	cmp	r7, #111	; 0x6f
 8006614:	bf0c      	ite	eq
 8006616:	2308      	moveq	r3, #8
 8006618:	230a      	movne	r3, #10
 800661a:	4852      	ldr	r0, [pc, #328]	; (8006764 <_printf_i+0x244>)
 800661c:	2100      	movs	r1, #0
 800661e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006622:	6866      	ldr	r6, [r4, #4]
 8006624:	2e00      	cmp	r6, #0
 8006626:	bfa8      	it	ge
 8006628:	6821      	ldrge	r1, [r4, #0]
 800662a:	60a6      	str	r6, [r4, #8]
 800662c:	bfa4      	itt	ge
 800662e:	f021 0104 	bicge.w	r1, r1, #4
 8006632:	6021      	strge	r1, [r4, #0]
 8006634:	b90d      	cbnz	r5, 800663a <_printf_i+0x11a>
 8006636:	2e00      	cmp	r6, #0
 8006638:	d04d      	beq.n	80066d6 <_printf_i+0x1b6>
 800663a:	4616      	mov	r6, r2
 800663c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006640:	fb03 5711 	mls	r7, r3, r1, r5
 8006644:	5dc7      	ldrb	r7, [r0, r7]
 8006646:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800664a:	462f      	mov	r7, r5
 800664c:	42bb      	cmp	r3, r7
 800664e:	460d      	mov	r5, r1
 8006650:	d9f4      	bls.n	800663c <_printf_i+0x11c>
 8006652:	2b08      	cmp	r3, #8
 8006654:	d10b      	bne.n	800666e <_printf_i+0x14e>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	07df      	lsls	r7, r3, #31
 800665a:	d508      	bpl.n	800666e <_printf_i+0x14e>
 800665c:	6923      	ldr	r3, [r4, #16]
 800665e:	6861      	ldr	r1, [r4, #4]
 8006660:	4299      	cmp	r1, r3
 8006662:	bfde      	ittt	le
 8006664:	2330      	movle	r3, #48	; 0x30
 8006666:	f806 3c01 	strble.w	r3, [r6, #-1]
 800666a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800666e:	1b92      	subs	r2, r2, r6
 8006670:	6122      	str	r2, [r4, #16]
 8006672:	464b      	mov	r3, r9
 8006674:	4621      	mov	r1, r4
 8006676:	4640      	mov	r0, r8
 8006678:	f8cd a000 	str.w	sl, [sp]
 800667c:	aa03      	add	r2, sp, #12
 800667e:	f7ff fedf 	bl	8006440 <_printf_common>
 8006682:	3001      	adds	r0, #1
 8006684:	d14c      	bne.n	8006720 <_printf_i+0x200>
 8006686:	f04f 30ff 	mov.w	r0, #4294967295
 800668a:	b004      	add	sp, #16
 800668c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006690:	4834      	ldr	r0, [pc, #208]	; (8006764 <_printf_i+0x244>)
 8006692:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006696:	680e      	ldr	r6, [r1, #0]
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	f856 5b04 	ldr.w	r5, [r6], #4
 800669e:	061f      	lsls	r7, r3, #24
 80066a0:	600e      	str	r6, [r1, #0]
 80066a2:	d514      	bpl.n	80066ce <_printf_i+0x1ae>
 80066a4:	07d9      	lsls	r1, r3, #31
 80066a6:	bf44      	itt	mi
 80066a8:	f043 0320 	orrmi.w	r3, r3, #32
 80066ac:	6023      	strmi	r3, [r4, #0]
 80066ae:	b91d      	cbnz	r5, 80066b8 <_printf_i+0x198>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	f023 0320 	bic.w	r3, r3, #32
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	2310      	movs	r3, #16
 80066ba:	e7af      	b.n	800661c <_printf_i+0xfc>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	f043 0320 	orr.w	r3, r3, #32
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	2378      	movs	r3, #120	; 0x78
 80066c6:	4828      	ldr	r0, [pc, #160]	; (8006768 <_printf_i+0x248>)
 80066c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066cc:	e7e3      	b.n	8006696 <_printf_i+0x176>
 80066ce:	065e      	lsls	r6, r3, #25
 80066d0:	bf48      	it	mi
 80066d2:	b2ad      	uxthmi	r5, r5
 80066d4:	e7e6      	b.n	80066a4 <_printf_i+0x184>
 80066d6:	4616      	mov	r6, r2
 80066d8:	e7bb      	b.n	8006652 <_printf_i+0x132>
 80066da:	680b      	ldr	r3, [r1, #0]
 80066dc:	6826      	ldr	r6, [r4, #0]
 80066de:	1d1d      	adds	r5, r3, #4
 80066e0:	6960      	ldr	r0, [r4, #20]
 80066e2:	600d      	str	r5, [r1, #0]
 80066e4:	0635      	lsls	r5, r6, #24
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	d501      	bpl.n	80066ee <_printf_i+0x1ce>
 80066ea:	6018      	str	r0, [r3, #0]
 80066ec:	e002      	b.n	80066f4 <_printf_i+0x1d4>
 80066ee:	0671      	lsls	r1, r6, #25
 80066f0:	d5fb      	bpl.n	80066ea <_printf_i+0x1ca>
 80066f2:	8018      	strh	r0, [r3, #0]
 80066f4:	2300      	movs	r3, #0
 80066f6:	4616      	mov	r6, r2
 80066f8:	6123      	str	r3, [r4, #16]
 80066fa:	e7ba      	b.n	8006672 <_printf_i+0x152>
 80066fc:	680b      	ldr	r3, [r1, #0]
 80066fe:	1d1a      	adds	r2, r3, #4
 8006700:	600a      	str	r2, [r1, #0]
 8006702:	681e      	ldr	r6, [r3, #0]
 8006704:	2100      	movs	r1, #0
 8006706:	4630      	mov	r0, r6
 8006708:	6862      	ldr	r2, [r4, #4]
 800670a:	f000 f83f 	bl	800678c <memchr>
 800670e:	b108      	cbz	r0, 8006714 <_printf_i+0x1f4>
 8006710:	1b80      	subs	r0, r0, r6
 8006712:	6060      	str	r0, [r4, #4]
 8006714:	6863      	ldr	r3, [r4, #4]
 8006716:	6123      	str	r3, [r4, #16]
 8006718:	2300      	movs	r3, #0
 800671a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800671e:	e7a8      	b.n	8006672 <_printf_i+0x152>
 8006720:	4632      	mov	r2, r6
 8006722:	4649      	mov	r1, r9
 8006724:	4640      	mov	r0, r8
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	47d0      	blx	sl
 800672a:	3001      	adds	r0, #1
 800672c:	d0ab      	beq.n	8006686 <_printf_i+0x166>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	079b      	lsls	r3, r3, #30
 8006732:	d413      	bmi.n	800675c <_printf_i+0x23c>
 8006734:	68e0      	ldr	r0, [r4, #12]
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	4298      	cmp	r0, r3
 800673a:	bfb8      	it	lt
 800673c:	4618      	movlt	r0, r3
 800673e:	e7a4      	b.n	800668a <_printf_i+0x16a>
 8006740:	2301      	movs	r3, #1
 8006742:	4632      	mov	r2, r6
 8006744:	4649      	mov	r1, r9
 8006746:	4640      	mov	r0, r8
 8006748:	47d0      	blx	sl
 800674a:	3001      	adds	r0, #1
 800674c:	d09b      	beq.n	8006686 <_printf_i+0x166>
 800674e:	3501      	adds	r5, #1
 8006750:	68e3      	ldr	r3, [r4, #12]
 8006752:	9903      	ldr	r1, [sp, #12]
 8006754:	1a5b      	subs	r3, r3, r1
 8006756:	42ab      	cmp	r3, r5
 8006758:	dcf2      	bgt.n	8006740 <_printf_i+0x220>
 800675a:	e7eb      	b.n	8006734 <_printf_i+0x214>
 800675c:	2500      	movs	r5, #0
 800675e:	f104 0619 	add.w	r6, r4, #25
 8006762:	e7f5      	b.n	8006750 <_printf_i+0x230>
 8006764:	080073b9 	.word	0x080073b9
 8006768:	080073ca 	.word	0x080073ca

0800676c <_sbrk_r>:
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	2300      	movs	r3, #0
 8006770:	4d05      	ldr	r5, [pc, #20]	; (8006788 <_sbrk_r+0x1c>)
 8006772:	4604      	mov	r4, r0
 8006774:	4608      	mov	r0, r1
 8006776:	602b      	str	r3, [r5, #0]
 8006778:	f7fa ff10 	bl	800159c <_sbrk>
 800677c:	1c43      	adds	r3, r0, #1
 800677e:	d102      	bne.n	8006786 <_sbrk_r+0x1a>
 8006780:	682b      	ldr	r3, [r5, #0]
 8006782:	b103      	cbz	r3, 8006786 <_sbrk_r+0x1a>
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	bd38      	pop	{r3, r4, r5, pc}
 8006788:	20001a0c 	.word	0x20001a0c

0800678c <memchr>:
 800678c:	4603      	mov	r3, r0
 800678e:	b510      	push	{r4, lr}
 8006790:	b2c9      	uxtb	r1, r1
 8006792:	4402      	add	r2, r0
 8006794:	4293      	cmp	r3, r2
 8006796:	4618      	mov	r0, r3
 8006798:	d101      	bne.n	800679e <memchr+0x12>
 800679a:	2000      	movs	r0, #0
 800679c:	e003      	b.n	80067a6 <memchr+0x1a>
 800679e:	7804      	ldrb	r4, [r0, #0]
 80067a0:	3301      	adds	r3, #1
 80067a2:	428c      	cmp	r4, r1
 80067a4:	d1f6      	bne.n	8006794 <memchr+0x8>
 80067a6:	bd10      	pop	{r4, pc}

080067a8 <memcpy>:
 80067a8:	440a      	add	r2, r1
 80067aa:	4291      	cmp	r1, r2
 80067ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80067b0:	d100      	bne.n	80067b4 <memcpy+0xc>
 80067b2:	4770      	bx	lr
 80067b4:	b510      	push	{r4, lr}
 80067b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ba:	4291      	cmp	r1, r2
 80067bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067c0:	d1f9      	bne.n	80067b6 <memcpy+0xe>
 80067c2:	bd10      	pop	{r4, pc}

080067c4 <memmove>:
 80067c4:	4288      	cmp	r0, r1
 80067c6:	b510      	push	{r4, lr}
 80067c8:	eb01 0402 	add.w	r4, r1, r2
 80067cc:	d902      	bls.n	80067d4 <memmove+0x10>
 80067ce:	4284      	cmp	r4, r0
 80067d0:	4623      	mov	r3, r4
 80067d2:	d807      	bhi.n	80067e4 <memmove+0x20>
 80067d4:	1e43      	subs	r3, r0, #1
 80067d6:	42a1      	cmp	r1, r4
 80067d8:	d008      	beq.n	80067ec <memmove+0x28>
 80067da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067e2:	e7f8      	b.n	80067d6 <memmove+0x12>
 80067e4:	4601      	mov	r1, r0
 80067e6:	4402      	add	r2, r0
 80067e8:	428a      	cmp	r2, r1
 80067ea:	d100      	bne.n	80067ee <memmove+0x2a>
 80067ec:	bd10      	pop	{r4, pc}
 80067ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067f6:	e7f7      	b.n	80067e8 <memmove+0x24>

080067f8 <__malloc_lock>:
 80067f8:	4801      	ldr	r0, [pc, #4]	; (8006800 <__malloc_lock+0x8>)
 80067fa:	f7ff bc69 	b.w	80060d0 <__retarget_lock_acquire_recursive>
 80067fe:	bf00      	nop
 8006800:	20001a00 	.word	0x20001a00

08006804 <__malloc_unlock>:
 8006804:	4801      	ldr	r0, [pc, #4]	; (800680c <__malloc_unlock+0x8>)
 8006806:	f7ff bc64 	b.w	80060d2 <__retarget_lock_release_recursive>
 800680a:	bf00      	nop
 800680c:	20001a00 	.word	0x20001a00

08006810 <_free_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4605      	mov	r5, r0
 8006814:	2900      	cmp	r1, #0
 8006816:	d043      	beq.n	80068a0 <_free_r+0x90>
 8006818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800681c:	1f0c      	subs	r4, r1, #4
 800681e:	2b00      	cmp	r3, #0
 8006820:	bfb8      	it	lt
 8006822:	18e4      	addlt	r4, r4, r3
 8006824:	f7ff ffe8 	bl	80067f8 <__malloc_lock>
 8006828:	4a1e      	ldr	r2, [pc, #120]	; (80068a4 <_free_r+0x94>)
 800682a:	6813      	ldr	r3, [r2, #0]
 800682c:	4610      	mov	r0, r2
 800682e:	b933      	cbnz	r3, 800683e <_free_r+0x2e>
 8006830:	6063      	str	r3, [r4, #4]
 8006832:	6014      	str	r4, [r2, #0]
 8006834:	4628      	mov	r0, r5
 8006836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800683a:	f7ff bfe3 	b.w	8006804 <__malloc_unlock>
 800683e:	42a3      	cmp	r3, r4
 8006840:	d90a      	bls.n	8006858 <_free_r+0x48>
 8006842:	6821      	ldr	r1, [r4, #0]
 8006844:	1862      	adds	r2, r4, r1
 8006846:	4293      	cmp	r3, r2
 8006848:	bf01      	itttt	eq
 800684a:	681a      	ldreq	r2, [r3, #0]
 800684c:	685b      	ldreq	r3, [r3, #4]
 800684e:	1852      	addeq	r2, r2, r1
 8006850:	6022      	streq	r2, [r4, #0]
 8006852:	6063      	str	r3, [r4, #4]
 8006854:	6004      	str	r4, [r0, #0]
 8006856:	e7ed      	b.n	8006834 <_free_r+0x24>
 8006858:	461a      	mov	r2, r3
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	b10b      	cbz	r3, 8006862 <_free_r+0x52>
 800685e:	42a3      	cmp	r3, r4
 8006860:	d9fa      	bls.n	8006858 <_free_r+0x48>
 8006862:	6811      	ldr	r1, [r2, #0]
 8006864:	1850      	adds	r0, r2, r1
 8006866:	42a0      	cmp	r0, r4
 8006868:	d10b      	bne.n	8006882 <_free_r+0x72>
 800686a:	6820      	ldr	r0, [r4, #0]
 800686c:	4401      	add	r1, r0
 800686e:	1850      	adds	r0, r2, r1
 8006870:	4283      	cmp	r3, r0
 8006872:	6011      	str	r1, [r2, #0]
 8006874:	d1de      	bne.n	8006834 <_free_r+0x24>
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	4401      	add	r1, r0
 800687c:	6011      	str	r1, [r2, #0]
 800687e:	6053      	str	r3, [r2, #4]
 8006880:	e7d8      	b.n	8006834 <_free_r+0x24>
 8006882:	d902      	bls.n	800688a <_free_r+0x7a>
 8006884:	230c      	movs	r3, #12
 8006886:	602b      	str	r3, [r5, #0]
 8006888:	e7d4      	b.n	8006834 <_free_r+0x24>
 800688a:	6820      	ldr	r0, [r4, #0]
 800688c:	1821      	adds	r1, r4, r0
 800688e:	428b      	cmp	r3, r1
 8006890:	bf01      	itttt	eq
 8006892:	6819      	ldreq	r1, [r3, #0]
 8006894:	685b      	ldreq	r3, [r3, #4]
 8006896:	1809      	addeq	r1, r1, r0
 8006898:	6021      	streq	r1, [r4, #0]
 800689a:	6063      	str	r3, [r4, #4]
 800689c:	6054      	str	r4, [r2, #4]
 800689e:	e7c9      	b.n	8006834 <_free_r+0x24>
 80068a0:	bd38      	pop	{r3, r4, r5, pc}
 80068a2:	bf00      	nop
 80068a4:	20000494 	.word	0x20000494

080068a8 <_realloc_r>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	4607      	mov	r7, r0
 80068ac:	4614      	mov	r4, r2
 80068ae:	460e      	mov	r6, r1
 80068b0:	b921      	cbnz	r1, 80068bc <_realloc_r+0x14>
 80068b2:	4611      	mov	r1, r2
 80068b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068b8:	f7ff bc0c 	b.w	80060d4 <_malloc_r>
 80068bc:	b922      	cbnz	r2, 80068c8 <_realloc_r+0x20>
 80068be:	f7ff ffa7 	bl	8006810 <_free_r>
 80068c2:	4625      	mov	r5, r4
 80068c4:	4628      	mov	r0, r5
 80068c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c8:	f000 f814 	bl	80068f4 <_malloc_usable_size_r>
 80068cc:	42a0      	cmp	r0, r4
 80068ce:	d20f      	bcs.n	80068f0 <_realloc_r+0x48>
 80068d0:	4621      	mov	r1, r4
 80068d2:	4638      	mov	r0, r7
 80068d4:	f7ff fbfe 	bl	80060d4 <_malloc_r>
 80068d8:	4605      	mov	r5, r0
 80068da:	2800      	cmp	r0, #0
 80068dc:	d0f2      	beq.n	80068c4 <_realloc_r+0x1c>
 80068de:	4631      	mov	r1, r6
 80068e0:	4622      	mov	r2, r4
 80068e2:	f7ff ff61 	bl	80067a8 <memcpy>
 80068e6:	4631      	mov	r1, r6
 80068e8:	4638      	mov	r0, r7
 80068ea:	f7ff ff91 	bl	8006810 <_free_r>
 80068ee:	e7e9      	b.n	80068c4 <_realloc_r+0x1c>
 80068f0:	4635      	mov	r5, r6
 80068f2:	e7e7      	b.n	80068c4 <_realloc_r+0x1c>

080068f4 <_malloc_usable_size_r>:
 80068f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f8:	1f18      	subs	r0, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bfbc      	itt	lt
 80068fe:	580b      	ldrlt	r3, [r1, r0]
 8006900:	18c0      	addlt	r0, r0, r3
 8006902:	4770      	bx	lr

08006904 <_init>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	bf00      	nop
 8006908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690a:	bc08      	pop	{r3}
 800690c:	469e      	mov	lr, r3
 800690e:	4770      	bx	lr

08006910 <_fini>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	bf00      	nop
 8006914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006916:	bc08      	pop	{r3}
 8006918:	469e      	mov	lr, r3
 800691a:	4770      	bx	lr
