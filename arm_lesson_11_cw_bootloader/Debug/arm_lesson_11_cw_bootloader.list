
arm_lesson_11_cw_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002648  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080027e0  080027e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027f8  080027f8  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002800  08002800  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002800  08002800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002804  08002804  00012804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000058  08002860  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002860  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bd8  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f6  00000000  00000000  00028c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0002a458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014bd1  00000000  00000000  0002b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008deb  00000000  00000000  0003fe91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f15  00000000  00000000  00048c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cab91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d74  00000000  00000000  000cabe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000058 	.word	0x20000058
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080027c8 	.word	0x080027c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000005c 	.word	0x2000005c
 80001d4:	080027c8 	.word	0x080027c8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fcbf 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 faa7 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 fb39 	bl	8000b54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 fb0d 	bl	8000b00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



	if(flagFwUpdate){	//если нужно обновиться
 80004e6:	4b67      	ldr	r3, [pc, #412]	; (8000684 <main+0x1b4>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	f000 828c 	beq.w	8000a08 <main+0x538>

		HAL_FLASH_Unlock();	//разблокируем флэш память перед стиранием
 80004f0:	f000 fe82 	bl	80011f8 <HAL_FLASH_Unlock>

		  static FLASH_EraseInitTypeDef EraseInitStruct;
		  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS;
 80004f4:	4b64      	ldr	r3, [pc, #400]	; (8000688 <main+0x1b8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
		  EraseInitStruct.Sector = FLASH_SECTOR_3;
 80004fa:	4b63      	ldr	r3, [pc, #396]	; (8000688 <main+0x1b8>)
 80004fc:	2203      	movs	r2, #3
 80004fe:	609a      	str	r2, [r3, #8]
		  EraseInitStruct.NbSectors = 1;
 8000500:	4b61      	ldr	r3, [pc, #388]	; (8000688 <main+0x1b8>)
 8000502:	2201      	movs	r2, #1
 8000504:	60da      	str	r2, [r3, #12]
		  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000506:	4b60      	ldr	r3, [pc, #384]	; (8000688 <main+0x1b8>)
 8000508:	2202      	movs	r2, #2
 800050a:	611a      	str	r2, [r3, #16]

		  if (HAL_FLASHEx_Erase(&EraseInitStruct, &flash_page_error) == HAL_OK)	// если удачно стёрли ...
 800050c:	495f      	ldr	r1, [pc, #380]	; (800068c <main+0x1bc>)
 800050e:	485e      	ldr	r0, [pc, #376]	; (8000688 <main+0x1b8>)
 8000510:	f000 ffe4 	bl	80014dc <HAL_FLASHEx_Erase>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10f      	bne.n	800053a <main+0x6a>
		     {
			  	// мигнём светодиодом
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2120      	movs	r1, #32
 800051e:	485c      	ldr	r0, [pc, #368]	; (8000690 <main+0x1c0>)
 8000520:	f001 fa82 	bl	8001a28 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000524:	2064      	movs	r0, #100	; 0x64
 8000526:	f000 fd09 	bl	8000f3c <HAL_Delay>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2120      	movs	r1, #32
 800052e:	4858      	ldr	r0, [pc, #352]	; (8000690 <main+0x1c0>)
 8000530:	f001 fa7a 	bl	8001a28 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000534:	2064      	movs	r0, #100	; 0x64
 8000536:	f000 fd01 	bl	8000f3c <HAL_Delay>
		     }
		  HAL_FLASH_Lock(); // заблокируем флэш память
 800053a:	f000 fe7f 	bl	800123c <HAL_FLASH_Lock>


		while (!flagFwEof) {		// пока не конец файла
 800053e:	e25b      	b.n	80009f8 <main+0x528>

			if (fwBuff[fwBuff_count] == ':') {		// если найден признак начала строки
 8000540:	4b54      	ldr	r3, [pc, #336]	; (8000694 <main+0x1c4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a54      	ldr	r2, [pc, #336]	; (8000698 <main+0x1c8>)
 8000546:	5cd3      	ldrb	r3, [r2, r3]
 8000548:	2b3a      	cmp	r3, #58	; 0x3a
 800054a:	f040 8254 	bne.w	80009f6 <main+0x526>

				fwBuff_count++;
 800054e:	4b51      	ldr	r3, [pc, #324]	; (8000694 <main+0x1c4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	4a4f      	ldr	r2, [pc, #316]	; (8000694 <main+0x1c4>)
 8000556:	6013      	str	r3, [r2, #0]

				for (i = 0; i < 8; i++, fwBuff_count++) {	//считываем 8 первых симовлов с полем длинны,адреса и типа
 8000558:	4b50      	ldr	r3, [pc, #320]	; (800069c <main+0x1cc>)
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	e011      	b.n	8000584 <main+0xb4>
					tempFwBuff[i] = fwBuff[fwBuff_count];
 8000560:	4b4c      	ldr	r3, [pc, #304]	; (8000694 <main+0x1c4>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b4d      	ldr	r3, [pc, #308]	; (800069c <main+0x1cc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	494b      	ldr	r1, [pc, #300]	; (8000698 <main+0x1c8>)
 800056a:	5c89      	ldrb	r1, [r1, r2]
 800056c:	4a4c      	ldr	r2, [pc, #304]	; (80006a0 <main+0x1d0>)
 800056e:	54d1      	strb	r1, [r2, r3]
				for (i = 0; i < 8; i++, fwBuff_count++) {	//считываем 8 первых симовлов с полем длинны,адреса и типа
 8000570:	4b4a      	ldr	r3, [pc, #296]	; (800069c <main+0x1cc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	4a49      	ldr	r2, [pc, #292]	; (800069c <main+0x1cc>)
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	4b46      	ldr	r3, [pc, #280]	; (8000694 <main+0x1c4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	4a44      	ldr	r2, [pc, #272]	; (8000694 <main+0x1c4>)
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b45      	ldr	r3, [pc, #276]	; (800069c <main+0x1cc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b07      	cmp	r3, #7
 800058a:	d9e9      	bls.n	8000560 <main+0x90>
				}

				Char_To_Hex(tempFwBuff, 8);	// конвертируем символы в хекс
 800058c:	2108      	movs	r1, #8
 800058e:	4844      	ldr	r0, [pc, #272]	; (80006a0 <main+0x1d0>)
 8000590:	f000 fb4e 	bl	8000c30 <Char_To_Hex>

				fwIhexData.size_data = 2 * (tempFwBuff[1] + 16 * tempFwBuff[0]); //находим размер данных
 8000594:	4b42      	ldr	r3, [pc, #264]	; (80006a0 <main+0x1d0>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	461a      	mov	r2, r3
 800059a:	4b41      	ldr	r3, [pc, #260]	; (80006a0 <main+0x1d0>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	011b      	lsls	r3, r3, #4
 80005a0:	4413      	add	r3, r2
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b3e      	ldr	r3, [pc, #248]	; (80006a4 <main+0x1d4>)
 80005aa:	711a      	strb	r2, [r3, #4]
				fwIhexData.address_data = tempFwBuff[5] + 16 * tempFwBuff[4] + 256 * tempFwBuff[3] + 4096 * tempFwBuff[2]; //адрес
 80005ac:	4b3c      	ldr	r3, [pc, #240]	; (80006a0 <main+0x1d0>)
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	4b3b      	ldr	r3, [pc, #236]	; (80006a0 <main+0x1d0>)
 80005b4:	78db      	ldrb	r3, [r3, #3]
 80005b6:	b299      	uxth	r1, r3
 80005b8:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <main+0x1d0>)
 80005ba:	789b      	ldrb	r3, [r3, #2]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	440b      	add	r3, r1
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	011b      	lsls	r3, r3, #4
 80005c8:	b299      	uxth	r1, r3
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <main+0x1d0>)
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	440b      	add	r3, r1
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4413      	add	r3, r2
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <main+0x1d4>)
 80005de:	811a      	strh	r2, [r3, #8]

				fwIhexData.type_data = tempFwBuff[7] + 16 * tempFwBuff[6]; //тип данных
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <main+0x1d0>)
 80005e2:	79da      	ldrb	r2, [r3, #7]
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <main+0x1d0>)
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	4413      	add	r3, r2
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <main+0x1d4>)
 80005f2:	715a      	strb	r2, [r3, #5]
				calculation_check_sum = fwIhexData.size_data / 2 + (uint8_t) fwIhexData.address_data + (uint8_t) (fwIhexData.address_data >> 8)	+ fwIhexData.type_data; //считаем часть контрольной суммы
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <main+0x1d4>)
 80005f6:	791b      	ldrb	r3, [r3, #4]
 80005f8:	085b      	lsrs	r3, r3, #1
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <main+0x1d4>)
 80005fe:	891b      	ldrh	r3, [r3, #8]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4413      	add	r3, r2
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <main+0x1d4>)
 8000608:	891b      	ldrh	r3, [r3, #8]
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	b29b      	uxth	r3, r3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	4413      	add	r3, r2
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <main+0x1d4>)
 8000616:	795b      	ldrb	r3, [r3, #5]
 8000618:	4413      	add	r3, r2
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <main+0x1d8>)
 800061e:	701a      	strb	r2, [r3, #0]

				switch (fwIhexData.type_data) {
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <main+0x1d4>)
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	2b04      	cmp	r3, #4
 8000626:	f000 814f 	beq.w	80008c8 <main+0x3f8>
 800062a:	2b04      	cmp	r3, #4
 800062c:	f300 81e4 	bgt.w	80009f8 <main+0x528>
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 809a 	beq.w	800076a <main+0x29a>
 8000636:	2b01      	cmp	r3, #1
 8000638:	f000 8108 	beq.w	800084c <main+0x37c>
 800063c:	e1da      	b.n	80009f4 <main+0x524>

				case 0x00:	//данные

					while (fwIhexData.size_data > 0) {  //пока не считаем все данные...

						for (i = 0; i < 8; i++, fwBuff_count++) { // считываем 8 символов во временный буфер
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <main+0x1cc>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	e011      	b.n	800066a <main+0x19a>

							tempFwBuff[i] = fwBuff[fwBuff_count];
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <main+0x1c4>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <main+0x1cc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4912      	ldr	r1, [pc, #72]	; (8000698 <main+0x1c8>)
 8000650:	5c89      	ldrb	r1, [r1, r2]
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <main+0x1d0>)
 8000654:	54d1      	strb	r1, [r2, r3]
						for (i = 0; i < 8; i++, fwBuff_count++) { // считываем 8 символов во временный буфер
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <main+0x1cc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	4a0f      	ldr	r2, [pc, #60]	; (800069c <main+0x1cc>)
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <main+0x1c4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <main+0x1c4>)
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <main+0x1cc>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b07      	cmp	r3, #7
 8000670:	d9e9      	bls.n	8000646 <main+0x176>
						}

						Char_To_Hex(tempFwBuff, 8);	// конвертируем символы в хекс
 8000672:	2108      	movs	r1, #8
 8000674:	480a      	ldr	r0, [pc, #40]	; (80006a0 <main+0x1d0>)
 8000676:	f000 fadb 	bl	8000c30 <Char_To_Hex>

						for (i = 0; i < 8; i = i + 2) {	//формируем 32-битное слово(4 байта) для записи во флэш
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <main+0x1cc>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	e041      	b.n	8000706 <main+0x236>
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000
 8000688:	20000098 	.word	0x20000098
 800068c:	2000010c 	.word	0x2000010c
 8000690:	40020000 	.word	0x40020000
 8000694:	20000078 	.word	0x20000078
 8000698:	20000004 	.word	0x20000004
 800069c:	200000b0 	.word	0x200000b0
 80006a0:	20000080 	.word	0x20000080
 80006a4:	200000fc 	.word	0x200000fc
 80006a8:	20000074 	.word	0x20000074

							tempFwBuff[i] <<= 4;
 80006ac:	4b88      	ldr	r3, [pc, #544]	; (80008d0 <main+0x400>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a88      	ldr	r2, [pc, #544]	; (80008d4 <main+0x404>)
 80006b2:	5cd2      	ldrb	r2, [r2, r3]
 80006b4:	4b86      	ldr	r3, [pc, #536]	; (80008d0 <main+0x400>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d1      	uxtb	r1, r2
 80006bc:	4a85      	ldr	r2, [pc, #532]	; (80008d4 <main+0x404>)
 80006be:	54d1      	strb	r1, [r2, r3]
							tempFwBuff[i] = tempFwBuff[i] | tempFwBuff[i + 1];
 80006c0:	4b83      	ldr	r3, [pc, #524]	; (80008d0 <main+0x400>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a83      	ldr	r2, [pc, #524]	; (80008d4 <main+0x404>)
 80006c6:	5cd1      	ldrb	r1, [r2, r3]
 80006c8:	4b81      	ldr	r3, [pc, #516]	; (80008d0 <main+0x400>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	4a81      	ldr	r2, [pc, #516]	; (80008d4 <main+0x404>)
 80006d0:	5cd2      	ldrb	r2, [r2, r3]
 80006d2:	4b7f      	ldr	r3, [pc, #508]	; (80008d0 <main+0x400>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	430a      	orrs	r2, r1
 80006d8:	b2d1      	uxtb	r1, r2
 80006da:	4a7e      	ldr	r2, [pc, #504]	; (80008d4 <main+0x404>)
 80006dc:	54d1      	strb	r1, [r2, r3]
							fwIhexData.program_data |= tempFwBuff[i] << (i * 4);
 80006de:	4b7e      	ldr	r3, [pc, #504]	; (80008d8 <main+0x408>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	4a7b      	ldr	r2, [pc, #492]	; (80008d0 <main+0x400>)
 80006e4:	6812      	ldr	r2, [r2, #0]
 80006e6:	497b      	ldr	r1, [pc, #492]	; (80008d4 <main+0x404>)
 80006e8:	5c8a      	ldrb	r2, [r1, r2]
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a78      	ldr	r2, [pc, #480]	; (80008d0 <main+0x400>)
 80006ee:	6812      	ldr	r2, [r2, #0]
 80006f0:	0092      	lsls	r2, r2, #2
 80006f2:	fa01 f202 	lsl.w	r2, r1, r2
 80006f6:	4313      	orrs	r3, r2
 80006f8:	4a77      	ldr	r2, [pc, #476]	; (80008d8 <main+0x408>)
 80006fa:	60d3      	str	r3, [r2, #12]
						for (i = 0; i < 8; i = i + 2) {	//формируем 32-битное слово(4 байта) для записи во флэш
 80006fc:	4b74      	ldr	r3, [pc, #464]	; (80008d0 <main+0x400>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3302      	adds	r3, #2
 8000702:	4a73      	ldr	r2, [pc, #460]	; (80008d0 <main+0x400>)
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	4b72      	ldr	r3, [pc, #456]	; (80008d0 <main+0x400>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b07      	cmp	r3, #7
 800070c:	d9ce      	bls.n	80006ac <main+0x1dc>
						}

						//продолжаем расчёт контрольной суммы
						calculation_check_sum += (uint8_t) fwIhexData.program_data + (uint8_t) (fwIhexData.program_data >> 8) + (uint8_t) (fwIhexData.program_data >> 16) + (uint8_t) (fwIhexData.program_data >> 24);
 800070e:	4b72      	ldr	r3, [pc, #456]	; (80008d8 <main+0x408>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b70      	ldr	r3, [pc, #448]	; (80008d8 <main+0x408>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4413      	add	r3, r2
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b6d      	ldr	r3, [pc, #436]	; (80008d8 <main+0x408>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	0c1b      	lsrs	r3, r3, #16
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4413      	add	r3, r2
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b6a      	ldr	r3, [pc, #424]	; (80008d8 <main+0x408>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0e1b      	lsrs	r3, r3, #24
 8000732:	b2db      	uxtb	r3, r3
 8000734:	4413      	add	r3, r2
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b68      	ldr	r3, [pc, #416]	; (80008dc <main+0x40c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4413      	add	r3, r2
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b66      	ldr	r3, [pc, #408]	; (80008dc <main+0x40c>)
 8000742:	701a      	strb	r2, [r3, #0]

						fwToFlashBuff[j++] = fwIhexData.program_data; //записываем готовое слово в массив(флэш)
 8000744:	4b66      	ldr	r3, [pc, #408]	; (80008e0 <main+0x410>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	1c5a      	adds	r2, r3, #1
 800074a:	4965      	ldr	r1, [pc, #404]	; (80008e0 <main+0x410>)
 800074c:	600a      	str	r2, [r1, #0]
 800074e:	4a62      	ldr	r2, [pc, #392]	; (80008d8 <main+0x408>)
 8000750:	68d2      	ldr	r2, [r2, #12]
 8000752:	4964      	ldr	r1, [pc, #400]	; (80008e4 <main+0x414>)
 8000754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

						fwIhexData.size_data -= 8;
 8000758:	4b5f      	ldr	r3, [pc, #380]	; (80008d8 <main+0x408>)
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	3b08      	subs	r3, #8
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b5d      	ldr	r3, [pc, #372]	; (80008d8 <main+0x408>)
 8000762:	711a      	strb	r2, [r3, #4]
						fwIhexData.program_data = 0;
 8000764:	4b5c      	ldr	r3, [pc, #368]	; (80008d8 <main+0x408>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
					while (fwIhexData.size_data > 0) {  //пока не считаем все данные...
 800076a:	4b5b      	ldr	r3, [pc, #364]	; (80008d8 <main+0x408>)
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	f47f af65 	bne.w	800063e <main+0x16e>
					}

					//досчитываем контрольную сумму
					calculation_check_sum = ~(calculation_check_sum) + 1;
 8000774:	4b59      	ldr	r3, [pc, #356]	; (80008dc <main+0x40c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	425b      	negs	r3, r3
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b57      	ldr	r3, [pc, #348]	; (80008dc <main+0x40c>)
 800077e:	701a      	strb	r2, [r3, #0]


					for (i = 0; i < 2; i++, fwBuff_count++) { // считываем 2 символа контрольной суммы  во временный буфер
 8000780:	4b53      	ldr	r3, [pc, #332]	; (80008d0 <main+0x400>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	e011      	b.n	80007ac <main+0x2dc>

						tempFwBuff[i] = fwBuff[fwBuff_count];
 8000788:	4b57      	ldr	r3, [pc, #348]	; (80008e8 <main+0x418>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b50      	ldr	r3, [pc, #320]	; (80008d0 <main+0x400>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4956      	ldr	r1, [pc, #344]	; (80008ec <main+0x41c>)
 8000792:	5c89      	ldrb	r1, [r1, r2]
 8000794:	4a4f      	ldr	r2, [pc, #316]	; (80008d4 <main+0x404>)
 8000796:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i < 2; i++, fwBuff_count++) { // считываем 2 символа контрольной суммы  во временный буфер
 8000798:	4b4d      	ldr	r3, [pc, #308]	; (80008d0 <main+0x400>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	4a4c      	ldr	r2, [pc, #304]	; (80008d0 <main+0x400>)
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	4b51      	ldr	r3, [pc, #324]	; (80008e8 <main+0x418>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a4f      	ldr	r2, [pc, #316]	; (80008e8 <main+0x418>)
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b48      	ldr	r3, [pc, #288]	; (80008d0 <main+0x400>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d9e9      	bls.n	8000788 <main+0x2b8>
					}

					Char_To_Hex(tempFwBuff, 2);		// конвертируем символы в хекс
 80007b4:	2102      	movs	r1, #2
 80007b6:	4847      	ldr	r0, [pc, #284]	; (80008d4 <main+0x404>)
 80007b8:	f000 fa3a 	bl	8000c30 <Char_To_Hex>

					fwIhexData.check_sum = tempFwBuff[1] + 16 * tempFwBuff[0];
 80007bc:	4b45      	ldr	r3, [pc, #276]	; (80008d4 <main+0x404>)
 80007be:	785a      	ldrb	r2, [r3, #1]
 80007c0:	4b44      	ldr	r3, [pc, #272]	; (80008d4 <main+0x404>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4413      	add	r3, r2
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b42      	ldr	r3, [pc, #264]	; (80008d8 <main+0x408>)
 80007ce:	719a      	strb	r2, [r3, #6]

					if (calculation_check_sum == fwIhexData.check_sum) {	// если контрольная сумма совпадает...
 80007d0:	4b41      	ldr	r3, [pc, #260]	; (80008d8 <main+0x408>)
 80007d2:	799a      	ldrb	r2, [r3, #6]
 80007d4:	4b41      	ldr	r3, [pc, #260]	; (80008dc <main+0x40c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d133      	bne.n	8000844 <main+0x374>

						// мигнём светодиодом
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4843      	ldr	r0, [pc, #268]	; (80008f0 <main+0x420>)
 80007e2:	f001 f921 	bl	8001a28 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 80007e6:	2064      	movs	r0, #100	; 0x64
 80007e8:	f000 fba8 	bl	8000f3c <HAL_Delay>
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2120      	movs	r1, #32
 80007f0:	483f      	ldr	r0, [pc, #252]	; (80008f0 <main+0x420>)
 80007f2:	f001 f919 	bl	8001a28 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 80007f6:	2064      	movs	r0, #100	; 0x64
 80007f8:	f000 fba0 	bl	8000f3c <HAL_Delay>

						flash_address += fwIhexData.address_data;// досчитаем адрес
 80007fc:	4b36      	ldr	r3, [pc, #216]	; (80008d8 <main+0x408>)
 80007fe:	891b      	ldrh	r3, [r3, #8]
 8000800:	461a      	mov	r2, r3
 8000802:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <main+0x424>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a3a      	ldr	r2, [pc, #232]	; (80008f4 <main+0x424>)
 800080a:	6013      	str	r3, [r2, #0]

						// и запишем данные в флэш память
						HAL_FLASH_Unlock();
 800080c:	f000 fcf4 	bl	80011f8 <HAL_FLASH_Unlock>
						for (uint8_t i,j; i < sizeof(fwToFlashBuff);i+=4,j++ )
 8000810:	e013      	b.n	800083a <main+0x36a>
						{
							HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address+i, fwToFlashBuff[j]);
 8000812:	79fa      	ldrb	r2, [r7, #7]
 8000814:	4b37      	ldr	r3, [pc, #220]	; (80008f4 <main+0x424>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	18d1      	adds	r1, r2, r3
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	4a31      	ldr	r2, [pc, #196]	; (80008e4 <main+0x414>)
 800081e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000822:	461a      	mov	r2, r3
 8000824:	f04f 0300 	mov.w	r3, #0
 8000828:	2002      	movs	r0, #2
 800082a:	f000 fc91 	bl	8001150 <HAL_FLASH_Program>
						for (uint8_t i,j; i < sizeof(fwToFlashBuff);i+=4,j++ )
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	3304      	adds	r3, #4
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	79bb      	ldrb	r3, [r7, #6]
 8000836:	3301      	adds	r3, #1
 8000838:	71bb      	strb	r3, [r7, #6]
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d9e8      	bls.n	8000812 <main+0x342>
						}
						 HAL_FLASH_Lock();
 8000840:	f000 fcfc 	bl	800123c <HAL_FLASH_Lock>
					} else {
						// если контрольная сумма не совпадает ...
						//можно вывести сообщение об ошибке и выйти
					}

					calculation_check_sum = 0;		//обнуляем контрольную сумму
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <main+0x40c>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]

					break;
 800084a:	e0d5      	b.n	80009f8 <main+0x528>

				case 0x01:	//конец файла

					//досчитываем контрольную сумму
					calculation_check_sum = ~(calculation_check_sum) + 1;
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <main+0x40c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	425b      	negs	r3, r3
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <main+0x40c>)
 8000856:	701a      	strb	r2, [r3, #0]

					for (i = 0; i < 2; i++, fwBuff_count++) { // считываем 2 символа контрольной суммы  во временный буфер
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <main+0x400>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	e011      	b.n	8000884 <main+0x3b4>
						tempFwBuff[i] = fwBuff[fwBuff_count];
 8000860:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <main+0x418>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <main+0x400>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4920      	ldr	r1, [pc, #128]	; (80008ec <main+0x41c>)
 800086a:	5c89      	ldrb	r1, [r1, r2]
 800086c:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <main+0x404>)
 800086e:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i < 2; i++, fwBuff_count++) { // считываем 2 символа контрольной суммы  во временный буфер
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <main+0x400>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <main+0x400>)
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <main+0x418>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <main+0x418>)
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <main+0x400>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d9e9      	bls.n	8000860 <main+0x390>
					}

					Char_To_Hex(tempFwBuff, 4);		// конвертируем символы в хекс
 800088c:	2104      	movs	r1, #4
 800088e:	4811      	ldr	r0, [pc, #68]	; (80008d4 <main+0x404>)
 8000890:	f000 f9ce 	bl	8000c30 <Char_To_Hex>
					fwIhexData.check_sum = tempFwBuff[1] + 16 * tempFwBuff[0];
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <main+0x404>)
 8000896:	785a      	ldrb	r2, [r3, #1]
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <main+0x404>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	011b      	lsls	r3, r3, #4
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4413      	add	r3, r2
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <main+0x408>)
 80008a6:	719a      	strb	r2, [r3, #6]

					if (calculation_check_sum == fwIhexData.check_sum) {	//если контрольная сумма совпадает...
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <main+0x408>)
 80008aa:	799a      	ldrb	r2, [r3, #6]
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <main+0x40c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d102      	bne.n	80008ba <main+0x3ea>
						flagFwEof = true;	//поднимаем флаг конца файла
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <main+0x428>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]

						// если контрольная сумма не совпадает ...
						//можно вывести сообщение об ошибке и выйти
					}

					fwBuff_count = 0; // обнуляем счетчик символа в буфере с прошивкой
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <main+0x418>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
					calculation_check_sum = 0; //обнуляем чек сумму
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <main+0x40c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]

					break;
 80008c6:	e097      	b.n	80009f8 <main+0x528>

				case 0x04:	//дополнительный адрес

					for (i = 0; i < 4; i++, fwBuff_count++) { // считываем 4 символа во временный буфер
 80008c8:	4b01      	ldr	r3, [pc, #4]	; (80008d0 <main+0x400>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	e027      	b.n	8000920 <main+0x450>
 80008d0:	200000b0 	.word	0x200000b0
 80008d4:	20000080 	.word	0x20000080
 80008d8:	200000fc 	.word	0x200000fc
 80008dc:	20000074 	.word	0x20000074
 80008e0:	200000ac 	.word	0x200000ac
 80008e4:	20000088 	.word	0x20000088
 80008e8:	20000078 	.word	0x20000078
 80008ec:	20000004 	.word	0x20000004
 80008f0:	40020000 	.word	0x40020000
 80008f4:	200000b4 	.word	0x200000b4
 80008f8:	2000007c 	.word	0x2000007c
						tempFwBuff[i] = fwBuff[fwBuff_count];
 80008fc:	4b43      	ldr	r3, [pc, #268]	; (8000a0c <main+0x53c>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b43      	ldr	r3, [pc, #268]	; (8000a10 <main+0x540>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4943      	ldr	r1, [pc, #268]	; (8000a14 <main+0x544>)
 8000906:	5c89      	ldrb	r1, [r1, r2]
 8000908:	4a43      	ldr	r2, [pc, #268]	; (8000a18 <main+0x548>)
 800090a:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i < 4; i++, fwBuff_count++) { // считываем 4 символа во временный буфер
 800090c:	4b40      	ldr	r3, [pc, #256]	; (8000a10 <main+0x540>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	4a3f      	ldr	r2, [pc, #252]	; (8000a10 <main+0x540>)
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <main+0x53c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a3b      	ldr	r2, [pc, #236]	; (8000a0c <main+0x53c>)
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b3b      	ldr	r3, [pc, #236]	; (8000a10 <main+0x540>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b03      	cmp	r3, #3
 8000926:	d9e9      	bls.n	80008fc <main+0x42c>
					}

					Char_To_Hex(tempFwBuff, 4);		// конвертируем символы в хекс
 8000928:	2104      	movs	r1, #4
 800092a:	483b      	ldr	r0, [pc, #236]	; (8000a18 <main+0x548>)
 800092c:	f000 f980 	bl	8000c30 <Char_To_Hex>

					fwIhexData.extended_adress = (uint32_t) (tempFwBuff[0] << 28 | tempFwBuff[1] << 24 | tempFwBuff[2] << 20 | tempFwBuff[3] << 16);//считаем адрес
 8000930:	4b39      	ldr	r3, [pc, #228]	; (8000a18 <main+0x548>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	071a      	lsls	r2, r3, #28
 8000936:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <main+0x548>)
 8000938:	785b      	ldrb	r3, [r3, #1]
 800093a:	061b      	lsls	r3, r3, #24
 800093c:	431a      	orrs	r2, r3
 800093e:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <main+0x548>)
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	051b      	lsls	r3, r3, #20
 8000944:	431a      	orrs	r2, r3
 8000946:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <main+0x548>)
 8000948:	78db      	ldrb	r3, [r3, #3]
 800094a:	041b      	lsls	r3, r3, #16
 800094c:	4313      	orrs	r3, r2
 800094e:	461a      	mov	r2, r3
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <main+0x54c>)
 8000952:	601a      	str	r2, [r3, #0]

					calculation_check_sum += tempFwBuff[0] + tempFwBuff[1] + tempFwBuff[2] + tempFwBuff[3];
 8000954:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <main+0x548>)
 8000956:	781a      	ldrb	r2, [r3, #0]
 8000958:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <main+0x548>)
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	4413      	add	r3, r2
 800095e:	b2da      	uxtb	r2, r3
 8000960:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <main+0x548>)
 8000962:	789b      	ldrb	r3, [r3, #2]
 8000964:	4413      	add	r3, r2
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <main+0x548>)
 800096a:	78db      	ldrb	r3, [r3, #3]
 800096c:	4413      	add	r3, r2
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <main+0x550>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4413      	add	r3, r2
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <main+0x550>)
 800097a:	701a      	strb	r2, [r3, #0]
					calculation_check_sum = ~(calculation_check_sum) + 1;
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <main+0x550>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	425b      	negs	r3, r3
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <main+0x550>)
 8000986:	701a      	strb	r2, [r3, #0]

					for (i = 0; i < 2; i++, fwBuff_count++) { //считываем 2 символа контрольной суммы  во временный буфер
 8000988:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <main+0x540>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	e011      	b.n	80009b4 <main+0x4e4>
						tempFwBuff[i] = fwBuff[fwBuff_count];
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <main+0x53c>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <main+0x540>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	491e      	ldr	r1, [pc, #120]	; (8000a14 <main+0x544>)
 800099a:	5c89      	ldrb	r1, [r1, r2]
 800099c:	4a1e      	ldr	r2, [pc, #120]	; (8000a18 <main+0x548>)
 800099e:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i < 2; i++, fwBuff_count++) { //считываем 2 символа контрольной суммы  во временный буфер
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <main+0x540>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a1a      	ldr	r2, [pc, #104]	; (8000a10 <main+0x540>)
 80009a8:	6013      	str	r3, [r2, #0]
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <main+0x53c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <main+0x53c>)
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <main+0x540>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d9e9      	bls.n	8000990 <main+0x4c0>
					}

					Char_To_Hex(tempFwBuff, 2);		// конвертируем символы в хекс
 80009bc:	2102      	movs	r1, #2
 80009be:	4816      	ldr	r0, [pc, #88]	; (8000a18 <main+0x548>)
 80009c0:	f000 f936 	bl	8000c30 <Char_To_Hex>
					fwIhexData.check_sum = tempFwBuff[1] + 16 * tempFwBuff[0];
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <main+0x548>)
 80009c6:	785a      	ldrb	r2, [r3, #1]
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <main+0x548>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	011b      	lsls	r3, r3, #4
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4413      	add	r3, r2
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <main+0x54c>)
 80009d6:	719a      	strb	r2, [r3, #6]

					if (calculation_check_sum == fwIhexData.check_sum) {	//если контрольная сумма совпадает ...
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <main+0x54c>)
 80009da:	799a      	ldrb	r2, [r3, #6]
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <main+0x550>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d103      	bne.n	80009ec <main+0x51c>

						flash_address = fwIhexData.extended_adress; // формируем адрес для записи во флэш
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <main+0x54c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <main+0x554>)
 80009ea:	6013      	str	r3, [r2, #0]
					else {
						// если контрольная сумма не совпадает ...
						//можно вывести сообщение об ошибке и выйти
					}

					calculation_check_sum = 0;		//обнуляем контрольную сумму
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <main+0x550>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]

					break;
 80009f2:	e001      	b.n	80009f8 <main+0x528>

				default:
					break;
 80009f4:	e000      	b.n	80009f8 <main+0x528>
				}
			}
 80009f6:	bf00      	nop
		while (!flagFwEof) {		// пока не конец файла
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <main+0x558>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	f083 0301 	eor.w	r3, r3, #1
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f47f ad9c 	bne.w	8000540 <main+0x70>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000a08:	e7fe      	b.n	8000a08 <main+0x538>
 8000a0a:	bf00      	nop
 8000a0c:	20000078 	.word	0x20000078
 8000a10:	200000b0 	.word	0x200000b0
 8000a14:	20000004 	.word	0x20000004
 8000a18:	20000080 	.word	0x20000080
 8000a1c:	200000fc 	.word	0x200000fc
 8000a20:	20000074 	.word	0x20000074
 8000a24:	200000b4 	.word	0x200000b4
 8000a28:	2000007c 	.word	0x2000007c

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	; 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 febc 	bl	80027b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <SystemClock_Config+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <SystemClock_Config+0xd0>)
 8000a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <SystemClock_Config+0xd0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a90:	2310      	movs	r3, #16
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aa0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aa4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aae:	f107 0320 	add.w	r3, r7, #32
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 ffd2 	bl	8001a5c <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000abe:	f000 f8ef 	bl	8000ca0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2102      	movs	r1, #2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fa34 	bl	8001f4c <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aea:	f000 f8d9 	bl	8000ca0 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3750      	adds	r7, #80	; 0x50
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_USART2_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b38:	f001 fc04 	bl	8002344 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f000 f8ad 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000b8 	.word	0x200000b8
 8000b50:	40004400 	.word	0x40004400

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a2c      	ldr	r2, [pc, #176]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a25      	ldr	r2, [pc, #148]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a1e      	ldr	r2, [pc, #120]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2120      	movs	r1, #32
 8000bde:	4812      	ldr	r0, [pc, #72]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000be0:	f000 ff22 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480c      	ldr	r0, [pc, #48]	; (8000c2c <MX_GPIO_Init+0xd8>)
 8000bfc:	f000 fd90 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c00:	2320      	movs	r3, #32
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000c18:	f000 fd82 	bl	8001720 <HAL_GPIO_Init>

}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	; 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020800 	.word	0x40020800

08000c30 <Char_To_Hex>:

/* USER CODE BEGIN 4 */

void Char_To_Hex(uint8_t *buff, uint8_t count) {
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	70fb      	strb	r3, [r7, #3]
	uint8_t i;

	for (i = 0; i < count; i++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e023      	b.n	8000c8a <Char_To_Hex+0x5a>
		if (buff[i] <= '9' && buff[i] >= '0') {
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b39      	cmp	r3, #57	; 0x39
 8000c4c:	d810      	bhi.n	8000c70 <Char_To_Hex+0x40>
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	4413      	add	r3, r2
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b2f      	cmp	r3, #47	; 0x2f
 8000c58:	d90a      	bls.n	8000c70 <Char_To_Hex+0x40>
			buff[i] -= 0x30;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781a      	ldrb	r2, [r3, #0]
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	440b      	add	r3, r1
 8000c68:	3a30      	subs	r2, #48	; 0x30
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	e009      	b.n	8000c84 <Char_To_Hex+0x54>
		} else {
			buff[i] = buff[i] - 0x41 + 10;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	781a      	ldrb	r2, [r3, #0]
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	440b      	add	r3, r1
 8000c7e:	3a37      	subs	r2, #55	; 0x37
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; i++) {
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	3301      	adds	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d3d7      	bcc.n	8000c42 <Char_To_Hex+0x12>
		}
	}
}
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cea:	2007      	movs	r0, #7
 8000cec:	f000 f9fc 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <HAL_UART_MspInit+0x84>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d12b      	bne.n	8000d76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_UART_MspInit+0x88>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_UART_MspInit+0x88>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_UART_MspInit+0x88>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_UART_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <HAL_UART_MspInit+0x88>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_UART_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d56:	230c      	movs	r3, #12
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d66:	2307      	movs	r3, #7
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_UART_MspInit+0x8c>)
 8000d72:	f000 fcd5 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40004400 	.word	0x40004400
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 f890 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e0a:	490e      	ldr	r1, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e20:	4c0b      	ldr	r4, [pc, #44]	; (8000e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e2e:	f7ff ffd7 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f001 fc9d 	bl	8002770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fb4b 	bl	80004d0 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8000e48:	08002808 	.word	0x08002808
  ldr r2, =_sbss
 8000e4c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8000e50:	20000134 	.word	0x20000134

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f931 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff ff0e 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f93b 	bl	8001136 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f911 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000004c 	.word	0x2000004c
 8000ef4:	20000054 	.word	0x20000054
 8000ef8:	20000050 	.word	0x20000050

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000054 	.word	0x20000054
 8000f20:	20000110 	.word	0x20000110

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000110 	.word	0x20000110

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_Delay+0x44>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffde 	bl	8000f24 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000054 	.word	0x20000054

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff47 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff5c 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff8e 	bl	800103c <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffb0 	bl	80010a4 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_FLASH_Program+0xa0>)
 8001164:	7e1b      	ldrb	r3, [r3, #24]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d101      	bne.n	800116e <HAL_FLASH_Program+0x1e>
 800116a:	2302      	movs	r3, #2
 800116c:	e03b      	b.n	80011e6 <HAL_FLASH_Program+0x96>
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_FLASH_Program+0xa0>)
 8001170:	2201      	movs	r2, #1
 8001172:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001174:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001178:	f000 f870 	bl	800125c <FLASH_WaitForLastOperation>
 800117c:	4603      	mov	r3, r0
 800117e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d12b      	bne.n	80011de <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d105      	bne.n	8001198 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800118c:	783b      	ldrb	r3, [r7, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f000 f91b 	bl	80013cc <FLASH_Program_Byte>
 8001196:	e016      	b.n	80011c6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d105      	bne.n	80011aa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800119e:	883b      	ldrh	r3, [r7, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	68b8      	ldr	r0, [r7, #8]
 80011a4:	f000 f8ee 	bl	8001384 <FLASH_Program_HalfWord>
 80011a8:	e00d      	b.n	80011c6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d105      	bne.n	80011bc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f000 f8c3 	bl	8001340 <FLASH_Program_Word>
 80011ba:	e004      	b.n	80011c6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80011bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011c0:	68b8      	ldr	r0, [r7, #8]
 80011c2:	f000 f88b 	bl	80012dc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011ca:	f000 f847 	bl	800125c <FLASH_WaitForLastOperation>
 80011ce:	4603      	mov	r3, r0
 80011d0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_FLASH_Program+0xa4>)
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_FLASH_Program+0xa4>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_FLASH_Program+0xa0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000114 	.word	0x20000114
 80011f4:	40023c00 	.word	0x40023c00

080011f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_FLASH_Unlock+0x38>)
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	2b00      	cmp	r3, #0
 8001208:	da0b      	bge.n	8001222 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_FLASH_Unlock+0x38>)
 800120c:	4a09      	ldr	r2, [pc, #36]	; (8001234 <HAL_FLASH_Unlock+0x3c>)
 800120e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <HAL_FLASH_Unlock+0x38>)
 8001212:	4a09      	ldr	r2, [pc, #36]	; (8001238 <HAL_FLASH_Unlock+0x40>)
 8001214:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_FLASH_Unlock+0x38>)
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	da01      	bge.n	8001222 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001222:	79fb      	ldrb	r3, [r7, #7]
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40023c00 	.word	0x40023c00
 8001234:	45670123 	.word	0x45670123
 8001238:	cdef89ab 	.word	0xcdef89ab

0800123c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_FLASH_Lock+0x1c>)
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_FLASH_Lock+0x1c>)
 8001246:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800124a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40023c00 	.word	0x40023c00

0800125c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <FLASH_WaitForLastOperation+0x78>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800126e:	f7ff fe59 	bl	8000f24 <HAL_GetTick>
 8001272:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001274:	e010      	b.n	8001298 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d00c      	beq.n	8001298 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <FLASH_WaitForLastOperation+0x38>
 8001284:	f7ff fe4e 	bl	8000f24 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	d201      	bcs.n	8001298 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e019      	b.n	80012cc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <FLASH_WaitForLastOperation+0x7c>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1e8      	bne.n	8001276 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <FLASH_WaitForLastOperation+0x7c>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <FLASH_WaitForLastOperation+0x7c>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <FLASH_WaitForLastOperation+0x7c>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012c2:	f000 f8a5 	bl	8001410 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
  
}  
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000114 	.word	0x20000114
 80012d8:	40023c00 	.word	0x40023c00

080012dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <FLASH_Program_DoubleWord+0x60>)
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	4a13      	ldr	r2, [pc, #76]	; (800133c <FLASH_Program_DoubleWord+0x60>)
 80012ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <FLASH_Program_DoubleWord+0x60>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	4a10      	ldr	r2, [pc, #64]	; (800133c <FLASH_Program_DoubleWord+0x60>)
 80012fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <FLASH_Program_DoubleWord+0x60>)
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <FLASH_Program_DoubleWord+0x60>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001312:	f3bf 8f6f 	isb	sy
}
 8001316:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	000a      	movs	r2, r1
 8001326:	2300      	movs	r3, #0
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	3104      	adds	r1, #4
 800132c:	4613      	mov	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40023c00 	.word	0x40023c00

08001340 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <FLASH_Program_Word+0x40>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <FLASH_Program_Word+0x40>)
 8001350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001354:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <FLASH_Program_Word+0x40>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4a09      	ldr	r2, [pc, #36]	; (8001380 <FLASH_Program_Word+0x40>)
 800135c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001360:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <FLASH_Program_Word+0x40>)
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	4a06      	ldr	r2, [pc, #24]	; (8001380 <FLASH_Program_Word+0x40>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40023c00 	.word	0x40023c00

08001384 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <FLASH_Program_HalfWord+0x44>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <FLASH_Program_HalfWord+0x44>)
 8001396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800139a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <FLASH_Program_HalfWord+0x44>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <FLASH_Program_HalfWord+0x44>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <FLASH_Program_HalfWord+0x44>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <FLASH_Program_HalfWord+0x44>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	801a      	strh	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023c00 	.word	0x40023c00

080013cc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <FLASH_Program_Byte+0x40>)
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <FLASH_Program_Byte+0x40>)
 80013de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <FLASH_Program_Byte+0x40>)
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <FLASH_Program_Byte+0x40>)
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <FLASH_Program_Byte+0x40>)
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	4a06      	ldr	r2, [pc, #24]	; (800140c <FLASH_Program_Byte+0x40>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	78fa      	ldrb	r2, [r7, #3]
 80013fc:	701a      	strb	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023c00 	.word	0x40023c00

08001410 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <FLASH_SetErrorCode+0xc4>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <FLASH_SetErrorCode+0xc8>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <FLASH_SetErrorCode+0xc8>)
 800142a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <FLASH_SetErrorCode+0xc4>)
 800142e:	2210      	movs	r2, #16
 8001430:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <FLASH_SetErrorCode+0xc4>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	2b00      	cmp	r3, #0
 800143c:	d008      	beq.n	8001450 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <FLASH_SetErrorCode+0xc8>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <FLASH_SetErrorCode+0xc8>)
 8001448:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <FLASH_SetErrorCode+0xc4>)
 800144c:	2220      	movs	r2, #32
 800144e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <FLASH_SetErrorCode+0xc4>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001458:	2b00      	cmp	r3, #0
 800145a:	d008      	beq.n	800146e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800145c:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <FLASH_SetErrorCode+0xc8>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <FLASH_SetErrorCode+0xc8>)
 8001466:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <FLASH_SetErrorCode+0xc4>)
 800146a:	2240      	movs	r2, #64	; 0x40
 800146c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <FLASH_SetErrorCode+0xc4>)
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <FLASH_SetErrorCode+0xc8>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <FLASH_SetErrorCode+0xc8>)
 8001484:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <FLASH_SetErrorCode+0xc4>)
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <FLASH_SetErrorCode+0xc4>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001494:	2b00      	cmp	r3, #0
 8001496:	d009      	beq.n	80014ac <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <FLASH_SetErrorCode+0xc8>)
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <FLASH_SetErrorCode+0xc8>)
 80014a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <FLASH_SetErrorCode+0xc4>)
 80014a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014aa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <FLASH_SetErrorCode+0xc4>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <FLASH_SetErrorCode+0xc8>)
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <FLASH_SetErrorCode+0xc8>)
 80014c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <FLASH_SetErrorCode+0xc4>)
 80014c6:	2202      	movs	r2, #2
 80014c8:	60da      	str	r2, [r3, #12]
  }
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40023c00 	.word	0x40023c00
 80014d8:	20000114 	.word	0x20000114

080014dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <HAL_FLASHEx_Erase+0xd8>)
 80014f0:	7e1b      	ldrb	r3, [r3, #24]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_FLASHEx_Erase+0x1e>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e058      	b.n	80015ac <HAL_FLASHEx_Erase+0xd0>
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <HAL_FLASHEx_Erase+0xd8>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001500:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001504:	f7ff feaa 	bl	800125c <FLASH_WaitForLastOperation>
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d148      	bne.n	80015a4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d115      	bne.n	800154e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f000 f844 	bl	80015bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001534:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001538:	f7ff fe90 	bl	800125c <FLASH_WaitForLastOperation>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_FLASHEx_Erase+0xdc>)
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <HAL_FLASHEx_Erase+0xdc>)
 8001546:	f023 0304 	bic.w	r3, r3, #4
 800154a:	6113      	str	r3, [r2, #16]
 800154c:	e028      	b.n	80015a0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	e01c      	b.n	8001590 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4619      	mov	r1, r3
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f000 f850 	bl	8001604 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001564:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001568:	f7ff fe78 	bl	800125c <FLASH_WaitForLastOperation>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_FLASHEx_Erase+0xdc>)
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_FLASHEx_Erase+0xdc>)
 8001576:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800157a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	601a      	str	r2, [r3, #0]
          break;
 8001588:	e00a      	b.n	80015a0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3301      	adds	r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4413      	add	r3, r2
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	429a      	cmp	r2, r3
 800159e:	d3da      	bcc.n	8001556 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80015a0:	f000 f878 	bl	8001694 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_FLASHEx_Erase+0xd8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	761a      	strb	r2, [r3, #24]

  return status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000114 	.word	0x20000114
 80015b8:	40023c00 	.word	0x40023c00

080015bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <FLASH_MassErase+0x44>)
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <FLASH_MassErase+0x44>)
 80015ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <FLASH_MassErase+0x44>)
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	4a09      	ldr	r2, [pc, #36]	; (8001600 <FLASH_MassErase+0x44>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <FLASH_MassErase+0x44>)
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	4313      	orrs	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <FLASH_MassErase+0x44>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6113      	str	r3, [r2, #16]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023c00 	.word	0x40023c00

08001604 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	e010      	b.n	8001642 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d103      	bne.n	800162e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e009      	b.n	8001642 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d103      	bne.n	800163c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e002      	b.n	8001642 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800163c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001640:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <FLASH_Erase_Sector+0x8c>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <FLASH_Erase_Sector+0x8c>)
 8001648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800164c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <FLASH_Erase_Sector+0x8c>)
 8001650:	691a      	ldr	r2, [r3, #16]
 8001652:	490f      	ldr	r1, [pc, #60]	; (8001690 <FLASH_Erase_Sector+0x8c>)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <FLASH_Erase_Sector+0x8c>)
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <FLASH_Erase_Sector+0x8c>)
 8001660:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001664:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <FLASH_Erase_Sector+0x8c>)
 8001668:	691a      	ldr	r2, [r3, #16]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4313      	orrs	r3, r2
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <FLASH_Erase_Sector+0x8c>)
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <FLASH_Erase_Sector+0x8c>)
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <FLASH_Erase_Sector+0x8c>)
 800167e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001682:	6113      	str	r3, [r2, #16]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40023c00 	.word	0x40023c00

08001694 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <FLASH_FlushCaches+0x88>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d017      	beq.n	80016d4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <FLASH_FlushCaches+0x88>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1c      	ldr	r2, [pc, #112]	; (800171c <FLASH_FlushCaches+0x88>)
 80016aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <FLASH_FlushCaches+0x88>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a19      	ldr	r2, [pc, #100]	; (800171c <FLASH_FlushCaches+0x88>)
 80016b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <FLASH_FlushCaches+0x88>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a16      	ldr	r2, [pc, #88]	; (800171c <FLASH_FlushCaches+0x88>)
 80016c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <FLASH_FlushCaches+0x88>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a13      	ldr	r2, [pc, #76]	; (800171c <FLASH_FlushCaches+0x88>)
 80016ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <FLASH_FlushCaches+0x88>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d017      	beq.n	8001710 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <FLASH_FlushCaches+0x88>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <FLASH_FlushCaches+0x88>)
 80016e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016ea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <FLASH_FlushCaches+0x88>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <FLASH_FlushCaches+0x88>)
 80016f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <FLASH_FlushCaches+0x88>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <FLASH_FlushCaches+0x88>)
 80016fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001702:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <FLASH_FlushCaches+0x88>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <FLASH_FlushCaches+0x88>)
 800170a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170e:	6013      	str	r3, [r2, #0]
  }
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	e159      	b.n	80019f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 8148 	bne.w	80019ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b01      	cmp	r3, #1
 8001764:	d005      	beq.n	8001772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176e:	2b02      	cmp	r3, #2
 8001770:	d130      	bne.n	80017d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a8:	2201      	movs	r2, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 0201 	and.w	r2, r3, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d017      	beq.n	8001810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d123      	bne.n	8001864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	69b9      	ldr	r1, [r7, #24]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80a2 	beq.w	80019ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b57      	ldr	r3, [pc, #348]	; (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a56      	ldr	r2, [pc, #344]	; (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b54      	ldr	r3, [pc, #336]	; (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c2:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_GPIO_Init+0x2ec>)
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a49      	ldr	r2, [pc, #292]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0x202>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a48      	ldr	r2, [pc, #288]	; (8001a14 <HAL_GPIO_Init+0x2f4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x1fe>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a47      	ldr	r2, [pc, #284]	; (8001a18 <HAL_GPIO_Init+0x2f8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_Init+0x1fa>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a46      	ldr	r2, [pc, #280]	; (8001a1c <HAL_GPIO_Init+0x2fc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x1f6>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a45      	ldr	r2, [pc, #276]	; (8001a20 <HAL_GPIO_Init+0x300>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_Init+0x1f2>
 800190e:	2304      	movs	r3, #4
 8001910:	e008      	b.n	8001924 <HAL_GPIO_Init+0x204>
 8001912:	2307      	movs	r3, #7
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x204>
 8001916:	2303      	movs	r3, #3
 8001918:	e004      	b.n	8001924 <HAL_GPIO_Init+0x204>
 800191a:	2302      	movs	r3, #2
 800191c:	e002      	b.n	8001924 <HAL_GPIO_Init+0x204>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_GPIO_Init+0x204>
 8001922:	2300      	movs	r3, #0
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	f002 0203 	and.w	r2, r2, #3
 800192a:	0092      	lsls	r2, r2, #2
 800192c:	4093      	lsls	r3, r2
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001934:	4935      	ldr	r1, [pc, #212]	; (8001a0c <HAL_GPIO_Init+0x2ec>)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3302      	adds	r3, #2
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <HAL_GPIO_Init+0x304>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001966:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <HAL_GPIO_Init+0x304>)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_GPIO_Init+0x304>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001990:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <HAL_GPIO_Init+0x304>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_GPIO_Init+0x304>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ba:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <HAL_GPIO_Init+0x304>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_GPIO_Init+0x304>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_GPIO_Init+0x304>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3301      	adds	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b0f      	cmp	r3, #15
 80019f4:	f67f aea2 	bls.w	800173c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40013800 	.word	0x40013800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40013c00 	.word	0x40013c00

08001a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a44:	e003      	b.n	8001a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	041a      	lsls	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	619a      	str	r2, [r3, #24]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e264      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d075      	beq.n	8001b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a7a:	4ba3      	ldr	r3, [pc, #652]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d00c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a86:	4ba0      	ldr	r3, [pc, #640]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d112      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a92:	4b9d      	ldr	r3, [pc, #628]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	4b99      	ldr	r3, [pc, #612]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d05b      	beq.n	8001b64 <HAL_RCC_OscConfig+0x108>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d157      	bne.n	8001b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e23f      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d106      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x74>
 8001ac2:	4b91      	ldr	r3, [pc, #580]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a90      	ldr	r2, [pc, #576]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e01d      	b.n	8001b0c <HAL_RCC_OscConfig+0xb0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x98>
 8001ada:	4b8b      	ldr	r3, [pc, #556]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a8a      	ldr	r2, [pc, #552]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b88      	ldr	r3, [pc, #544]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a87      	ldr	r2, [pc, #540]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0xb0>
 8001af4:	4b84      	ldr	r3, [pc, #528]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a83      	ldr	r2, [pc, #524]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b81      	ldr	r3, [pc, #516]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a80      	ldr	r2, [pc, #512]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fa06 	bl	8000f24 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff fa02 	bl	8000f24 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e204      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b76      	ldr	r3, [pc, #472]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0xc0>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f9f2 	bl	8000f24 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f9ee 	bl	8000f24 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1f0      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	4b6c      	ldr	r3, [pc, #432]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0xe8>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d063      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b72:	4b65      	ldr	r3, [pc, #404]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7e:	4b62      	ldr	r3, [pc, #392]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d11c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b5f      	ldr	r3, [pc, #380]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d116      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	4b5c      	ldr	r3, [pc, #368]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x152>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e1c4      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b56      	ldr	r3, [pc, #344]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4952      	ldr	r1, [pc, #328]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	e03a      	b.n	8001c3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d020      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bcc:	4b4f      	ldr	r3, [pc, #316]	; (8001d0c <HAL_RCC_OscConfig+0x2b0>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f9a7 	bl	8000f24 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff f9a3 	bl	8000f24 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1a5      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4940      	ldr	r1, [pc, #256]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
 8001c0c:	e015      	b.n	8001c3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <HAL_RCC_OscConfig+0x2b0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f986 	bl	8000f24 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff f982 	bl	8000f24 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e184      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d030      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d016      	beq.n	8001c7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <HAL_RCC_OscConfig+0x2b4>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff f966 	bl	8000f24 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f962 	bl	8000f24 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e164      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x200>
 8001c7a:	e015      	b.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_RCC_OscConfig+0x2b4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7ff f94f 	bl	8000f24 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff f94b 	bl	8000f24 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e14d      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80a0 	beq.w	8001df6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10f      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_RCC_OscConfig+0x2b8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d121      	bne.n	8001d36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_RCC_OscConfig+0x2b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <HAL_RCC_OscConfig+0x2b8>)
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff f911 	bl	8000f24 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	e011      	b.n	8001d2a <HAL_RCC_OscConfig+0x2ce>
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	42470000 	.word	0x42470000
 8001d10:	42470e80 	.word	0x42470e80
 8001d14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d18:	f7ff f904 	bl	8000f24 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e106      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	4b85      	ldr	r3, [pc, #532]	; (8001f40 <HAL_RCC_OscConfig+0x4e4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2f0>
 8001d3e:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	4a80      	ldr	r2, [pc, #512]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4a:	e01c      	b.n	8001d86 <HAL_RCC_OscConfig+0x32a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d10c      	bne.n	8001d6e <HAL_RCC_OscConfig+0x312>
 8001d54:	4b7b      	ldr	r3, [pc, #492]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	4a7a      	ldr	r2, [pc, #488]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d60:	4b78      	ldr	r3, [pc, #480]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	4a77      	ldr	r2, [pc, #476]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6c:	e00b      	b.n	8001d86 <HAL_RCC_OscConfig+0x32a>
 8001d6e:	4b75      	ldr	r3, [pc, #468]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d72:	4a74      	ldr	r2, [pc, #464]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7a:	4b72      	ldr	r3, [pc, #456]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	4a71      	ldr	r2, [pc, #452]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d015      	beq.n	8001dba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7ff f8c9 	bl	8000f24 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7ff f8c5 	bl	8000f24 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e0c5      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	4b65      	ldr	r3, [pc, #404]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ee      	beq.n	8001d96 <HAL_RCC_OscConfig+0x33a>
 8001db8:	e014      	b.n	8001de4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7ff f8b3 	bl	8000f24 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff f8af 	bl	8000f24 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0af      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	4b5a      	ldr	r3, [pc, #360]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ee      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dea:	4b56      	ldr	r3, [pc, #344]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a55      	ldr	r2, [pc, #340]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 809b 	beq.w	8001f36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e00:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d05c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d141      	bne.n	8001e98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e14:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <HAL_RCC_OscConfig+0x4ec>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff f883 	bl	8000f24 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e22:	f7ff f87f 	bl	8000f24 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e081      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e34:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69da      	ldr	r2, [r3, #28]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	019b      	lsls	r3, r3, #6
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	041b      	lsls	r3, r3, #16
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	061b      	lsls	r3, r3, #24
 8001e64:	4937      	ldr	r1, [pc, #220]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6a:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_RCC_OscConfig+0x4ec>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff f858 	bl	8000f24 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e78:	f7ff f854 	bl	8000f24 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e056      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x41c>
 8001e96:	e04e      	b.n	8001f36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_RCC_OscConfig+0x4ec>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff f841 	bl	8000f24 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7ff f83d 	bl	8000f24 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e03f      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x44a>
 8001ec4:	e037      	b.n	8001f36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e032      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_RCC_OscConfig+0x4e8>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d028      	beq.n	8001f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d121      	bne.n	8001f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d11a      	bne.n	8001f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f02:	4013      	ands	r3, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d111      	bne.n	8001f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	085b      	lsrs	r3, r3, #1
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40007000 	.word	0x40007000
 8001f44:	40023800 	.word	0x40023800
 8001f48:	42470060 	.word	0x42470060

08001f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0cc      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b68      	ldr	r3, [pc, #416]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d90c      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b65      	ldr	r3, [pc, #404]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b63      	ldr	r3, [pc, #396]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0b8      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa0:	4b59      	ldr	r3, [pc, #356]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a58      	ldr	r2, [pc, #352]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb8:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc4:	4b50      	ldr	r3, [pc, #320]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	494d      	ldr	r1, [pc, #308]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d044      	beq.n	800206c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d119      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e07f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d003      	beq.n	800200a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002006:	2b03      	cmp	r3, #3
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e067      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202a:	4b37      	ldr	r3, [pc, #220]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f023 0203 	bic.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4934      	ldr	r1, [pc, #208]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800203c:	f7fe ff72 	bl	8000f24 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	e00a      	b.n	800205a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f7fe ff6e 	bl	8000f24 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e04f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 020c 	and.w	r2, r3, #12
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	429a      	cmp	r2, r3
 800206a:	d1eb      	bne.n	8002044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d20c      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e032      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4916      	ldr	r1, [pc, #88]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	490e      	ldr	r1, [pc, #56]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020d2:	f000 f821 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020d6:	4602      	mov	r2, r0
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	490a      	ldr	r1, [pc, #40]	; (800210c <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	5ccb      	ldrb	r3, [r1, r3]
 80020e6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ea:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fed2 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023c00 	.word	0x40023c00
 8002108:	40023800 	.word	0x40023800
 800210c:	080027e0 	.word	0x080027e0
 8002110:	2000004c 	.word	0x2000004c
 8002114:	20000050 	.word	0x20000050

08002118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	2300      	movs	r3, #0
 800212a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002130:	4b67      	ldr	r3, [pc, #412]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d00d      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x40>
 800213c:	2b08      	cmp	r3, #8
 800213e:	f200 80bd 	bhi.w	80022bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x34>
 8002146:	2b04      	cmp	r3, #4
 8002148:	d003      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x3a>
 800214a:	e0b7      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800214c:	4b61      	ldr	r3, [pc, #388]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800214e:	60bb      	str	r3, [r7, #8]
       break;
 8002150:	e0b7      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002152:	4b61      	ldr	r3, [pc, #388]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002154:	60bb      	str	r3, [r7, #8]
      break;
 8002156:	e0b4      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002158:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002160:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002162:	4b5b      	ldr	r3, [pc, #364]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d04d      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216e:	4b58      	ldr	r3, [pc, #352]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	461a      	mov	r2, r3
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800217e:	f04f 0100 	mov.w	r1, #0
 8002182:	ea02 0800 	and.w	r8, r2, r0
 8002186:	ea03 0901 	and.w	r9, r3, r1
 800218a:	4640      	mov	r0, r8
 800218c:	4649      	mov	r1, r9
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	014b      	lsls	r3, r1, #5
 8002198:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800219c:	0142      	lsls	r2, r0, #5
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	ebb0 0008 	subs.w	r0, r0, r8
 80021a6:	eb61 0109 	sbc.w	r1, r1, r9
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	018b      	lsls	r3, r1, #6
 80021b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021b8:	0182      	lsls	r2, r0, #6
 80021ba:	1a12      	subs	r2, r2, r0
 80021bc:	eb63 0301 	sbc.w	r3, r3, r1
 80021c0:	f04f 0000 	mov.w	r0, #0
 80021c4:	f04f 0100 	mov.w	r1, #0
 80021c8:	00d9      	lsls	r1, r3, #3
 80021ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021ce:	00d0      	lsls	r0, r2, #3
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	eb12 0208 	adds.w	r2, r2, r8
 80021d8:	eb43 0309 	adc.w	r3, r3, r9
 80021dc:	f04f 0000 	mov.w	r0, #0
 80021e0:	f04f 0100 	mov.w	r1, #0
 80021e4:	0259      	lsls	r1, r3, #9
 80021e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80021ea:	0250      	lsls	r0, r2, #9
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	f7fd ffec 	bl	80001d8 <__aeabi_uldivmod>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4613      	mov	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e04a      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	099b      	lsrs	r3, r3, #6
 8002210:	461a      	mov	r2, r3
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800221a:	f04f 0100 	mov.w	r1, #0
 800221e:	ea02 0400 	and.w	r4, r2, r0
 8002222:	ea03 0501 	and.w	r5, r3, r1
 8002226:	4620      	mov	r0, r4
 8002228:	4629      	mov	r1, r5
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	014b      	lsls	r3, r1, #5
 8002234:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002238:	0142      	lsls	r2, r0, #5
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	1b00      	subs	r0, r0, r4
 8002240:	eb61 0105 	sbc.w	r1, r1, r5
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	018b      	lsls	r3, r1, #6
 800224e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002252:	0182      	lsls	r2, r0, #6
 8002254:	1a12      	subs	r2, r2, r0
 8002256:	eb63 0301 	sbc.w	r3, r3, r1
 800225a:	f04f 0000 	mov.w	r0, #0
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	00d9      	lsls	r1, r3, #3
 8002264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002268:	00d0      	lsls	r0, r2, #3
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	1912      	adds	r2, r2, r4
 8002270:	eb45 0303 	adc.w	r3, r5, r3
 8002274:	f04f 0000 	mov.w	r0, #0
 8002278:	f04f 0100 	mov.w	r1, #0
 800227c:	0299      	lsls	r1, r3, #10
 800227e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002282:	0290      	lsls	r0, r2, #10
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	461a      	mov	r2, r3
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	f7fd ffa0 	bl	80001d8 <__aeabi_uldivmod>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4613      	mov	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	3301      	adds	r3, #1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b8:	60bb      	str	r3, [r7, #8]
      break;
 80022ba:	e002      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022be:	60bb      	str	r3, [r7, #8]
      break;
 80022c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c2:	68bb      	ldr	r3, [r7, #8]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	00f42400 	.word	0x00f42400
 80022d8:	007a1200 	.word	0x007a1200

080022dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	2000004c 	.word	0x2000004c

080022f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022f8:	f7ff fff0 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0a9b      	lsrs	r3, r3, #10
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4903      	ldr	r1, [pc, #12]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40023800 	.word	0x40023800
 8002318:	080027f0 	.word	0x080027f0

0800231c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002320:	f7ff ffdc 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	0b5b      	lsrs	r3, r3, #13
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	4903      	ldr	r1, [pc, #12]	; (8002340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800
 8002340:	080027f0 	.word	0x080027f0

08002344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e03f      	b.n	80023d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fcc6 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2224      	movs	r2, #36	; 0x24
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f829 	bl	80023e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800239c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e4:	b09f      	sub	sp, #124	; 0x7c
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f6:	68d9      	ldr	r1, [r3, #12]
 80023f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	ea40 0301 	orr.w	r3, r0, r1
 8002400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	431a      	orrs	r2, r3
 800240c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	431a      	orrs	r2, r3
 8002412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4313      	orrs	r3, r2
 8002418:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800241a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002424:	f021 010c 	bic.w	r1, r1, #12
 8002428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800242e:	430b      	orrs	r3, r1
 8002430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800243c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243e:	6999      	ldr	r1, [r3, #24]
 8002440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	ea40 0301 	orr.w	r3, r0, r1
 8002448:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800244a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4bc5      	ldr	r3, [pc, #788]	; (8002764 <UART_SetConfig+0x384>)
 8002450:	429a      	cmp	r2, r3
 8002452:	d004      	beq.n	800245e <UART_SetConfig+0x7e>
 8002454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4bc3      	ldr	r3, [pc, #780]	; (8002768 <UART_SetConfig+0x388>)
 800245a:	429a      	cmp	r2, r3
 800245c:	d103      	bne.n	8002466 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800245e:	f7ff ff5d 	bl	800231c <HAL_RCC_GetPCLK2Freq>
 8002462:	6778      	str	r0, [r7, #116]	; 0x74
 8002464:	e002      	b.n	800246c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002466:	f7ff ff45 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 800246a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800246c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002474:	f040 80b6 	bne.w	80025e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800247a:	461c      	mov	r4, r3
 800247c:	f04f 0500 	mov.w	r5, #0
 8002480:	4622      	mov	r2, r4
 8002482:	462b      	mov	r3, r5
 8002484:	1891      	adds	r1, r2, r2
 8002486:	6439      	str	r1, [r7, #64]	; 0x40
 8002488:	415b      	adcs	r3, r3
 800248a:	647b      	str	r3, [r7, #68]	; 0x44
 800248c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002490:	1912      	adds	r2, r2, r4
 8002492:	eb45 0303 	adc.w	r3, r5, r3
 8002496:	f04f 0000 	mov.w	r0, #0
 800249a:	f04f 0100 	mov.w	r1, #0
 800249e:	00d9      	lsls	r1, r3, #3
 80024a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024a4:	00d0      	lsls	r0, r2, #3
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	1911      	adds	r1, r2, r4
 80024ac:	6639      	str	r1, [r7, #96]	; 0x60
 80024ae:	416b      	adcs	r3, r5
 80024b0:	667b      	str	r3, [r7, #100]	; 0x64
 80024b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	1891      	adds	r1, r2, r2
 80024be:	63b9      	str	r1, [r7, #56]	; 0x38
 80024c0:	415b      	adcs	r3, r3
 80024c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80024cc:	f7fd fe84 	bl	80001d8 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4ba5      	ldr	r3, [pc, #660]	; (800276c <UART_SetConfig+0x38c>)
 80024d6:	fba3 2302 	umull	r2, r3, r3, r2
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	011e      	lsls	r6, r3, #4
 80024de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e0:	461c      	mov	r4, r3
 80024e2:	f04f 0500 	mov.w	r5, #0
 80024e6:	4622      	mov	r2, r4
 80024e8:	462b      	mov	r3, r5
 80024ea:	1891      	adds	r1, r2, r2
 80024ec:	6339      	str	r1, [r7, #48]	; 0x30
 80024ee:	415b      	adcs	r3, r3
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
 80024f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024f6:	1912      	adds	r2, r2, r4
 80024f8:	eb45 0303 	adc.w	r3, r5, r3
 80024fc:	f04f 0000 	mov.w	r0, #0
 8002500:	f04f 0100 	mov.w	r1, #0
 8002504:	00d9      	lsls	r1, r3, #3
 8002506:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800250a:	00d0      	lsls	r0, r2, #3
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	1911      	adds	r1, r2, r4
 8002512:	65b9      	str	r1, [r7, #88]	; 0x58
 8002514:	416b      	adcs	r3, r5
 8002516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	461a      	mov	r2, r3
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	1891      	adds	r1, r2, r2
 8002524:	62b9      	str	r1, [r7, #40]	; 0x28
 8002526:	415b      	adcs	r3, r3
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800252a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800252e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002532:	f7fd fe51 	bl	80001d8 <__aeabi_uldivmod>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4b8c      	ldr	r3, [pc, #560]	; (800276c <UART_SetConfig+0x38c>)
 800253c:	fba3 1302 	umull	r1, r3, r3, r2
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	2164      	movs	r1, #100	; 0x64
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	3332      	adds	r3, #50	; 0x32
 800254e:	4a87      	ldr	r2, [pc, #540]	; (800276c <UART_SetConfig+0x38c>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	095b      	lsrs	r3, r3, #5
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800255c:	441e      	add	r6, r3
 800255e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002560:	4618      	mov	r0, r3
 8002562:	f04f 0100 	mov.w	r1, #0
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	1894      	adds	r4, r2, r2
 800256c:	623c      	str	r4, [r7, #32]
 800256e:	415b      	adcs	r3, r3
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
 8002572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002576:	1812      	adds	r2, r2, r0
 8002578:	eb41 0303 	adc.w	r3, r1, r3
 800257c:	f04f 0400 	mov.w	r4, #0
 8002580:	f04f 0500 	mov.w	r5, #0
 8002584:	00dd      	lsls	r5, r3, #3
 8002586:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800258a:	00d4      	lsls	r4, r2, #3
 800258c:	4622      	mov	r2, r4
 800258e:	462b      	mov	r3, r5
 8002590:	1814      	adds	r4, r2, r0
 8002592:	653c      	str	r4, [r7, #80]	; 0x50
 8002594:	414b      	adcs	r3, r1
 8002596:	657b      	str	r3, [r7, #84]	; 0x54
 8002598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	461a      	mov	r2, r3
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	1891      	adds	r1, r2, r2
 80025a4:	61b9      	str	r1, [r7, #24]
 80025a6:	415b      	adcs	r3, r3
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80025b2:	f7fd fe11 	bl	80001d8 <__aeabi_uldivmod>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4b6c      	ldr	r3, [pc, #432]	; (800276c <UART_SetConfig+0x38c>)
 80025bc:	fba3 1302 	umull	r1, r3, r3, r2
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	2164      	movs	r1, #100	; 0x64
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	3332      	adds	r3, #50	; 0x32
 80025ce:	4a67      	ldr	r2, [pc, #412]	; (800276c <UART_SetConfig+0x38c>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	f003 0207 	and.w	r2, r3, #7
 80025da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4432      	add	r2, r6
 80025e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025e2:	e0b9      	b.n	8002758 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e6:	461c      	mov	r4, r3
 80025e8:	f04f 0500 	mov.w	r5, #0
 80025ec:	4622      	mov	r2, r4
 80025ee:	462b      	mov	r3, r5
 80025f0:	1891      	adds	r1, r2, r2
 80025f2:	6139      	str	r1, [r7, #16]
 80025f4:	415b      	adcs	r3, r3
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025fc:	1912      	adds	r2, r2, r4
 80025fe:	eb45 0303 	adc.w	r3, r5, r3
 8002602:	f04f 0000 	mov.w	r0, #0
 8002606:	f04f 0100 	mov.w	r1, #0
 800260a:	00d9      	lsls	r1, r3, #3
 800260c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002610:	00d0      	lsls	r0, r2, #3
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	eb12 0804 	adds.w	r8, r2, r4
 800261a:	eb43 0905 	adc.w	r9, r3, r5
 800261e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	f04f 0100 	mov.w	r1, #0
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	008b      	lsls	r3, r1, #2
 8002632:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002636:	0082      	lsls	r2, r0, #2
 8002638:	4640      	mov	r0, r8
 800263a:	4649      	mov	r1, r9
 800263c:	f7fd fdcc 	bl	80001d8 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4b49      	ldr	r3, [pc, #292]	; (800276c <UART_SetConfig+0x38c>)
 8002646:	fba3 2302 	umull	r2, r3, r3, r2
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	011e      	lsls	r6, r3, #4
 800264e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002650:	4618      	mov	r0, r3
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	1894      	adds	r4, r2, r2
 800265c:	60bc      	str	r4, [r7, #8]
 800265e:	415b      	adcs	r3, r3
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002666:	1812      	adds	r2, r2, r0
 8002668:	eb41 0303 	adc.w	r3, r1, r3
 800266c:	f04f 0400 	mov.w	r4, #0
 8002670:	f04f 0500 	mov.w	r5, #0
 8002674:	00dd      	lsls	r5, r3, #3
 8002676:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800267a:	00d4      	lsls	r4, r2, #3
 800267c:	4622      	mov	r2, r4
 800267e:	462b      	mov	r3, r5
 8002680:	1814      	adds	r4, r2, r0
 8002682:	64bc      	str	r4, [r7, #72]	; 0x48
 8002684:	414b      	adcs	r3, r1
 8002686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4618      	mov	r0, r3
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	008b      	lsls	r3, r1, #2
 800269c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026a0:	0082      	lsls	r2, r0, #2
 80026a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026a6:	f7fd fd97 	bl	80001d8 <__aeabi_uldivmod>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4b2f      	ldr	r3, [pc, #188]	; (800276c <UART_SetConfig+0x38c>)
 80026b0:	fba3 1302 	umull	r1, r3, r3, r2
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	2164      	movs	r1, #100	; 0x64
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	3332      	adds	r3, #50	; 0x32
 80026c2:	4a2a      	ldr	r2, [pc, #168]	; (800276c <UART_SetConfig+0x38c>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ce:	441e      	add	r6, r3
 80026d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d2:	4618      	mov	r0, r3
 80026d4:	f04f 0100 	mov.w	r1, #0
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	1894      	adds	r4, r2, r2
 80026de:	603c      	str	r4, [r7, #0]
 80026e0:	415b      	adcs	r3, r3
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026e8:	1812      	adds	r2, r2, r0
 80026ea:	eb41 0303 	adc.w	r3, r1, r3
 80026ee:	f04f 0400 	mov.w	r4, #0
 80026f2:	f04f 0500 	mov.w	r5, #0
 80026f6:	00dd      	lsls	r5, r3, #3
 80026f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026fc:	00d4      	lsls	r4, r2, #3
 80026fe:	4622      	mov	r2, r4
 8002700:	462b      	mov	r3, r5
 8002702:	eb12 0a00 	adds.w	sl, r2, r0
 8002706:	eb43 0b01 	adc.w	fp, r3, r1
 800270a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4618      	mov	r0, r3
 8002710:	f04f 0100 	mov.w	r1, #0
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	008b      	lsls	r3, r1, #2
 800271e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002722:	0082      	lsls	r2, r0, #2
 8002724:	4650      	mov	r0, sl
 8002726:	4659      	mov	r1, fp
 8002728:	f7fd fd56 	bl	80001d8 <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <UART_SetConfig+0x38c>)
 8002732:	fba3 1302 	umull	r1, r3, r3, r2
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2164      	movs	r1, #100	; 0x64
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	3332      	adds	r3, #50	; 0x32
 8002744:	4a09      	ldr	r2, [pc, #36]	; (800276c <UART_SetConfig+0x38c>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	f003 020f 	and.w	r2, r3, #15
 8002750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4432      	add	r2, r6
 8002756:	609a      	str	r2, [r3, #8]
}
 8002758:	bf00      	nop
 800275a:	377c      	adds	r7, #124	; 0x7c
 800275c:	46bd      	mov	sp, r7
 800275e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002762:	bf00      	nop
 8002764:	40011000 	.word	0x40011000
 8002768:	40011400 	.word	0x40011400
 800276c:	51eb851f 	.word	0x51eb851f

08002770 <__libc_init_array>:
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	4d0d      	ldr	r5, [pc, #52]	; (80027a8 <__libc_init_array+0x38>)
 8002774:	4c0d      	ldr	r4, [pc, #52]	; (80027ac <__libc_init_array+0x3c>)
 8002776:	1b64      	subs	r4, r4, r5
 8002778:	10a4      	asrs	r4, r4, #2
 800277a:	2600      	movs	r6, #0
 800277c:	42a6      	cmp	r6, r4
 800277e:	d109      	bne.n	8002794 <__libc_init_array+0x24>
 8002780:	4d0b      	ldr	r5, [pc, #44]	; (80027b0 <__libc_init_array+0x40>)
 8002782:	4c0c      	ldr	r4, [pc, #48]	; (80027b4 <__libc_init_array+0x44>)
 8002784:	f000 f820 	bl	80027c8 <_init>
 8002788:	1b64      	subs	r4, r4, r5
 800278a:	10a4      	asrs	r4, r4, #2
 800278c:	2600      	movs	r6, #0
 800278e:	42a6      	cmp	r6, r4
 8002790:	d105      	bne.n	800279e <__libc_init_array+0x2e>
 8002792:	bd70      	pop	{r4, r5, r6, pc}
 8002794:	f855 3b04 	ldr.w	r3, [r5], #4
 8002798:	4798      	blx	r3
 800279a:	3601      	adds	r6, #1
 800279c:	e7ee      	b.n	800277c <__libc_init_array+0xc>
 800279e:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a2:	4798      	blx	r3
 80027a4:	3601      	adds	r6, #1
 80027a6:	e7f2      	b.n	800278e <__libc_init_array+0x1e>
 80027a8:	08002800 	.word	0x08002800
 80027ac:	08002800 	.word	0x08002800
 80027b0:	08002800 	.word	0x08002800
 80027b4:	08002804 	.word	0x08002804

080027b8 <memset>:
 80027b8:	4402      	add	r2, r0
 80027ba:	4603      	mov	r3, r0
 80027bc:	4293      	cmp	r3, r2
 80027be:	d100      	bne.n	80027c2 <memset+0xa>
 80027c0:	4770      	bx	lr
 80027c2:	f803 1b01 	strb.w	r1, [r3], #1
 80027c6:	e7f9      	b.n	80027bc <memset+0x4>

080027c8 <_init>:
 80027c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ca:	bf00      	nop
 80027cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ce:	bc08      	pop	{r3}
 80027d0:	469e      	mov	lr, r3
 80027d2:	4770      	bx	lr

080027d4 <_fini>:
 80027d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d6:	bf00      	nop
 80027d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027da:	bc08      	pop	{r3}
 80027dc:	469e      	mov	lr, r3
 80027de:	4770      	bx	lr
